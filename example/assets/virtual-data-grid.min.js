(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./pollyfills/Array.find.js');require('./pollyfills/Element.matches.js');require('./pollyfills/Element.remove.js');require('./pollyfills/NodeList.forEach.js');require('./pollyfills/Object.assign.js');

var VirtualDataGrid = require('./models/module/virtual-data-grid');

window.VirtualDataGrid = VirtualDataGrid;
},{"./models/module/virtual-data-grid":16,"./pollyfills/Array.find.js":25,"./pollyfills/Element.matches.js":26,"./pollyfills/Element.remove.js":27,"./pollyfills/NodeList.forEach.js":28,"./pollyfills/Object.assign.js":29}],2:[function(require,module,exports){
'use strict';

function invokeFn(name, param1, param2) {
	if (typeof window.tlite == 'undefined') {
		return;
	}

	window.tlite[name](param1, param2);
}

function getOrientationByPosition(element) {
	var windowHeight = window.innerHeight,
		centerHeight = windowHeight / 2,
		position = element.getBoundingClientRect();

	return centerHeight < position.top ? 's' : 'n';
}

function show(options) {
	switch (options.type) {
		case 'info':
			showInfo(options);
			break;
		case 'warn':
			showWarn(options);
			break;
		case 'error':
			showError(options);
			break;
		default:
			showInfo(options);
			break;
	}
}

function hide(element) {
	invokeFn('hide', element);
}

function hideAll() {
	document.querySelectorAll('.tlite').forEach(function(el) {
		hide(el.parentNode);
	});
}

function showInfo(options) {
	invokeFn('show', options.element, { grav: getOrientationByPosition(options.element) });
}

function showWarn(options) {
	invokeFn('show', options.element);
}

function showError(options) {
	invokeFn('show', options.element);
}

module.exports = {
	show: show,
	hide: hide,
	hideAll: hideAll,
	showInfo: showInfo,
	showWarn: showWarn,
	showError: showError
};
},{}],3:[function(require,module,exports){
'use strict';

var configUtil     = require('../utils/configuration'),
	dataUtil       = require('../utils/data'),
	tooltipDefault = require('../configs/defaults/tooltip');

var DEFAULTS = {
	selectors: {
		mainContainer: '.main-container',

		fixedContainer: 'fixed-container',
		fixedHeaderContainer: 'fixed-header-container',
		dataContainer: 'data-container',
		dataHeaderContainer: 'data-header-container',

		fixedTable: 'fixed-table',
		fixedHeaderTable: 'fixed-header-table',
		dataTable: 'data-table',
		dataHeaderTable: 'data-header-table',

		editingCell: 'editing-cell',
		editedCell: 'edited-cell',
		saveButton: null
	},
	dimensions: {
		cellWidth: 150,
		cellHeight: 50,
		cellPaddingVertical: 4,
		cellPaddingHorizontal: 8,
		cellBorderWidth: 1,
		containerPaddingBottom: 54,
		containerHeight: configUtil.getDefaultContainerHeight,
		lockCellHeight: false
	},
	edit: {
		enabled: false,
		mode: 'batch',
		validate: false
	},
	filter: {
		enabled: false,
		customFilter: null
	},
	sort: {
		enabled: false,
		default: configUtil.getSortDefault,
		customSort: null
	},
	eventHandlers: {
		onBeforeEdit: configUtil.nil,
		onValidation: configUtil.nil,
		onAfterEdit: configUtil.nil,
		onBeforeSave: configUtil.nil,
		onSaveRow: configUtil.nil,
		onSaveBatch: configUtil.nil,
		onAfterSave: configUtil.nil
	},
	locale: {
		name: 'en'
	},
	dataSource: [ ],
	headers: [ [ ] ],
	fixedHeaders: [ [ ] ],
	uniqueRowKey: '__uniqueRowKey',
	autoResize: true,
	debug: false,
	uniqueId: 0,
	modules: {
		tooltip: {
			enabled: true,
			show: configUtil.wrapper(tooltipDefault.show),
			hide: configUtil.wrapper(tooltipDefault.hide),
			hideAll: configUtil.wrapper(tooltipDefault.hideAll),
			showInfo: configUtil.wrapper(tooltipDefault.showInfo),
			showWarn: configUtil.wrapper(tooltipDefault.showWarn),
			showError: configUtil.wrapper(tooltipDefault.showError)
		}
	},
	inner: {}
};

var HEADER_DEFAULTS = {
	dataType: 'text',
	filterType: 'equals',
	filterDisabled: false,
	sortDisabled: false,
	validatorObject: {},
	customValidator: null
};

var STATIC_INNER_ATTRS = {
	selectors: {
		uniqueIdPrefix: 'virtual-data-grid-',
		headerRow: 'header-row',
		headerCell: 'header-cell',
		bufferHeaderCell: 'buffer-header-cell',
		sortCell: 'sort-cell',
		sortIcon: 'sort-icon',
		sortDisabled: 'sort-disabled',
		filterRow: 'filter-row',
		filterCell: 'filter-cell',
		filterDisabled: 'filter-disabled',
		filterContainer: 'filter-container',
		filterSearchIcon: 'filter-search-icon',
		filterClearIcon: 'filter-clear-icon',
		filteredOutRow: 'filtered-out',
		dataRow: 'data-row',
		dataCell: 'data-cell',
		cellDataContainer: 'cell-data-container',
		overflowedCell: 'overflowed-cell'
	},
	dimensions: {},
	icons: {
		sort: {
			asc: 'fa fa-arrow-down',
			desc: 'fa fa-arrow-up'
		},
		filter: {
			search: 'fa fa-search',
			clear: 'fa fa-times'
		}
	},
	editedValues: { },
	sort: { },
	filters: { },
	minBufferWidth: 2,
};

function init(config, options) {
	initConfigObject(config);

	updateValue(config, options, 'selectors.mainContainer');
	updateValue(config, options, 'selectors.fixedContainer');
	updateValue(config, options, 'selectors.fixedHeaderContainer');
	updateValue(config, options, 'selectors.fixedTable');
	updateValue(config, options, 'selectors.fixedHeaderTable');
	updateValue(config, options, 'selectors.dataContainer');
	updateValue(config, options, 'selectors.dataHeaderContainer');
	updateValue(config, options, 'selectors.dataTable');
	updateValue(config, options, 'selectors.dataHeaderTable');
	updateValue(config, options, 'selectors.editingCell');
	updateValue(config, options, 'selectors.editedCell');
	updateValue(config, options, 'selectors.saveButton');

	updateValue(config, options, 'uniqueId');
	updateValue(config, options, 'headers');
	updateValue(config, options, 'locale.name');
	updateValue(config, options, 'dataSource');
	updateValue(config, options, 'fixedHeaders');
	updateValue(config, options, 'uniqueRowKey');
	updateValue(config, options, 'autoResize');

	updateValue(config, options, 'edit.enabled');
	updateValue(config, options, 'edit.mode');
	updateValue(config, options, 'edit.validate');
	updateValue(config, options, 'filter.enabled');
	updateValue(config, options, 'filter.customFilter');
	updateValue(config, options, 'sort.enabled');
	updateValue(config, options, 'sort.default');
	updateValue(config, options, 'sort.customSort');
	updateValue(config, options, 'debug');

	updateValue(config, options, 'dimensions.cellWidth');
	updateValue(config, options, 'dimensions.cellHeight');
	updateValue(config, options, 'dimensions.cellPaddingVertical');
	updateValue(config, options, 'dimensions.cellPaddingHorizontal');
	updateValue(config, options, 'dimensions.cellBorderWidth');
	updateValue(config, options, 'dimensions.containerPaddingBottom');
	updateValue(config, options, 'dimensions.containerHeight');
	updateValue(config, options, 'dimensions.lockCellHeight');

	updateValue(config, options, 'eventHandlers.onBeforeEdit');
	updateValue(config, options, 'eventHandlers.onValidation');
	updateValue(config, options, 'eventHandlers.onAfterEdit');
	updateValue(config, options, 'eventHandlers.onBeforeSave');
	updateValue(config, options, 'eventHandlers.onSaveRow');
	updateValue(config, options, 'eventHandlers.onSaveBatch');
	updateValue(config, options, 'eventHandlers.onAfterSave');

	// Tooltip module
	updateValue(config, options, 'modules.tooltip.enabled');
	updateValue(config, options, 'modules.tooltip.show');
	updateValue(config, options, 'modules.tooltip.hide');
	updateValue(config, options, 'modules.tooltip.hideAll');
	updateValue(config, options, 'modules.tooltip.showInfo');
	updateValue(config, options, 'modules.tooltip.showWarn');
	updateValue(config, options, 'modules.tooltip.showError');

	calculateUniqueIdSelector(config);

	initHeaderData(config);
	initDataSource(config, options.uniqueRowKey);
	initCalculatedValues(config);
}

function initConfigObject(config) {
	config.selectors = {};
	config.eventHandlers = {};
	config.locale = {};
	config.inner = dataUtil.cloneObject(STATIC_INNER_ATTRS);
}

function calculateUniqueIdSelector(config) {
	config.inner.selectors.uniqueId = config.inner.selectors.uniqueIdPrefix + config.uniqueId;
}

function initCalculatedValues(config) {
	// Annak a header sornak az indexe, ami a cella kulcsokat is meghatározza. Mivel ez mindig az utolsó lesz, ezért TODO: Kiszedni/átalakítani
	config.inner.indexOfCellKeyHeader = configUtil.getIndexOfCellKeyHeader(config);
	config.inner.originalDataSource = [].concat(config.dataSource);
	config.inner.dimensions.scrollLineHeight = configUtil.getScrollLineHeight();
	config.inner.dimensions.scrollPageHeight = configUtil.getScrollPageHeight();
}

function initHeaderData(config) {
	var processedHeaders = [],
		processedFixedHeaders = [];

	config.headers.forEach(function(headerRow) {
		var hRow = [];

		headerRow.forEach(function(headerCell) {
			if (typeof headerCell.dataType == 'undefined') {
				headerCell.dataType = HEADER_DEFAULTS.dataType;
			}

			if (typeof headerCell.filterType == 'undefined') {
				headerCell.filterType = HEADER_DEFAULTS.filterType;
			}

			if (typeof headerCell.filterDisabled == 'undefined') {
				headerCell.filterDisabled = HEADER_DEFAULTS.filterDisabled;
			}

			if (typeof headerCell.sortDisabled == 'undefined') {
				headerCell.sortDisabled = HEADER_DEFAULTS.sortDisabled;
			}

			if (typeof headerCell.validatorObject == 'undefined') {
				headerCell.validatorObject = HEADER_DEFAULTS.validatorObject;
			}

			if (typeof headerCell.customValidator == 'undefined') {
				headerCell.customValidator = HEADER_DEFAULTS.customValidator;
			}

			if (typeof headerCell.width == 'undefined') {
				headerCell.width = config.dimensions.cellWidth;
			}

			hRow.push(headerCell);

			if (typeof headerCell.colspan != 'undefined') {
				for (var i = 1; i < headerCell.colspan; i++) {
					hRow.push({});
				}
			}
		});

		processedHeaders.push(hRow);
	});

	config.fixedHeaders.forEach(function(headerRow) {
		var hRow = [];

		headerRow.forEach(function(headerCell) {
			if (typeof headerCell.dataType == 'undefined') {
				headerCell.dataType = HEADER_DEFAULTS.dataType;
			}

			if (typeof headerCell.filterType == 'undefined') {
				headerCell.filterType = HEADER_DEFAULTS.filterType;
			}

			if (typeof headerCell.filterDisabled == 'undefined') {
				headerCell.filterDisabled = HEADER_DEFAULTS.filterDisabled;
			}

			if (typeof headerCell.sortDisabled == 'undefined') {
				headerCell.sortDisabled = HEADER_DEFAULTS.sortDisabled;
			}

			if (typeof headerCell.width == 'undefined') {
				headerCell.width = config.dimensions.cellWidth;
			}

			hRow.push(headerCell);

			if (typeof headerCell.colspan != 'undefined') {
				for (var i = 1; i < headerCell.colspan; i++) {
					hRow.push({});
				}
			}
		});

		processedFixedHeaders.push(hRow);
	});

	config.headers = processedHeaders;
	config.fixedHeaders = processedFixedHeaders;
}

function initDataSource(config, uniqueRowKey) {
	if (typeof uniqueRowKey == 'undefined') {
		for (var i = 0; i < config.dataSource.length; i++) {
			config.dataSource[i][config.uniqueRowKey] = i;
		}
	}
}

function updateValue(config, options, key) {
	var target = getInnerObject(config, key), // eslint-disable-line no-unused-vars
		value = getInnerValue(options, key),
		keys = key.split('.'),
		lastKey = keys[keys.length - 1];

	if (typeof value == 'undefined') {
		target[lastKey] = typeof getInnerValue(DEFAULTS, key) == 'function' ? getInnerValue(DEFAULTS, key)(config) : getInnerValue(DEFAULTS, key);
	} else {
		target[lastKey] = value;
	}
}

function getInnerObject(object, key) {
	if (key.indexOf('.') === -1) {
		return object;
	}

	var subKey = key.split('.')[0],
		subObject = object[subKey];

	if (typeof subObject == 'undefined') {
		object[subKey] = {};
		subObject = object[subKey];
	}

	return getInnerObject(subObject, key.substring(key.indexOf('.') + 1));
}

function getInnerValue(object, key) {
	if (key.indexOf('.') === -1) {
		return object[key];
	}

	var subKey = key.split('.')[0],
		subObject = object[subKey];

	if (typeof subObject == 'undefined') {
		return subObject;
	}

	return getInnerValue(subObject, key.substring(key.indexOf('.') + 1));
}

module.exports = {
	init: init,
	DEFAULTS: DEFAULTS
};
},{"../configs/defaults/tooltip":2,"../utils/configuration":30,"../utils/data":31}],4:[function(require,module,exports){
'use strict';

function createDataContainer(config, cellNode, cellObj, data) {
	var dataContainer = document.createElement('div');

	dataContainer.classList.add(config.inner.selectors.cellDataContainer);
	dataContainer.style.minWidth = cellObj.width + 'px';
	dataContainer.style.padding = config.dimensions.cellPaddingVertical + 'px ' + config.dimensions.cellPaddingHorizontal + 'px';

	if (config.dimensions.lockCellHeight) {
		var maxHeight = config.dimensions.cellHeight - config.dimensions.cellBorderWidth - config.dimensions.cellPaddingVertical * 2;

		dataContainer.style.maxHeight = maxHeight + 'px';
	}

	cellNode.appendChild(dataContainer);

	if (typeof data != 'undefined') {
		updateDataContainer(config, cellNode, data);
	}

	return dataContainer;
}

function createHeaderData(config, cellNode, cellObj, isLastRow) {
	var innerHTML = '',
		columnText = cellObj.text || cellObj.key || '';

	if (config.sort.enabled && !cellObj.sortDisabled && isLastRow) {
		var attribute = cellObj.key,
			direction = typeof attribute != 'undefined' && config.inner.sort.attribute === attribute ? config.inner.sort.direction : 'none',
			isSorted = direction !== 'none',
			iconClass = direction === 'down' ? config.inner.icons.sort.asc : config.inner.icons.sort.desc,
			iconElementClass = config.inner.selectors.sortIcon + (isSorted ? ' ' + iconClass : ' hidden');

		innerHTML += '<i class="' + iconElementClass + '" aria-hidden="true"></i>';

		cellNode.setAttribute('data-attribute', attribute);
	}

	innerHTML += columnText;

	return innerHTML;
}

function createFilterData(config, cellNode, cellObj, filterObj) {
	var innerHTML = '',
		iconClass = config.inner.icons.filter.search,
		iconElementClass = config.inner.selectors.filterSearchIcon + ' ' + iconClass,
		clearIconClass = config.inner.icons.filter.clear,
		clearIconElementClass = config.inner.selectors.filterClearIcon + ' ' + clearIconClass;

	if (!cellObj.filterDisabled) {
		innerHTML += '<i class="' + iconElementClass + '" aria-hidden="true"></i>';
		innerHTML += filterObj.value || '';

		if (typeof filterObj.value != 'undefined' && filterObj.value !== '') {
			innerHTML += '<i class="' + clearIconElementClass + '" aria-hidden="true"></i>';
		}
	}

	return innerHTML;
}

function updateDataContainer(config, cellNode, data) {
	var dataContainer = cellNode.querySelector('.' + config.inner.selectors.cellDataContainer);

	if (typeof data == 'undefined' || data === null) {
		dataContainer.innerHTML = '';
		cellNode.title = '';
	} else if (data.nodeType) { // If its an Element object
		dataContainer.innerHTML = '';
		dataContainer.appendChild(data);
		cellNode.title = data.textContent;
	} else { // else just add to the containers innerHTML
		dataContainer.innerHTML = data;
		cellNode.title = dataContainer.textContent;
	}
}

function updateCell(config, cellNode, cellData) {
	updateDataContainer(config, cellNode, cellData.getValue());

	cellNode.className = config.inner.selectors.dataCell + ' ' + (cellData.class || '');
}

module.exports = {
	createDataContainer: createDataContainer,
	createHeaderData: createHeaderData,
	createFilterData: createFilterData,
	updateDataContainer: updateDataContainer,
	updateCell: updateCell
};
},{}],5:[function(require,module,exports){
'use strict';

var dataUtil = require('../utils/data');

function createContainer(config) {
	var filterContainer       = document.createElement('div'),
		clearIconClass        = config.inner.icons.filter.clear,
		clearIconElementClass = config.inner.selectors.filterClearIcon + ' ' + clearIconClass;

	filterContainer.classList.add(config.inner.selectors.filterContainer);
	filterContainer.innerHTML = '<input><i class="' + clearIconElementClass + '" aria-hidden="true"></i>';

	return filterContainer;
}

function updateInput(config, cellNode, filterObj, headerObj, finishEditingFilter) {
	var filterContainer = cellNode.querySelector('.' + config.inner.selectors.filterContainer),
		filterInput = filterContainer.querySelector('input');

	filterInput.setAttribute('type', filterObj.dataType);
	filterInput.value = filterObj.value;
	filterInput.focus();
	filterInput.addEventListener('keyup', function(event) {
		if ((event.keyCode || event.which) === 13) { // Enter key
			filterObj.value = dataUtil.getValueByType(filterInput.value, filterObj.dataType);

			finishEditingFilter(config, cellNode, headerObj, filterObj);
		} else if ((event.keyCode || event.which) === 27) { // Escape key
			finishEditingFilter(config, cellNode, headerObj, filterObj);
		}
	});

	return filterInput;
}

module.exports = {
	createContainer: createContainer,
	updateInput: updateInput
};
},{"../utils/data":31}],6:[function(require,module,exports){
'use strict';

function createInputNode(cellData, eventInstances) {
	var inputNode = document.createElement('input');

	inputNode.value = cellData.getValue();
	inputNode.style.minWidth = '10px'; // TODO: Kiszervezni osztályba
	inputNode.style.width = '80%'; // TODO: Kiszervezni osztályba
	inputNode.setAttribute('type', cellData.dataType);
	inputNode.addEventListener('blur', eventInstances.onInputBlurEventHandler);
	inputNode.addEventListener('keyup', eventInstances.onInputKeyUpEventHandler);

	return inputNode;
}

module.exports = {
	createInputNode: createInputNode
};
},{}],7:[function(require,module,exports){
'use strict';

var Class = require('class-256.js');

module.exports = Class.extend(function() {
	var self = this;

	self.constructor = function(attributes, params) {
		if (typeof attributes == 'undefined') {
			return;
		}

		attributes.forEach(function(attr) {
			self[attr] = typeof params == 'undefined' || typeof params[attr] == 'undefined' ? null : params[attr];
		});
	};

	this.updateAttributes = function(attrs) {
		Object.keys(attrs).forEach(function(k) {
			if (typeof attrs[k] != 'undefined' && typeof self[k] != 'undefined') {
				self[k] = attrs[k];
			}
		});
	};
});
},{"class-256.js":35}],8:[function(require,module,exports){
'use strict';

function CellObject(p) {
	var self = this;

	initAttr('key');
	initAttr('value');
	initAttr('editedValue');
	initAttr('dataType');
	initAttr('class');
	initAttr('rowNumber');
	initAttr('columnNumber');
	initAttr('validatorObject');
	initAttr('customValidator');

	function initAttr(name) {
		self[name] = typeof p == 'undefined' || typeof p[name] == 'undefined' ? null : p[name];
	}

	this.updateAttributes = function(attrs) {
		Object.keys(attrs).forEach(function(k) {
			if (typeof attrs[k] != 'undefined' && typeof self[k] != 'undefined') {
				self[k] = attrs[k];
			}
		});
	};

	this.getValue = function() {
		return self.cellChanged ? self.editedValue : self.value;
	};

	this.updateValue = function(value) {
		if (self.dataType === 'number') {
			value = isNaN(parseFloat(value)) ? 0 : parseFloat(value);
		}

		if (self.value === value || self.value === null && typeof value == 'undefined') {
			self.editedValue = null;
			self.cellChanged = false;
		} else {
			self.editedValue = value;
			self.cellChanged = true;
		}
	};

	this.discardChangedValue = function() {
		self.editedValue = null;
	};

	this.isCellChanged = function() {
		return self.cellChanged;
	};
}

module.exports = CellObject;
},{}],9:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],10:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'savedRows'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],11:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],12:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'editedRows',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],13:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"../base":7,"dup":12}],14:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'editedRow',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],15:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData',
	'isDataValid',
	'validationResult',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],16:[function(require,module,exports){
'use strict';

var generator = require('../../modules/generator');

var uniqueIdSequence = 1;

function VirtualDataGrid() {
	var self = this;

	self.configuration = {};
	self.uniqueId = uniqueIdSequence++;
	self.DEFAULT_OPTIONS = generator.getDefaultOptions();
	self.generateTable = function(options) {
		options.uniqueId = self.uniqueId;

		generator.generateTable(self.configuration, options);
	};
	self.destroyTable = function() {
		generator.destroyTable(self.configuration);
	};
	self.getId = function() {
		return self.uniqueId;
	};
}

module.exports = VirtualDataGrid;
},{"../../modules/generator":20}],17:[function(require,module,exports){
'use strict';

var BeforeEditArgs = require('../models/event-arguments/before-edit'),
	BeforeSaveArgs = require('../models/event-arguments/before-save'),
	ValidationArgs = require('../models/event-arguments/validation'),
	SaveRowArgs    = require('../models/event-arguments/save-row'),
	SaveBatchArgs  = require('../models/event-arguments/save-batch'),
	AfterEditArgs  = require('../models/event-arguments/after-edit'),
	AfterSaveArgs  = require('../models/event-arguments/after-save'),
	cellElement    = require('../elements/cell'),
	inputElement   = require('../elements/input'),
	tableModule    = require('../modules/table'),
	validation     = require('../modules/validation'),
	tableUtil      = require('../utils/table'),
	domUtil        = require('../utils/dom'),
	filterModule   = require('../modules/filter');

function startEditingCell(config, cellNode, instances, eventHandlers) {
	if (!config.edit.enabled) {
		return;
	}

	var rowNumber = domUtil.getRowNumber(config, cellNode),
		columnNumber = domUtil.getColumnNumber(config, cellNode);

	if (rowNumber >= config.dataSource.length) {
		return;
	}

	var cellData = tableUtil.getCellData(config, rowNumber, columnNumber);

	var beforeEditArgs = new BeforeEditArgs({
		cellNode: cellNode,
		cellData: cellData,
		cancelEvent: false
	});

	config.eventHandlers.onBeforeEdit(beforeEditArgs);

	if (!beforeEditArgs.cancelEvent) {
		cellNode.classList.add(config.selectors.editingCell);
		cellNode.classList.remove(config.selectors.editedCell);

		instances.onInputBlurEventHandler = function(ev) { eventHandlers.onInputBlurEventHandler(ev, config); };
		instances.onInputKeyUpEventHandler = function(ev) { eventHandlers.onInputKeyUpEventHandler(ev, config); };

		var inputNode = inputElement.createInputNode(cellData, instances);

		cellElement.updateDataContainer(config, cellNode, inputNode);

		inputNode.focus();
	}
}

function finishEditingCell(config, inputNode, eventHandlers) {
	var cellNode = inputNode.parentNode.parentNode,
		rowNumber = domUtil.getRowNumber(config, cellNode),
		columnNumber = domUtil.getColumnNumber(config, cellNode),
		cellData = tableUtil.getCellData(config, rowNumber, columnNumber),
		updatedValue = inputNode.value;

	cellData.updateAttributes({ class: config.selectors.editedCell });
	cellData.updateValue(updatedValue);

	if (!cellData.isCellChanged()) {
		tableModule.resetEditingCell(config, eventHandlers);

		return;
	}

	var validationEnabled = config.edit.validate;

	var validationResult = validation.validate(config, cellData),
		isDataValid = validationResult.length === 0,
		validationArgs = new ValidationArgs({
			cellNode: cellNode,
			cellData: cellData,
			isDataValid: isDataValid,
			validationResult: validationResult,
			cancelEvent: !isDataValid
		});

	if (validationEnabled) {
		config.eventHandlers.onValidation(validationArgs);
	}

	if (validationArgs.cancelEvent !== true) {
		tableUtil.storeUpdatedCellValue(config, cellData);
		cellElement.updateCell(config, cellNode, cellData);

		var afterEditArgs = new AfterEditArgs({
			cellNode: cellNode,
			cellData: cellData
		});

		config.eventHandlers.onAfterEdit(afterEditArgs);

		filterModule.filter(config);
	} else if (validationEnabled && !isDataValid) {
		validation.showErrors(validationResult);
	}
}

function cancelEditingCell() {
	return '';
}

function saveCells(config) {
	if (!config.edit.enabled) {
		return;
	}

	var beforeSaveArgs = new BeforeSaveArgs({
		editedRows: config.inner.editedValues,
		cancelEvent: false
	});

	config.eventHandlers.onBeforeSave(beforeSaveArgs);

	if (beforeSaveArgs.cancelEvent) {
		return;
	}

	if (config.edit.mode === 'row') { // Row mode
		var saveRowArgs = new SaveRowArgs({ cancelEvent: false });

		config.dataSource.forEach(function(row) {
			saveRowArgs = new SaveRowArgs({
				editedRow: config.inner.editedValues,
				cancelEvent: false
			});

			if (!saveRowArgs.cancelEvent) {
				config.eventHandlers.onSavingRow(saveRowArgs);
			}

			if (!saveRowArgs.cancelEvent) {
				tableUtil.persistRowValues(config, row);
			}
		});

		if (!saveRowArgs.cancelEvent) {
			return;
		}
	} else if (config.edit.mode === 'batch') { // Batch mode
		var saveBatchArgs = new SaveBatchArgs({
			editedRows: config.inner.editedValues,
			cancelEvent: false
		});

		config.eventHandlers.onSavingBatch(saveBatchArgs);

		if (saveBatchArgs.cancelEvent) {
			return;
		}

		tableUtil.persistBatchValues(config);
	}

	var afterSaveArgs = new AfterSaveArgs({
		savedRows: config.inner.editedValues
	});

	tableModule.resetEditedCells(config);

	config.eventHandlers.onAfterSave(afterSaveArgs);
}

module.exports = {
	startEditingCell: startEditingCell,
	finishEditingCell: finishEditingCell,
	cancelEditingCell: cancelEditingCell,
	saveCells: saveCells
};
},{"../elements/cell":4,"../elements/input":6,"../models/event-arguments/after-edit":9,"../models/event-arguments/after-save":10,"../models/event-arguments/before-edit":11,"../models/event-arguments/before-save":12,"../models/event-arguments/save-batch":13,"../models/event-arguments/save-row":14,"../models/event-arguments/validation":15,"../modules/filter":19,"../modules/table":22,"../modules/validation":24,"../utils/dom":32,"../utils/table":34}],18:[function(require,module,exports){
'use strict';

var domUtil       = require('../utils/dom'),
	keyboardUtil  = require('../utils/keyboard'),
	sortModule    = require('../modules/sort'),
	editModule    = require('../modules/edit'),
	tableModule   = require('../modules/table'),
	filterModule  = require('../modules/filter'),
	tooltipModule = require('../modules/tooltip');

var container;

var instances = {
	onResizeEventHandler: function() {},
	onScrollEventHandler: function() {},
	onWheelEventHandler: function() {},
	onInputBlurEventHandler: function() {},
	onClickCellEventHandler: function() {},
	onClickSaveButtonEventHandler: function() {},
	onClickSortHeader: function() {},
	onClickFilterHeader: function() {},
	onMouseEnterCellWithTitle: function() {},
	onMouseLeaveCellWithTitle: function() {},
};

function onResizeEventHandler(event, config) {
	if (document.querySelector('#' + config.inner.selectors.uniqueId) === null) {
		return;
	}

	tableModule.updateContainerHeight(config);
}

function onWheelEventHandler(event, config) {
	event.preventDefault();

	if (event.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
		container.scrollTop += event.deltaY;
		container.scrollLeft += event.deltaX;
	} else if (event.deltaMode === WheelEvent.DOM_DELTA_LINE) {
		container.scrollTop += event.deltaY * config.inner.dimensions.scrollLineHeight;
		container.scrollLeft += event.deltaX * config.inner.dimensions.scrollLineHeight;
	} else if (event.deltaMode === WheelEvent.DOM_DELTA_PAGE) {
		container.scrollTop += event.deltaY * config.inner.dimensions.scrollPageHeight;
		container.scrollLeft += event.deltaX * config.inner.dimensions.scrollPageHeight;
	}
}

function onScrollEventHandler(event, config) {
	tooltipModule.hideAll(config);

	tableModule.scrollTables(config);
}

function onClickCellEventHandler(event, config) {
	if (!event.target.matches('.' + config.inner.selectors.cellDataContainer)) {
		return;
	}

	editModule.startEditingCell(config, event.target.parentNode, instances, {
		onInputBlurEventHandler: onInputBlurEventHandler,
		onInputKeyUpEventHandler: onInputKeyUpEventHandler
	});
}

function onInputBlurEventHandler(event, config) {
	editModule.finishEditingCell(config, event.target, {
		onInputBlurEventHandler: onInputBlurEventHandler,
		onInputKeyUpEventHandler: onInputKeyUpEventHandler
	});
}

function onInputKeyUpEventHandler(event, config) {
	var keyCode = keyboardUtil.getKeyCode(event);

	switch (keyCode) {
		case keyboardUtil.KEY_CODES.ENTER:
			event.target.removeEventListener('blur', instances.onInputBlurEventHandler);
			editModule.finishEditingCell(config, event.target, {
				onInputBlurEventHandler: onInputBlurEventHandler,
				onInputKeyUpEventHandler: onInputKeyUpEventHandler
			});
			break;
		case keyboardUtil.KEY_CODES.ESCAPE:
			editModule.cancelEditingCell(config, event.target, {
				onInputBlurEventHandler: onInputBlurEventHandler,
				onInputKeyUpEventHandler: onInputKeyUpEventHandler
			});
			break;
		default:
			break;
	}
}

function onClickSaveButtonEventHandler(event, config) {
	editModule.saveCells(config);
}

function onClickSortHeader(event, config) {
	var sortCellSelector = '.' + config.inner.selectors.sortCell,
		sortContainerSelector = sortCellSelector + ' .' + config.inner.selectors.cellDataContainer,
		sortDisabledSelector = '.' + config.inner.selectors.sortDisabled,
		sortIconSelector = sortCellSelector + ' .' + config.inner.selectors.sortIcon;

	if (!event.target.matches(sortContainerSelector) &&
		!event.target.matches(sortIconSelector) ||
		event.target.matches(sortDisabledSelector)) {
		return;
	}

	if (event.target.matches(sortIconSelector)) {
		sortModule.resetSort(config);
	}

	if (event.target.matches(sortContainerSelector)) {
		sortModule.sortByColumn(config, domUtil.findParentNode(event.target, sortCellSelector));
	}
}

function onClickFilterHeader(event, config) {
	var filterCellSelector = '.' + config.inner.selectors.filterCell,
		filterContainerSelector = filterCellSelector + ' .' + config.inner.selectors.cellDataContainer,
		filterDisabledSelector = '.' + config.inner.selectors.filterDisabled,
		filterSearchIconSelector = filterCellSelector + ' .' + config.inner.selectors.filterSearchIcon,
		filterClearIconSelector = filterCellSelector + ' .' + config.inner.selectors.filterClearIcon,
		cellNode = domUtil.findParentNode(event.target, filterCellSelector);

	if (!event.target.matches(filterContainerSelector) &&
		!event.target.matches(filterSearchIconSelector) &&
		!event.target.matches(filterClearIconSelector) ||
		cellNode.matches(filterDisabledSelector)) {

		return;
	}

	if (event.target.matches(filterClearIconSelector)) {
		filterModule.clearFilter(config, cellNode);

		return;
	}

	filterModule.startEditingFilter(config, cellNode);
}

function onMouseEnterCellWithTitle(event, config) {
	tooltipModule.onMouseEnterCellWithTitle(config, event.target);
}

function onMouseLeaveCellWithTitle(event, config) {
	tooltipModule.onMouseLeaveCellWithTitle(config, event.target);
}

function init(config) {
	container = document.querySelector('.' + config.selectors.dataContainer);

	instances.onResizeEventHandler = function(event) { onResizeEventHandler(event, config); };
	instances.onScrollEventHandler = function(event) { onScrollEventHandler(event, config); };
	instances.onWheelEventHandler = function(event) { onWheelEventHandler(event, config); };
	instances.onClickCellEventHandler = function(event) { onClickCellEventHandler(event, config); };
	instances.onClickSaveButtonEventHandler = function(event) { onClickSaveButtonEventHandler(event, config); };
	instances.onClickSortHeader = function(event) { onClickSortHeader(event, config); };
	instances.onClickFilterHeader = function(event) { onClickFilterHeader(event, config); };
	instances.onMouseEnterCellWithTitle = function(event) { onMouseEnterCellWithTitle(event, config); };
	instances.onMouseLeaveCellWithTitle = function(event) { onMouseLeaveCellWithTitle(event, config); };

	if (config.autoResize) {
		window.addEventListener('resize', instances.onResizeEventHandler);
	}

	if (container !== null) {
		container.addEventListener('wheel', instances.onWheelEventHandler, { passive: false, capture: true });
		container.addEventListener('scroll', instances.onScrollEventHandler);
	}

	if (config.modules.tooltip.enabled) {
		document.querySelectorAll('[title]').forEach(function(el) {
			el.addEventListener('mouseenter', instances.onMouseEnterCellWithTitle);
			el.addEventListener('mouseleave', instances.onMouseLeaveCellWithTitle);
		});
	}

	if (config.edit.enabled && config.selectors.saveButton !== null) {
		document.querySelector(config.selectors.saveButton).addEventListener('click', instances.onClickSaveButtonEventHandler);
	}

	if (config.edit.enabled) {
		document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.inner.selectors.dataCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickCellEventHandler);
		});
	}

	if (config.sort.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.sortCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickSortHeader);
		});
	}

	if (config.filter.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.filterCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickFilterHeader);
		});
	}
}

function remove(config) {
	container = document.querySelector('.' + config.selectors.dataContainer);

	if (config.autoResize) {
		window.removeEventListener('resize', instances.onResizeEventHandler);
	}

	if (container !== null) {
		container.removeEventListener('wheel', instances.onWheelEventHandler);
		container.removeEventListener('scroll', instances.onScrollEventHandler);
	}

	if (config.modules.tooltip.enabled) {
		document.querySelectorAll('[title]').forEach(function(el) {
			el.removeEventListener('mouseenter', instances.onMouseEnterCellWithTitle);
			el.removeEventListener('mouseleave', instances.onMouseLeaveCellWithTitle);
		});
	}

	if (config.edit.enabled && config.selectors.saveButton !== null) {
		document.querySelector(config.selectors.saveButton).removeEventListener('click', instances.onClickSaveButtonEventHandler);
	}

	if (config.edit.enabled) {
		document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.inner.selectors.dataCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickCellEventHandler);
		});
	}

	if (config.sort.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.sortCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickSortHeader);
		});
	}

	if (config.filter.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.filterCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickFilterHeader);
		});
	}
}

module.exports = {
	init: init,
	remove: remove
};
},{"../modules/edit":17,"../modules/filter":19,"../modules/sort":21,"../modules/table":22,"../modules/tooltip":23,"../utils/dom":32,"../utils/keyboard":33}],19:[function(require,module,exports){
'use strict';

var tableModule   = require('../modules/table'),
	sortModule    = require('../modules/sort'),
	dataUtil      = require('../utils/data'),
	configUtil    = require('../utils/configuration'),
	cellElement   = require('../elements/cell'),
	filterElement = require('../elements/filter');

function startEditingFilter(config, cellNode) {
	if (cellNode.querySelector('.' + config.inner.selectors.filterContainer) !== null) {
		return;
	}

	var attribute = cellNode.getAttribute('data-attribute'),
		filterObj = config.inner.filters[attribute] || {},
		headerObj = configUtil.getHeaderObject(config, attribute);

	filterObj.attribute = attribute;
	filterObj.dataType = headerObj.dataType;
	filterObj.filterType = headerObj.filterType;
	filterObj.value = filterObj.value || '';

	config.inner.filters[attribute] = filterObj;

	var filterContainer = filterElement.createContainer(config);

	cellElement.updateDataContainer(config, cellNode, filterContainer);

	var filterInput = filterElement.updateInput(config, cellNode, filterObj, headerObj, finishEditingFilter);

	filterInput.focus();
}

function filter(config, sortAfterFiltering) {
	sortAfterFiltering = sortAfterFiltering !== false;

	config.dataSource = config.inner.originalDataSource;

	Object.keys(config.inner.filters).forEach(function(key) {
		var filterObj = config.inner.filters[key];

		if (typeof filterObj.value == 'undefined' || filterObj.value === '') {
			return;
		}

		if (filterObj.filterType === 'custom') {
			if (config.filter.customFilter !== null) {
				config.dataSource = config.filter.customFilter({
					dataSource: config.dataSource,
					attribute: filterObj.attribute,
					value: filterObj.value,
					editedValues: config.inner.editedValues,
					uniqueRowKey: config.uniqueRowKey
				});
			}
		} else {
			config.dataSource = dataUtil.filterData({
				dataSource: config.dataSource,
				attribute: filterObj.attribute,
				filterType: filterObj.filterType,
				valueOne: filterObj.value,
				valueTwo: filterObj.valueTwo,
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}
	});

	filterOutEmptyRows(config);

	if (sortAfterFiltering) {
		sortModule.sort(config, false);
	}

	tableModule.updateTable(config);
}

function clearFilter(config, cellNode) {
	var attribute = cellNode.getAttribute('data-attribute'),
		cellObj = configUtil.getHeaderObject(config, attribute),
		filterObj = config.inner.filters[attribute];

	filterObj.value = '';

	var newFilters = {};

	Object.keys(config.inner.filters).forEach(function(key) {
		if (key !== attribute) {
			newFilters[key] = config.inner.filters[key];
		}
	});

	config.inner.filters = newFilters;

	finishEditingFilter(config, cellNode, cellObj, filterObj);
}

function finishEditingFilter(config, cellNode, cellObj, filterObj) {
	cellElement.updateDataContainer(config, cellNode, cellElement.createFilterData(config, cellNode, cellObj, filterObj));

	filter(config);
}

function filterOutEmptyRows(config) {
	var dsLength = config.dataSource.length;

	document.querySelectorAll('.' + config.selectors.dataTable + ' tr.' + config.inner.selectors.dataRow).forEach(function(row, rowNumber) {
		row.classList.toggle(config.inner.selectors.filteredOutRow, dsLength <= rowNumber);
	});

	// Fixed cell data row update
	document.querySelectorAll('.' + config.selectors.fixedTable + ' tr.' + config.inner.selectors.dataRow).forEach(function(row, rowNumber) {
		row.classList.toggle(config.inner.selectors.filteredOutRow, dsLength <= rowNumber);
	});
}

module.exports = {
	startEditingFilter: startEditingFilter,
	filter: filter,
	clearFilter: clearFilter
};
},{"../elements/cell":4,"../elements/filter":5,"../modules/sort":21,"../modules/table":22,"../utils/configuration":30,"../utils/data":31}],20:[function(require,module,exports){
'use strict';

var globalConfig = require('../configs/global'),
	events       = require('../modules/events'),
	tableModule  = require('../modules/table'),
	configUtil   = require('../utils/configuration'),
	dataUtil     = require('../utils/data'),
	cellElement  = require('../elements/cell');

function generateTable(config, options) {
	globalConfig.init(config, options);

	initContainers(config);
	initTable(config);

	tableModule.updateTable(config);
	tableModule.updateContainerHeight(config);

	events.init(config);
}

function destroyTable(config) {
	events.remove(config);

	tableModule.destroyTable(config);
}

function initContainers(config) {
	var mainContainer = document.querySelector(config.selectors.mainContainer),
		dataContainer = document.createElement('div'),
		dataHeaderContainer = document.createElement('div'),
		dataTable = document.createElement('table'),
		dataHeaderTable = document.createElement('table'),
		fixedContainer = document.createElement('div'),
		fixedHeaderContainer = document.createElement('div'),
		fixedTable = document.createElement('table'),
		fixedHeaderTable = document.createElement('table');

	mainContainer.setAttribute('id', config.inner.selectors.uniqueId);

	dataContainer.classList.add(config.selectors.dataContainer);
	dataHeaderContainer.classList.add(config.selectors.dataHeaderContainer);
	dataTable.classList.add(config.selectors.dataTable);
	dataHeaderTable.classList.add(config.selectors.dataHeaderTable);
	fixedContainer.classList.add(config.selectors.fixedContainer);
	fixedHeaderContainer.classList.add(config.selectors.fixedHeaderContainer);
	fixedTable.classList.add(config.selectors.fixedTable);
	fixedHeaderTable.classList.add(config.selectors.fixedHeaderTable);

	mainContainer.appendChild(fixedHeaderContainer);
	fixedHeaderContainer.appendChild(fixedHeaderTable);

	mainContainer.appendChild(dataHeaderContainer);
	dataHeaderContainer.appendChild(dataHeaderTable);

	mainContainer.appendChild(fixedContainer);
	fixedContainer.appendChild(fixedTable);

	mainContainer.appendChild(dataContainer);
	dataContainer.appendChild(dataTable);

	dataContainer.style.maxHeight = config.dimensions.containerHeight + 'px';
	dataContainer.style.height = config.dimensions.containerHeight + 'px';

	fixedContainer.style.maxHeight = config.dimensions.containerHeight + 'px';
	fixedContainer.style.height = config.dimensions.containerHeight + 'px';
}

function initTable(config) {
	// Generate virtual table
	var virtualThead = document.createElement('thead'),
		virtualTbody = document.createElement('tbody'),
		columnsNumber = configUtil.getKeyHeader(config).length,
		rowsNumber = config.dataSource.length;

	var i, j, trHead, trBody, tdElement, cellObj, cellData;

	// Generate virtual header
	config.headers.forEach(function(headerRow, rowCount) {
		var isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.headerRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < columnsNumber; j++) {
			cellObj = headerRow[j];
			cellData = cellElement.createHeaderData(config, tdElement, cellObj, isLastRow);

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.headerCell);

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (isLastRow) {
				tdElement.classList.add(config.inner.selectors.sortCell);

				if (!config.sort.enabled || headerRow[j].sortDisabled) {
					tdElement.classList.add(config.inner.selectors.sortDisabled);
				}
			}

			trHead.appendChild(tdElement);
		}

		// A scrollbr miatti helyhiány miatt van szükség beszúrni a végére
		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferHeaderCell);

		trHead.appendChild(tdElement);

		virtualThead.appendChild(trHead);
	});

	// Generate virtual filter row
	if (config.filter.enabled) {
		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.filterRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < columnsNumber; j++) {
			cellObj = configUtil.getKeyHeader(config)[j];
			cellData = cellElement.createHeaderData(config, tdElement, cellObj, {});

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.filterCell);

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (cellObj.filterDisabled) {
				tdElement.classList.add(config.inner.selectors.filterDisabled);
			}

			trHead.appendChild(tdElement);
		}

		// A scrollbr miatti helyhiány miatt van szükség beszúrni a végére
		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferHeaderCell);

		trHead.appendChild(tdElement);

		virtualThead.appendChild(trHead);
	}

	// Generate virtual body
	for (i = 0; i < rowsNumber; i++) {
		trBody = document.createElement('tr');
		trBody.classList.add(config.inner.selectors.dataRow);
		trBody.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < columnsNumber; j++) {
			cellObj = configUtil.getKeyHeader(config)[j];

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.dataCell);

			cellElement.createDataContainer(config, tdElement, cellObj);

			trBody.appendChild(tdElement);
		}

		virtualTbody.appendChild(trBody);
	}

	document.querySelector('.' + config.selectors.dataHeaderTable).appendChild(virtualThead);
	document.querySelector('.' + config.selectors.dataTable).appendChild(virtualTbody);

	// Generate fixed table

	if (config.fixedHeaders.length === 0 || config.fixedHeaders[0].length === 0) {
		document.querySelector('.' + config.selectors.fixedHeaderTable).remove();
		document.querySelector('.' + config.selectors.fixedHeaderContainer).remove();
		document.querySelector('.' + config.selectors.fixedTable).remove();
		document.querySelector('.' + config.selectors.fixedContainer).remove();

		return;
	}

	var fixedThead = document.createElement('thead'),
		fixedTbody = document.createElement('tbody');

	// Generate fixed header

	for (i = 0; i < config.fixedHeaders.length; i++) {
		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.headerRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[i].length; j++) {
			var isLastRow = j === config.fixedHeaders[i].length - 1;

			cellObj = config.fixedHeaders[i][j];
			cellData = cellElement.createHeaderData(config, tdElement, cellObj, isLastRow);

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.headerCell);

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (isLastRow) {
				tdElement.classList.add(config.inner.selectors.sortCell);

				if (!config.sort.enabled || config.fixedHeaders[i][j].sortDisabled) {
					tdElement.classList.add(config.inner.selectors.sortDisabled);
				}
			}

			trHead.appendChild(tdElement);
		}

		fixedThead.appendChild(trHead);
	}

	// Generate fixed filter row

	if (config.filter.enabled &&
		config.fixedHeaders.length > 0 &&
		config.fixedHeaders[config.inner.indexOfCellKeyHeader].length > 0) {

		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.filterRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[config.inner.indexOfCellKeyHeader].length; j++) {
			cellObj = configUtil.getFixedKeyHeader(config)[j];
			cellData = cellElement.createFilterData(config, tdElement, cellObj, {});

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.filterCell);
			tdElement.style.minWidth = config.dimensions.cellWidth + 'px';

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (cellObj.filterDisabled) {
				tdElement.classList.add(config.inner.selectors.filterDisabled);
			}

			trHead.appendChild(tdElement);
		}

		fixedThead.appendChild(trHead);
	}

	// Generate fixed body

	for (i = 0; i < rowsNumber; i++) {
		trBody = document.createElement('tr');
		trBody.classList.add(config.inner.selectors.dataRow);
		trBody.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[config.inner.indexOfCellKeyHeader].length; j++) {
			cellObj = configUtil.getFixedKeyHeader(config)[j];

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.dataCell);

			cellElement.createDataContainer(config, tdElement, cellObj);

			trBody.appendChild(tdElement);
		}

		fixedTbody.appendChild(trBody);
	}

	document.querySelector('.' + config.selectors.fixedHeaderTable).appendChild(fixedThead);
	document.querySelector('.' + config.selectors.fixedTable).appendChild(fixedTbody);
}

function getDefaultOptions() {
	return dataUtil.cloneObject(globalConfig.DEFAULTS);
}

module.exports = {
	generateTable: generateTable,
	destroyTable: destroyTable,
	getDefaultOptions: getDefaultOptions
};
},{"../configs/global":3,"../elements/cell":4,"../modules/events":18,"../modules/table":22,"../utils/configuration":30,"../utils/data":31}],21:[function(require,module,exports){
'use strict';

var tableModule = require('../modules/table'),
	configUtil  = require('../utils/configuration'),
	dataUtil    = require('../utils/data');

function sortByColumn(config, column) {
	var attribute = column.getAttribute('data-attribute'),
		headerObj = configUtil.getHeaderObject(config, attribute),
		direction = 'up';

	if (config.inner.sort.attribute === attribute &&
		config.inner.sort.direction === 'up') {

		direction = 'down';
	}

	config.inner.sort.direction = direction;
	config.inner.sort.attribute = attribute;
	config.inner.sort.dataType = headerObj.dataType;

	sort(config);
}

function sort(config, updateTable) {
	updateTable = updateTable !== false;

	config.dataSource.sort(function(a, b) {
		if (config.sort.customSort !== null) {
			return config.sort.customSort(a, b, {
				attribute: config.inner.sort.attribute,
				direction: config.inner.sort.direction,
				dataType: config.inner.sort.dataType,
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}

		var attribute = config.inner.sort.attribute || config.sort.default,
			direction = config.inner.sort.direction || 'down',
			dataType = config.inner.sort.dataType || getSortType(config, config.sort.default);

		return dataUtil.defaultComparator(a, b, {
			attribute: attribute,
			direction: direction,
			dataType: dataType,
			editedValues: config.inner.editedValues,
			uniqueRowKey: config.uniqueRowKey,
			name: config.locale.name
		});
	});

	if (updateTable) {
		tableModule.updateTable(config);
	}
}

function resetSort(config) {
	config.inner.sort.attribute =
	config.inner.sort.direction =
	config.inner.sort.dataType = undefined; // eslint-disable-line no-undefined

	config.dataSource.sort(function(a, b) {
		if (config.sort.customSort !== null) {
			return config.sort.customSort(a, b, {
				attribute: config.sort.default,
				direction: 'down',
				dataType: getSortType(config, config.sort.default),
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}

		return dataUtil.defaultComparator(a, b, {
			attribute: config.sort.default,
			direction: 'down',
			dataType: getSortType(config, config.sort.default),
			editedValues: config.inner.editedValues,
			uniqueRowKey: config.uniqueRowKey,
			name: config.locale.name
		});
	});

	tableModule.updateTable(config);
}

function getSortType(config, attribute) {
	var headerObj = configUtil.getHeaderObject(config, attribute);

	return typeof headerObj == 'undefined' || typeof headerObj.dataType == 'undefined' ? 'string' : headerObj.dataType;
}

module.exports = {
	sortByColumn: sortByColumn,
	sort: sort,
	resetSort: resetSort
};
},{"../modules/table":22,"../utils/configuration":30,"../utils/data":31}],22:[function(require,module,exports){
'use strict';

var tableUtil   = require('../utils/table'),
	configUtil  = require('../utils/configuration'),
	cellElement = require('../elements/cell');

function updateTable(config) {
	updateHeader(config);
	updateData(config);
}

function updateHeader(config) {
	var colspan = 1,
		dataHeaderRowList = document.querySelectorAll('.' + config.selectors.dataHeaderTable + ' tr.' + config.inner.selectors.headerRow),
		fixedHeaderRowList = document.querySelectorAll('.' + config.selectors.fixedHeaderTable + ' tr.' + config.inner.selectors.headerRow);

	// Header cell update
	dataHeaderRowList.forEach(function(row, rowCount) {
		row.querySelectorAll('td.' + config.inner.selectors.headerCell).forEach(function(cell, cellCount) {
			var cellObj = config.headers[rowCount][cellCount],
				isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

			if (colspan > 1) {
				cell.style.display = 'none';
				colspan--;
			} else {
				cellElement.updateDataContainer(config, cell, cellElement.createHeaderData(config, cell, cellObj, isLastRow));

				cell.style.display = 'table-cell';
			}

			if (typeof cellObj.colspan == 'undefined') {
				cell.removeAttribute('colspan');
			} else {
				cell.setAttribute('colspan', cellObj.colspan);

				colspan = cellObj.colspan;
			}
		});

		colspan = 1;
	});

	// Fixed header cell update
	fixedHeaderRowList.forEach(function(row, rowCount) {
		row.querySelectorAll('td.' + config.inner.selectors.headerCell).forEach(function(cell, cellCount) {
			var cellObj = config.fixedHeaders[rowCount][cellCount],
				isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

			cellElement.updateDataContainer(config, cell, cellElement.createHeaderData(config, cell, cellObj, isLastRow));
		});

		updateFixedHeight(config, dataHeaderRowList, row, rowCount);
	});

	// Filter row update
	if (config.filter.enabled) {
		document.querySelectorAll('.' + config.selectors.dataHeaderTable + ' td.' + config.inner.selectors.filterCell).forEach(function(cell, cellCount) {
			var cellObj = configUtil.getKeyHeader(config)[cellCount],
				filterObj = config.inner.filters[cellObj.key] || {},
				currentFilterAttr = cell.getAttribute('data-attribute');

			if (cellObj.key === currentFilterAttr) {
				return;
			}

			cell.setAttribute('data-attribute', cellObj.key);
			cell.classList.toggle(config.inner.selectors.filterDisabled, cellObj.filterDisabled);

			cellElement.updateDataContainer(config, cell, cellElement.createFilterData(config, cell, cellObj, filterObj));
		});

		document.querySelectorAll('.' + config.selectors.fixedHeaderTable + ' td.' + config.inner.selectors.filterCell).forEach(function(cell, cellCount) {
			var cellObj = config.fixedHeaders[config.inner.indexOfCellKeyHeader][cellCount],
				filterObj = config.inner.filters[cellObj.key] || {},
				currentFilterAttr = cell.getAttribute('data-attribute');

			if (cellObj.key === currentFilterAttr) {
				return;
			}

			cell.setAttribute('data-attribute', cellObj.key);
			cell.classList.toggle(config.inner.selectors.filterDisabled, cellObj.filterDisabled);

			cellElement.updateDataContainer(config, cell, cellElement.createFilterData(config, cell, cellObj, filterObj));
		});
	}

	updateContainerHeight(config);
}

function updateData(config) {
	var dataRowList = document.querySelectorAll('.' + config.selectors.dataTable + ' tr.' + config.inner.selectors.dataRow),
		fixedRowList = document.querySelectorAll('.' + config.selectors.fixedTable + ' tr.' + config.inner.selectors.dataRow);

	// Cell data row update
	dataRowList.forEach(function(row, rowNumber) {
		row.querySelectorAll('td.' + config.inner.selectors.dataCell).forEach(function(cell, cellNumber) {
			var cellData = tableUtil.getCellData(config, rowNumber, cellNumber);

			cellElement.updateCell(config, cell, cellData);
		});
	});

	// Fixed cell data row update
	fixedRowList.forEach(function(row, rowNumber) {
		row.querySelectorAll('td.' + config.inner.selectors.dataCell).forEach(function(cell, cellNumber) {
			var fixedCellData = tableUtil.getFixedCellData(config, rowNumber, cellNumber);

			cellElement.updateCell(config, cell, fixedCellData);
		});

		updateFixedHeight(config, dataRowList, row, rowNumber);
	});
}

function updateFixedHeight(config, dataRowList, fixedRow, rowNumber) {
	if (config.fixedHeaders.length === 0 || config.dimensions.lockCellHeight) {
		return;
	}

	var dataRow = dataRowList.length < rowNumber ? null : dataRowList[rowNumber];

	if (dataRow === null) {
		return; // It shouldn't be
	}

	var originalHeight = config.dimensions.cellHeight + 'px';

	if (dataRow.style.height !== originalHeight) {
		dataRow.style.height = originalHeight;
	}

	if (fixedRow.style.height !== originalHeight) {
		fixedRow.style.height = originalHeight;
	}

	var dataHeight = dataRow.clientHeight,
		fixedHeight = fixedRow.clientHeight;

	if (dataHeight === fixedHeight) {
		return; // No need for adjustment
	}

	if (dataHeight > fixedHeight) {
		fixedRow.style.height = dataHeight + 'px';
	} else {
		dataRow.style.height = fixedHeight + 'px';
	}
}

function updateContainerHeight(config) {
	var mainContainer = document.querySelector(config.selectors.mainContainer),
		headerContainer = document.querySelector('.' + config.selectors.dataHeaderContainer),
		dataContainer = document.querySelector('.' + config.selectors.dataContainer),
		fixedContainer = document.querySelector('.' + config.selectors.fixedContainer),
		windowHeight = window.innerHeight,
		containerTopPosition = mainContainer.getBoundingClientRect().top,
		headerRowsHeight = headerContainer.getBoundingClientRect().height,
		containerPaddingBottom = config.dimensions.containerPaddingBottom,
		containerHeight = windowHeight - containerTopPosition - headerRowsHeight - containerPaddingBottom;

	if (config.dimensions.containerHeight === containerHeight) {
		return;
	}

	config.dimensions.containerHeight = containerHeight;

	dataContainer.style.maxHeight = containerHeight + 'px';
	dataContainer.style.height = containerHeight + 'px';

	if (fixedContainer !== null) {
		fixedContainer.style.maxHeight = containerHeight + 'px';
		fixedContainer.style.height = containerHeight + 'px';
	}
}

function scrollTables(config) {
	var dataContainer = document.querySelector('.' + config.selectors.dataContainer),
		fixedContainer = document.querySelector('.' + config.selectors.fixedContainer),
		dataHeaderContainer = document.querySelector('.' + config.selectors.dataHeaderContainer);

	if (dataContainer === null) {
		return;
	}

	if (fixedContainer !== null) {
		fixedContainer.scrollTop = dataContainer.scrollTop;
	}

	if (dataHeaderContainer !== null) {
		dataHeaderContainer.scrollLeft = dataContainer.scrollLeft;
	}
}

function resetEditingCell(config, eventHandlers) {
	document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.selectors.editingCell).forEach(function(editingCell) {
		var input = editingCell.querySelector('input');

		input.removeEventListener('blur', eventHandlers.onInputBlurEventHandler);
		input.removeEventListener('keyup', eventHandlers.onInputKeyUpEventHandler);

		cellElement.updateDataContainer(config, editingCell, input.value);

		editingCell.classList.remove(config.selectors.editingCell);
	});
}

function resetEditedCells(config) {
	document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.selectors.editingCell).forEach(function(editedCell) {
		editedCell.classList.remove(config.selectors.editedCell);
	});
}

function destroyTable(config) {
	document.querySelector(config.selectors.mainContainer).innerHTML = '';
}

module.exports = {
	updateTable: updateTable,
	updateHeader: updateHeader,
	updateData: updateData,
	updateContainerHeight: updateContainerHeight,
	scrollTables: scrollTables,
	resetEditingCell: resetEditingCell,
	resetEditedCells: resetEditedCells,
	destroyTable: destroyTable
};
},{"../elements/cell":4,"../utils/configuration":30,"../utils/table":34}],23:[function(require,module,exports){
'use strict';

function show(config, options) {
	switch (options.type) {
		case 'info':
			showInfo(config, options);
			break;
		case 'warn':
			showWarn(config, options);
			break;
		case 'error':
			showError(config, options);
			break;
		default:
			config.modules.tooltip.show(options);
			break;
	}
}

function hide(config, element) {
	config.modules.tooltip.hide(element);
}

function hideAll(config) {
	config.modules.tooltip.hideAll();
}

function showInfo(config, options) {
	config.modules.tooltip.showInfo(options);
}

function showWarn(config, options) {
	config.modules.tooltip.showWarn(options);
}

function showError(config, options) {
	config.modules.tooltip.showError(options);
}

function onMouseEnterCellWithTitle(config, element) {
	var cellDataContainer = element === null ? null : element.querySelector('.' + config.inner.selectors.cellDataContainer);

	if (cellDataContainer === null || !element.classList.contains(config.inner.selectors.overflowedCell)) {
		return;
	}

	showInfo(config, {
		element: element,
		text: element.getAttribute('title')
	});
}

function onMouseLeaveCellWithTitle(config, element) {
	hide(config, element);
}

module.exports = {
	show: show,
	hide: hide,
	hideAll: hideAll,
	showInfo: showInfo,
	showWarn: showWarn,
	showError: showError,
	onMouseEnterCellWithTitle: onMouseEnterCellWithTitle,
	onMouseLeaveCellWithTitle: onMouseLeaveCellWithTitle
};
},{}],24:[function(require,module,exports){
'use strict';

var CUSTOM_VALIDATOR_ERROR_MSG = 'Custom validator error';

function validate(config, cellData) {
	if (!config.edit.validate) {
		return [];
	}

	var validationResult = [],
		customValidatorResult = cellData.customValidator === null ? null : cellData.customValidator(cellData);

	if (Array.isArray(customValidatorResult)) {
		validationResult = customValidatorResult;
	} else if (customValidatorResult === false) {
		validationResult.push(CUSTOM_VALIDATOR_ERROR_MSG);
	} else if (customValidatorResult !== null && customValidatorResult !== true) {
		validationResult.push(customValidatorResult);
	}

	return validationResult.concat(validateObject(cellData));
}

function validateObject(cellData) {
	var result = [],
		validatorObject = cellData.validatorObject;

	if (typeof validatorObject == 'undefined' || validatorObject === null) {
		return result;
	}

	Object.keys(validatorObject).forEach(function(key) {
		if (!checkValidationRules(cellData, key, validatorObject[key])) {
			var error = {};

			error[key] = validatorObject[key];

			result.push(error);
		}
	});

	return result;
}

function checkValidationRules(cellData, rule, referenceValue) {
	switch (rule) {
		case 'min':
			return cellData.getValue() >= referenceValue;
		case 'max':
			return cellData.getValue() <= referenceValue;
		default:
			return false;
	}
}

function showErrors(validationResult) {
	window.console.log(JSON.stringify(validationResult));
}

module.exports = {
	validate: validate,
	showErrors: showErrors
};
},{}],25:[function(require,module,exports){
'use strict';

if (typeof Array.prototype.find == 'undefined') {
	Array.prototype.find = function(predicate) { // eslint-disable-line no-extend-native
		if (this === null) {
			throw new TypeError('Array.prototype.find called on null or undefined');
		}

		if (typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}

		var list = Object(this);
		var length = list.length >>> 0;
		var thisArg = arguments[1];
		var value;

		for (var i = 0; i < length; i++) {
			value = list[i];
			if (predicate.call(thisArg, value, i, list)) {
				return value;
			}
		}

		return undefined; // eslint-disable-line no-undefined
	};
}
},{}],26:[function(require,module,exports){
'use strict';

if (!Element.prototype.matches) {
	Element.prototype.matches =
		Element.prototype.matchesSelector ||
		Element.prototype.mozMatchesSelector ||
		Element.prototype.msMatchesSelector ||
		Element.prototype.oMatchesSelector ||
		Element.prototype.webkitMatchesSelector ||
		function(s) {
			var matches = (this.document || this.ownerDocument).querySelectorAll(s),
				i = matches.length;

			while (--i >= 0 && matches.item(i) !== this) {} // eslint-disable-line
			return i > -1;
		};
}
},{}],27:[function(require,module,exports){
'use strict';

[ Element.prototype, CharacterData.prototype, DocumentType.prototype ].forEach(function(item) {
	if (item.hasOwnProperty('remove')) {
		return;
	}
	Object.defineProperty(item, 'remove', {
		configurable: true,
		enumerable: true,
		writable: true,
		value: function remove() {
			if (this.parentNode !== null) {
				this.parentNode.removeChild(this);
			}
		}
	});
});
},{}],28:[function(require,module,exports){
'use strict';

if (!NodeList.prototype.forEach) {
	NodeList.prototype.forEach = function(callback, argument) {
		argument = argument || window;

		for (var i = 0; i < this.length; i++) {
			callback.call(argument, this[i], i, this);
		}
	};
}
},{}],29:[function(require,module,exports){
'use strict';

if (typeof Object.assign != 'function') {
	// Must be writable: true, enumerable: false, configurable: true
	Object.defineProperty(Object, 'assign', {
		value: function assign(target) { // .length of function is 2
			if (target === null) { // TypeError if undefined or null
				throw new TypeError('Cannot convert undefined or null to object');
			}

			var to = Object(target);

			for (var index = 1; index < arguments.length; index++) {
				var nextSource = arguments[index];

				if (nextSource !== null) { // Skip over if undefined or null
					for (var nextKey in nextSource) {
						// Avoid bugs when hasOwnProperty is shadowed
						if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
							to[nextKey] = nextSource[nextKey];
						}
					}
				}
			}
			return to;
		},
		writable: true,
		configurable: true
	});
}
},{}],30:[function(require,module,exports){
'use strict';

function getDefaultContainerHeight(config) {
	return window.innerHeight - document.querySelector(config.selectors.mainContainer).getBoundingClientRect().top -
			(config.headers.length + (config.filter.enabled ? 1 : 0)) * config.dimensions.cellHeight - config.dimensions.containerPaddingBottom;
}

function getIndexOfCellKeyHeader(config) {
	return config.headers.length - 1;
}

function getSortDefault(config) {
	return config.uniqueRowKey;
}

// Firefox using MouseEvent.DOM_DELTA_LINE || MouseEvent.DOM_DELTA_PAGE instead of exact pixels, when measuring scroll delta values.
// This function will give the exact line height for the pixel conversion
function getScrollLineHeight() {
	var iframe = document.createElement('iframe');

	iframe.src = '#';
	document.body.appendChild(iframe);

	var iwin = iframe.contentWindow,
		idoc = iwin.document;

	idoc.open();
	idoc.write('<!DOCTYPE html><html><head></head><body><span>a</span></body></html>');
	idoc.close();

	var span = idoc.body.firstElementChild,
		r = span.offsetHeight;

	document.body.removeChild(iframe);

	return r;
}

// Firefox using MouseEvent.DOM_DELTA_LINE || MouseEvent.DOM_DELTA_PAGE instead of exact pixels, when measuring scroll delta values.
// This function will give the exact page height for the pixel conversion
function getScrollPageHeight() {
	return window.document.body.clientHeight;
}

function getCellFullWidth(config) {
	return config.dimensions.cellPaddingHorizontal * 2 + config.dimensions.cellWidth + config.dimensions.cellBorderWidth;
}

function getKeyHeader(config) {
	return config.headers[config.inner.indexOfCellKeyHeader];
}

function getFixedKeyHeader(config) {
	return config.fixedHeaders[config.inner.indexOfCellKeyHeader];
}

function getHeaderObject(config, attribute) {
	return getKeyHeader(config).find(function(column) {
		return column.key === attribute;
	}) || getFixedKeyHeader(config).find(function(column) {
		return column.key === attribute;
	});
}

function nil() {
	return function() {};
}

function wrapper(f) {
	return function() { return f; };
}

module.exports = {
	getDefaultContainerHeight: getDefaultContainerHeight,
	getIndexOfCellKeyHeader: getIndexOfCellKeyHeader,
	getSortDefault: getSortDefault,
	getScrollLineHeight: getScrollLineHeight,
	getScrollPageHeight: getScrollPageHeight,
	getCellFullWidth: getCellFullWidth,
	getKeyHeader: getKeyHeader,
	getFixedKeyHeader: getFixedKeyHeader,
	getHeaderObject: getHeaderObject,
	nil: nil,
	wrapper: wrapper
};
},{}],31:[function(require,module,exports){
'use strict';

var FILTER_TYPES = [ 'equals', 'equalsCaseInsensitive', 'like', 'likeCaseInsensitive', 'greaterThan', 'greaterOrEqual',
	'lessThan', 'lessOrEqual', 'between', 'betweenInclusive', 'contains' ];

function defaultComparator(a, b, options) {
	var attrA = getMergedValue(a, options.attribute, options.editedValues, options.uniqueRowKey),
		attrB = getMergedValue(b, options.attribute, options.editedValues, options.uniqueRowKey),
		isDown = options.direction === 'down';

	if (options.dataType === 'string') {
		var compareResult = 0;

		if (typeof attrA == 'undefined') {
			compareResult = -1;
		} else if (typeof attrB == 'undefined') {
			compareResult = 1;
		} else {
			attrA += '';
			attrB += '';

			compareResult = attrA.localeCompare(attrB, options.locale);
		}

		return isDown || compareResult === 0 ? compareResult : compareResult * -1;
	} else if (options.dataType === 'number') {
		attrA = parseFloat(attrA);
		attrB = parseFloat(attrB);

		if (isNaN(attrA)) {
			return isDown ? -1 : 1;
		}

		if (isNaN(attrB)) {
			return isDown ? 1 : -1;
		}
	}

	if (typeof attrA == 'undefined' && typeof attrB != 'undefined' || attrA < attrB) {
		return isDown ? -1 : 1;
	}

	if (typeof attrA != 'undefined' && typeof attrB == 'undefined' || attrA > attrB) {
		return isDown ? 1 : -1;
	}

	return 0;
}

function filterData(options) {
	if (FILTER_TYPES.indexOf(options.filterType) === -1) {
		window.console.error('Not a valid filter type! (' + options.filterType + ')');

		return options.dataSource;
	}

	switch (options.filterType) {
		case 'equals':
			return equalsFilter(options);
		case 'equalsCaseInsensitive':
			return equalsCaseInsensitiveFilter(options);
		case 'like':
			return likeFilter(options);
		case 'likeCaseInsensitive':
			return likeCaseInsensitiveFilter(options);
		case 'greaterThan':
			return greaterThanFilter(options);
		case 'greaterOrEqual':
			return greaterOrEqualFilter(options);
		case 'lessThan':
			return lessThanFilter(options);
		case 'lessOrEqual':
			return lessOrEqualFilter(options);
		case 'between':
			return betweenFilter(options);
		case 'betweenInclusive':
			return betweenInclusiveFilter(options);
		case 'contains':
			return containsFilter(options);
		default:
			return options.dataSource;
	}
}

function equalsFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) === options.valueOne;
	});
}

function equalsCaseInsensitiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).toUpperCase() === options.valueOne.toUpperCase();
	});
}

function likeFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).indexOf(options.valueOne) !== -1;
	});
}

function likeCaseInsensitiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).toUpperCase().indexOf(options.valueOne.toUpperCase()) !== -1;
	});
}

function greaterThanFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) > options.valueOne;
	});
}

function greaterOrEqualFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) >= options.valueOne;
	});
}

function lessThanFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) < options.valueOne;
	});
}

function lessOrEqualFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) <= options.valueOne;
	});
}

function betweenFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) > options.valueOne && obj[options.attribute] < options.valueTwo;
	});
}

function betweenInclusiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) >= options.valueOne && obj[options.attribute] <= options.valueTwo;
	});
}

function containsFilter(options) {
	return options.dataSource.filter(function(obj) {
		return options.valueOne.indexOf(getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey)) !== -1;
	});
}

function getValueByType(value, dataType) {
	if (typeof value == 'undefined') {
		return value;
	}

	switch (dataType) {
		case 'string':
			return value.toString();
		case 'number':
			return parseFloat(value);
		default:
			return value;
	}
}

function getMergedValue(row, attribute, editedValues, uniqueRowKey) {
	var editedRow = editedValues[row[uniqueRowKey]];

	return typeof editedRow == 'undefined' || typeof editedRow[attribute] == 'undefined' ? row[attribute] : editedRow[attribute];
}

function cloneObject(obj) {
	return JSON.parse(JSON.stringify(obj));
}

module.exports = {
	defaultComparator: defaultComparator,
	filterData: filterData,
	getValueByType: getValueByType,
	cloneObject: cloneObject
};
},{}],32:[function(require,module,exports){
'use strict';

function indexOfElement(element) {
	var collection = element.parentNode.childNodes;

	for (var i = 0; i < collection.length; i++) {
		if (collection[i] === element) {
			return i;
		}
	}

	return -1;
}

function findParentNode(child, selector) {
	if (child.parentNode === null) {
		return null;
	} else if (child.parentNode.matches(selector)) {
		return child.parentNode;
	}

	return findParentNode(child.parentNode, selector);
}

function getRowNumber(config, cellNode) {
	return indexOfElement(cellNode.parentNode);
}

function getColumnNumber(config, cellNode) {
	return indexOfElement(cellNode);
}

function isEllipsisActive(element) {
	return element.offsetWidth < element.scrollWidth;
}

function isOverflown(element) {
	return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}

module.exports = {
	indexOfElement: indexOfElement,
	findParentNode: findParentNode,
	getRowNumber: getRowNumber,
	getColumnNumber: getColumnNumber,
	isEllipsisActive: isEllipsisActive,
	isOverflown: isOverflown
};
},{}],33:[function(require,module,exports){
'use strict';

var KEY_CODES = {
	ENTER: 13,
	ESCAPE: 27
};

function getKeyCode(event) {
	return event.keyCode || event.which;
}

module.exports = {
	getKeyCode: getKeyCode,
	KEY_CODES: KEY_CODES
};
},{}],34:[function(require,module,exports){
'use strict';

var Cell       = require('../models/data/cell'),
	configUtil = require('../utils/configuration');

function getCellData(config, rowNumber, columnNumber) {
	var cellData = null,
		headerObj = configUtil.getKeyHeader(config)[columnNumber],
		uniqueRowKey = null;

	// If the index is higher than the available rows number
	if (rowNumber >= config.dataSource.length) {
		cellData = new Cell({
			key: headerObj.key,
			value: '',
			dataType: headerObj.dataType
		});
	} else {
		uniqueRowKey = config.dataSource[rowNumber][config.uniqueRowKey];
		cellData = new Cell({
			key: headerObj.key,
			value: config.dataSource[rowNumber][headerObj.key],
			dataType: headerObj.dataType,
			rowNumber: rowNumber,
			columnNumber: columnNumber,
			validatorObject: headerObj.validatorObject,
			customValidator: headerObj.customValidator
		});

		if (typeof config.inner.editedValues[uniqueRowKey] != 'undefined' &&
			typeof config.inner.editedValues[uniqueRowKey][headerObj.key] != 'undefined') {

			cellData.class = config.selectors.editedCell;
			cellData.updateValue(config.inner.editedValues[uniqueRowKey][headerObj.key]);
		}
	}

	return cellData;
}

function getFixedCellData(config, rowNumber, columnNumber) {
	var cellData = null,
		headerObj = configUtil.getFixedKeyHeader(config)[columnNumber];

	// If the index is higher than the available rows number
	if (rowNumber >= config.dataSource.length) {
		cellData = new Cell({
			key: headerObj.key,
			value: '',
			dataType: headerObj.dataType
		});
	} else {
		cellData = new Cell({
			key: headerObj.key,
			value: config.dataSource[rowNumber][headerObj.key],
			dataType: headerObj.dataType,
			rowNumber: rowNumber,
			columnNumber: columnNumber,
			validatorObject: headerObj.validatorObject,
			customValidator: headerObj.customValidator
		});
	}

	return cellData;
}

function mergeEditedValuesInRow(config, row) {
	var mergedRowData = {},
		uniqueRowKey = row[config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] == 'undefined') {
		return row;
	}

	Object.keys(row).forEach(function(key) {
		mergedRowData[key] = config.inner.editedValues[uniqueRowKey][key] || row[key];
	});

	return mergedRowData;
}

function mergeEditedValuesInDataSource(config, ds) {
	var mergedDs = [];

	ds.forEach(function(row) {
		mergedDs.push(mergeEditedValuesInRow(config, row));
	});

	return mergedDs;
}

function separateValuesInDataSource(config, mergedDs) {
	var separatedDs = [];

	mergedDs.forEach(function(mergedRow) {
		var originalRow = config.inner.originalDataSource.find(function(row) {
			return row[config.uniqueRowKey] === mergedRow[config.uniqueRowKey];
		});

		if (typeof originalRow != 'undefined') {
			separatedDs.push(originalRow);
		}
	});

	return separatedDs;
}

function storeUpdatedCellValue(config, cellData) {
	var uniqueRowKey = config.dataSource[cellData.rowNumber][config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] == 'undefined') {
		config.inner.editedValues[uniqueRowKey] = {};
	}

	config.inner.editedValues[uniqueRowKey][cellData.key] = cellData.editedValue;
}

function persistRowValues(config, row) {
	var uniqueRowKey = row[config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] != 'undefined') {
		Object.keys(config.inner.editedValues[uniqueRowKey]).forEach(function(key) {
			row[key] = config.inner.editedValues[uniqueRowKey][key];
		});

		config.inner.editedValues[uniqueRowKey] = {};
	}
}

function persistBatchValues(config) {
	config.dataSource.forEach(function(row) {
		persistRowValues(config, row);
	});
}

module.exports = {
	getCellData: getCellData,
	getFixedCellData: getFixedCellData,
	mergeEditedValuesInRow: mergeEditedValuesInRow,
	mergeEditedValuesInDataSource: mergeEditedValuesInDataSource,
	separateValuesInDataSource: separateValuesInDataSource,
	storeUpdatedCellValue: storeUpdatedCellValue,
	persistRowValues: persistRowValues,
	persistBatchValues: persistBatchValues
};
},{"../models/data/cell":8,"../utils/configuration":30}],35:[function(require,module,exports){
!function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.Class=e()}(this,function(){"use strict";function t(){}var e="constructor",o="extend";return t[o]=function(t){function n(){i[e].apply(this,arguments)}var i=Object.create(this.prototype);return t.call(i,this.prototype),n.prototype=i,n[o]=this[o],n},t});
},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
