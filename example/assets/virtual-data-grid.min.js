(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./pollyfills/Array.find.js');require('./pollyfills/Element.matches.js');require('./pollyfills/Element.remove.js');require('./pollyfills/NodeList.forEach.js');require('./pollyfills/Object.assign.js');

var VirtualDataGrid = require('./models/module/virtual-data-grid');

window.VirtualDataGrid = VirtualDataGrid;
},{"./models/module/virtual-data-grid":13,"./pollyfills/Array.find.js":23,"./pollyfills/Element.matches.js":24,"./pollyfills/Element.remove.js":25,"./pollyfills/NodeList.forEach.js":26,"./pollyfills/Object.assign.js":27}],2:[function(require,module,exports){
'use strict';

function invokeFn(name, param1, param2) {
	if (typeof window.tlite == 'undefined') {
		return;
	}

	window.tlite[name](param1, param2);
}

function show(options) {
	switch (options.type) {
		case 'info':
			showInfo(options);
			break;
		case 'warn':
			showWarn(options);
			break;
		case 'error':
			showError(options);
			break;
		default:
			showInfo(options);
			break;
	}
}

function hide(element) {
	invokeFn('hide', element);
}

function hideAll() {
	document.querySelectorAll('.tlite').forEach(function(el) {
		hide(el.parentNode);
	});
}

function showInfo(options) {
	var orientation = 's';

	if (options.element.matches('.header-cell')) {
		orientation = 'n';
	}

	invokeFn('show', options.element, { grav: orientation });
}

function showWarn(options) {
	invokeFn('show', options.element);
}

function showError(options) {
	invokeFn('show', options.element);
}

module.exports = {
	show: show,
	hide: hide,
	hideAll: hideAll,
	showInfo: showInfo,
	showWarn: showWarn,
	showError: showError
};
},{}],3:[function(require,module,exports){
'use strict';

function createDataContainer(config, cellNode, data) {
	var dataContainer = document.createElement('div'),
		maxHeight = config.dimensions.cellHeight - config.dimensions.cellBorderWidth - config.dimensions.cellPaddingVertical * 2;

	dataContainer.classList.add(config.inner.selectors.cellDataContainer);
	dataContainer.style.minWidth = config.dimensions.cellWidth + 'px';
	dataContainer.style.maxHeight = maxHeight + 'px';
	dataContainer.style.padding = config.dimensions.cellPaddingVertical + 'px ' + config.dimensions.cellPaddingHorizontal + 'px';

	cellNode.appendChild(dataContainer);

	if (typeof data != 'undefined') {
		updateDataContainer(config, cellNode, data);
	}

	return dataContainer;
}

function createHeaderData(config, cellNode, cellObj, isLastRow) {
	var innerHTML = '',
		columnText = cellObj.text || cellObj.key || '';

	if (config.sort.enabled && !cellObj.sortDisabled && isLastRow) {
		var attribute = cellObj.key,
			direction = typeof attribute != 'undefined' && config.inner.sort.attribute === attribute ? config.inner.sort.direction : 'none',
			isSorted = direction !== 'none',
			iconClass = direction === 'down' ? config.inner.icons.sort.asc : config.inner.icons.sort.desc,
			iconElementClass = config.inner.selectors.sortIcon + (isSorted ? ' ' + iconClass : ' hidden');

		innerHTML += '<i class="' + iconElementClass + '" aria-hidden="true"></i>';

		cellNode.setAttribute('data-attribute', attribute);
	}

	innerHTML += columnText;

	return innerHTML;
}

function createFilterData(config, cellNode, cellObj, filterObj) {
	var innerHTML = '',
		iconClass = config.inner.icons.filter.search,
		iconElementClass = config.inner.selectors.filterSearchIcon + ' ' + iconClass,
		clearIconClass = config.inner.icons.filter.clear,
		clearIconElementClass = config.inner.selectors.filterClearIcon + ' ' + clearIconClass;

	if (!cellObj.filterDisabled) {
		innerHTML += '<i class="' + iconElementClass + '" aria-hidden="true"></i>';
		innerHTML += filterObj.value || '';

		if (typeof filterObj.value != 'undefined' && filterObj.value !== '') {
			innerHTML += '<i class="' + clearIconElementClass + '" aria-hidden="true"></i>';
		}
	}

	return innerHTML;
}

function updateDataContainer(config, cellNode, data) {
	var dataContainer = cellNode.querySelector('.' + config.inner.selectors.cellDataContainer);

	if (typeof data == 'undefined' || data === null) {
		dataContainer.innerHTML = '';
		cellNode.title = '';
	} else if (data.nodeType) { // If its an Element object
		dataContainer.innerHTML = '';
		dataContainer.appendChild(data);
		cellNode.title = data.textContent;
	} else { // else just add to the containers innerHTML
		dataContainer.innerHTML = data;
		cellNode.title = dataContainer.textContent;
	}
}

function updateCell(config, cellNode, cellData) {
	updateDataContainer(config, cellNode, cellData.getValue());

	cellNode.className = config.inner.selectors.dataCell + ' ' + (cellData.class || '');
}

module.exports = {
	createDataContainer: createDataContainer,
	createHeaderData: createHeaderData,
	createFilterData: createFilterData,
	updateDataContainer: updateDataContainer,
	updateCell: updateCell
};
},{}],4:[function(require,module,exports){
'use strict';

var Class = require('class-256.js');

module.exports = Class.extend(function() {
	var self = this;

	self.constructor = function(attributes, params) {
		if (typeof attributes == 'undefined') {
			return;
		}

		attributes.forEach(function(attr) {
			self[attr] = typeof params == 'undefined' || typeof params[attr] == 'undefined' ? null : params[attr];
		});
	};

	this.updateAttributes = function(attrs) {
		Object.keys(attrs).forEach(function(k) {
			if (typeof attrs[k] != 'undefined' && typeof self[k] != 'undefined') {
				self[k] = attrs[k];
			}
		});
	};
});
},{"class-256.js":33}],5:[function(require,module,exports){
'use strict';

function CellObject(p) {
	var self = this;

	initAttr('key');
	initAttr('value');
	initAttr('dataType');
	initAttr('editedValue');
	initAttr('class');
	initAttr('rowNumber');
	initAttr('columnNumber');

	function initAttr(name) {
		self[name] = typeof p == 'undefined' || typeof p[name] == 'undefined' ? null : p[name];
	}

	this.updateAttributes = function(attrs) {
		Object.keys(attrs).forEach(function(k) {
			if (typeof attrs[k] != 'undefined' && typeof self[k] != 'undefined') {
				self[k] = attrs[k];
			}
		});
	};

	this.getValue = function() {
		return self.cellChanged ? self.editedValue : self.value;
	};

	this.updateValue = function(value) {
		if (self.dataType === 'number') {
			value = isNaN(parseFloat(value)) ? 0 : parseFloat(value);
		}

		if (self.value === value || self.value === null && typeof value == 'undefined') {
			self.editedValue = null;
			self.cellChanged = false;
		} else {
			self.editedValue = value;
			self.cellChanged = true;
		}
	};

	this.discardChangedValue = function() {
		self.editedValue = null;
	};

	this.isCellChanged = function() {
		return self.cellChanged;
	};
}

module.exports = CellObject;
},{}],6:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":4}],7:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'savedRows'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":4}],8:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":4}],9:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'editedRows',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":4}],10:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"../base":4,"dup":9}],11:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'editedRow',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":4}],12:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"../base":4,"dup":8}],13:[function(require,module,exports){
'use strict';

var generator = require('../../modules/generator');

var uniqueIdSequence = 1;

function VirtualDataGrid() {
	var self = this;

	self.configuration = {};
	self.uniqueId = uniqueIdSequence++;
	self.DEFAULT_OPTIONS = generator.getDefaultOptions();
	self.generateTable = function(options) {
		options.uniqueId = self.uniqueId;

		generator.generateTable(self.configuration, options);
	};
	self.destroyTable = function() {
		generator.destroyTable(self.configuration);
	};
	self.getId = function() {
		return self.uniqueId;
	};
}

module.exports = VirtualDataGrid;
},{"../../modules/generator":19}],14:[function(require,module,exports){
'use strict';

var configUtil     = require('../utils/configuration'),
	dataUtil       = require('../utils/data'),
	tooltipDefault = require('../defaults/tooltip');

var DEFAULTS = {
	selectors: {
		mainContainer: '.data-container',
		fixedContainer: 'fixed-container',
		fixedTable: 'fixed-table',
		virtualContainer: 'virtual-container',
		virtualTable: 'virtual-table',
		editingCell: 'editing-cell',
		editedCell: 'edited-cell',
		saveButton: null
	},
	dimensions: {
		cellWidth: 150,
		cellHeight: 50,
		cellPaddingVertical: 4,
		cellPaddingHorizontal: 8,
		cellBorderWidth: 1,
		containerHeight: configUtil.getDefaultContainerHeight
	},
	edit: {
		enabled: false,
		mode: 'batch'
	},
	filter: {
		enabled: false,
		customFilter: null
	},
	sort: {
		enabled: false,
		default: configUtil.getSortDefault,
		customSort: null
	},
	eventHandlers: {
		onBeforeEdit: configUtil.nil,
		onValidation: configUtil.nil,
		onAfterEdit: configUtil.nil,
		onBeforeSave: configUtil.nil,
		onSaveRow: configUtil.nil,
		onSaveBatch: configUtil.nil,
		onAfterSave: configUtil.nil
	},
	locale: {
		name: 'en'
	},
	dataSource: [ ],
	headers: [ [ ] ],
	fixedHeaders: [ [ ] ],
	uniqueRowKey: '__uniqueRowKey',
	autoResize: true,
	debug: false,
	uniqueId: 0,
	modules: {
		tooltip: {
			enabled: true,
			show: configUtil.wrapper(tooltipDefault.show),
			hide: configUtil.wrapper(tooltipDefault.hide),
			hideAll: configUtil.wrapper(tooltipDefault.hideAll),
			showInfo: configUtil.wrapper(tooltipDefault.showInfo),
			showWarn: configUtil.wrapper(tooltipDefault.showWarn),
			showError: configUtil.wrapper(tooltipDefault.showError)
		}
	},
	inner: {}
};

var HEADER_DEFAULTS = {
	dataType: 'text',
	filterType: 'equals',
	filterDisabled: false,
	sortDisabled: false
};

var STATIC_INNER_ATTRS = {
	selectors: {
		uniqueIdPrefix: 'virtual-data-grid-',
		bufferRowTop: 'buffer-row-top',
		bufferRowBottom: 'buffer-row-bottom',
		bufferColumnLeft: 'buffer-column-left',
		bufferColumnRight: 'buffer-column-right',
		headerRow: 'header-row',
		headerCell: 'header-cell',
		sortCell: 'sort-cell',
		sortIcon: 'sort-icon',
		sortDisabled: 'sort-disabled',
		filterRow: 'filter-row',
		filterCell: 'filter-cell',
		filterDisabled: 'filter-disabled',
		filterContainer: 'filter-container',
		filterSearchIcon: 'filter-search-icon',
		filterClearIcon: 'filter-clear-icon',
		dataRow: 'data-row',
		dataCell: 'data-cell',
		cellDataContainer: 'cell-data-container'
	},
	dimensions: {},
	icons: {
		sort: {
			asc: 'fa fa-arrow-down',
			desc: 'fa fa-arrow-up'
		},
		filter: {
			search: 'fa fa-search',
			clear: 'fa fa-times'
		}
	},
	editedValues: {},
	sort: { },
	filters: { },
	minBufferWidth: 2,
	minBufferHeight: 18, // Azért van rá szükség, mert ha nincs megadva, akkor ugrik egyett a scroll ha a végére vagy az elejére értünk a táblázatban
	leftCellOffset: 0,
	topCellOffset: 0
};

function init(config, options) {
	initConfigObject(config);

	updateValue(config, options, 'selectors.mainContainer');
	updateValue(config, options, 'selectors.fixedContainer');
	updateValue(config, options, 'selectors.fixedTable');
	updateValue(config, options, 'selectors.virtualContainer');
	updateValue(config, options, 'selectors.virtualTable');
	updateValue(config, options, 'selectors.editingCell');
	updateValue(config, options, 'selectors.editedCell');
	updateValue(config, options, 'selectors.saveButton');
	updateValue(config, options, 'dimensions.cellWidth');
	updateValue(config, options, 'dimensions.cellHeight');
	updateValue(config, options, 'dimensions.cellPaddingVertical');
	updateValue(config, options, 'dimensions.cellPaddingHorizontal');
	updateValue(config, options, 'dimensions.cellBorderWidth');
	updateValue(config, options, 'uniqueId');

	calculateUniqueIdSelector(config);
	calculateVirtualContainerHeight(config, options);

	updateValue(config, options, 'locale.name');
	updateValue(config, options, 'dataSource');
	updateValue(config, options, 'headers');
	updateValue(config, options, 'fixedHeaders');
	updateValue(config, options, 'uniqueRowKey');
	updateValue(config, options, 'autoResize');
	updateValue(config, options, 'edit.enabled');
	updateValue(config, options, 'edit.mode');
	updateValue(config, options, 'filter.enabled');
	updateValue(config, options, 'filter.customFilter');
	updateValue(config, options, 'sort.enabled');
	updateValue(config, options, 'sort.default');
	updateValue(config, options, 'sort.customSort');
	updateValue(config, options, 'debug');
	updateValue(config, options, 'eventHandlers.onBeforeEdit');
	updateValue(config, options, 'eventHandlers.onValidation');
	updateValue(config, options, 'eventHandlers.onAfterEdit');
	updateValue(config, options, 'eventHandlers.onBeforeSave');
	updateValue(config, options, 'eventHandlers.onSaveRow');
	updateValue(config, options, 'eventHandlers.onSaveBatch');
	updateValue(config, options, 'eventHandlers.onAfterSave');

	// Tooltip module
	updateValue(config, options, 'modules.tooltip.enabled');
	updateValue(config, options, 'modules.tooltip.show');
	updateValue(config, options, 'modules.tooltip.hide');
	updateValue(config, options, 'modules.tooltip.hideAll');
	updateValue(config, options, 'modules.tooltip.showInfo');
	updateValue(config, options, 'modules.tooltip.showWarn');
	updateValue(config, options, 'modules.tooltip.showError');

	initHeaderData(config);
	initDataSource(config, options.uniqueRowKey);
}

function initConfigObject(config) {
	config.selectors = {};
	config.eventHandlers = {};
	config.locale = {};
	config.inner = dataUtil.cloneObject(STATIC_INNER_ATTRS);
}

function calculateUniqueIdSelector(config) {
	config.inner.selectors.uniqueId = config.inner.selectors.uniqueIdPrefix + config.uniqueId;
}

function calculateVirtualContainerHeight(config, options) {
	var containerHeight = getInnerValue(options, 'dimensions.containerHeight');

	if (typeof containerHeight == 'undefined') {
		containerHeight = configUtil.getDefaultContainerHeight(config);
	}

	config.dimensions.containerHeight = configUtil.calculateVirtualContainerHeight(config, containerHeight);
}

function initCalculatedValues(config) {
	// Annak a header sornak az indexe, ami a cella kulcsokat is meghatározza. Mivel ez mindig az utolsó lesz, ezért TODO: Kiszedni/átalakítani
	config.inner.indexOfCellKeyHeader = configUtil.getIndexOfCellKeyHeader(config);
	config.inner.colspanOffset = configUtil.getMaxColspan(config);
	config.inner.visibleRowNumber = configUtil.getVisibleRowNumber(config);
	config.inner.visibleColumnNumber = configUtil.getVisibleColumnNumber(config);
	config.inner.tableOffsetWidth = configUtil.getTableOffsetWidth(config);
	config.inner.tableOffsetHeight = configUtil.getTableOffsetHeight(config);
	config.inner.originalDataSource = [].concat(config.dataSource);
	config.inner.dimensions.scrollLineHeight = configUtil.getScrollLineHeight();
	config.inner.dimensions.scrollPageHeight = configUtil.getScrollPageHeight();
}

function initHeaderData(config) {
	var processedHeaders = [],
		processedFixedHeaders = [];

	config.headers.forEach(function(headerRow) {
		var hRow = [];

		headerRow.forEach(function(headerCell) {
			if (typeof headerCell.dataType == 'undefined') {
				headerCell.dataType = HEADER_DEFAULTS.dataType;
			}

			if (typeof headerCell.filterType == 'undefined') {
				headerCell.filterType = HEADER_DEFAULTS.filterType;
			}

			if (typeof headerCell.filterDisabled == 'undefined') {
				headerCell.filterDisabled = HEADER_DEFAULTS.filterDisabled;
			}

			if (typeof headerCell.sortDisabled == 'undefined') {
				headerCell.sortDisabled = HEADER_DEFAULTS.sortDisabled;
			}

			hRow.push(headerCell);

			if (typeof headerCell.colspan != 'undefined') {
				for (var i = 1; i < headerCell.colspan; i++) {
					hRow.push({});
				}
			}
		});

		processedHeaders.push(hRow);
	});

	config.fixedHeaders.forEach(function(headerRow) {
		var hRow = [];

		headerRow.forEach(function(headerCell) {
			if (typeof headerCell.dataType == 'undefined') {
				headerCell.dataType = HEADER_DEFAULTS.dataType;
			}

			if (typeof headerCell.filterType == 'undefined') {
				headerCell.filterType = HEADER_DEFAULTS.filterType;
			}

			if (typeof headerCell.filterDisabled == 'undefined') {
				headerCell.filterDisabled = HEADER_DEFAULTS.filterDisabled;
			}

			if (typeof headerCell.sortDisabled == 'undefined') {
				headerCell.sortDisabled = HEADER_DEFAULTS.sortDisabled;
			}

			hRow.push(headerCell);

			if (typeof headerCell.colspan != 'undefined') {
				for (var i = 1; i < headerCell.colspan; i++) {
					hRow.push({});
				}
			}
		});

		processedFixedHeaders.push(hRow);
	});

	config.headers = processedHeaders;
	config.fixedHeaders = processedFixedHeaders;
}

function initDataSource(config, uniqueRowKey) {
	if (typeof uniqueRowKey == 'undefined') {
		for (var i = 0; i < config.dataSource.length; i++) {
			config.dataSource[i][config.uniqueRowKey] = i;
		}
	}
}

function updateValue(config, options, key) {
	var target = getInnerObject(config, key), // eslint-disable-line no-unused-vars
		value = getInnerValue(options, key),
		keys = key.split('.'),
		lastKey = keys[keys.length - 1];

	if (typeof value == 'undefined') {
		target[lastKey] = typeof getInnerValue(DEFAULTS, key) == 'function' ? getInnerValue(DEFAULTS, key)(config) : getInnerValue(DEFAULTS, key);
	} else {
		target[lastKey] = value;
	}
}

function getInnerObject(object, key) {
	if (key.indexOf('.') === -1) {
		return object;
	}

	var subKey = key.split('.')[0],
		subObject = object[subKey];

	if (typeof subObject == 'undefined') {
		object[subKey] = {};
		subObject = object[subKey];
	}

	return getInnerObject(subObject, key.substring(key.indexOf('.') + 1));
}

function getInnerValue(object, key) {
	if (key.indexOf('.') === -1) {
		return object[key];
	}

	var subKey = key.split('.')[0],
		subObject = object[subKey];

	if (typeof subObject == 'undefined') {
		return subObject;
	}

	return getInnerValue(subObject, key.substring(key.indexOf('.') + 1));
}

module.exports = {
	init: init,
	initCalculatedValues: initCalculatedValues,
	DEFAULTS: DEFAULTS
};
},{"../defaults/tooltip":2,"../utils/configuration":28,"../utils/data":29}],15:[function(require,module,exports){
'use strict';

var tableUtil   = require('../utils/table'),
	configUtil  = require('../utils/configuration'),
	cellElement = require('../elements/cell');

function updateTable(config, forceUpdate) {
	var colspan = 1;

	if (config.inner.previousLeftCellOffset === config.inner.leftCellOffset &&
		config.inner.previousTopCellOffset === config.inner.topCellOffset &&
		forceUpdate === false) {

		return;
	}

	config.inner.previousLeftCellOffset = config.inner.leftCellOffset;
	config.inner.previousTopCellOffset = config.inner.topCellOffset;

	// Header cell update
	document.querySelectorAll('.' + config.selectors.virtualTable + ' tr.' + config.inner.selectors.headerRow).forEach(function(row, rowCount) {
		row.querySelectorAll('td.' + config.inner.selectors.headerCell).forEach(function(cell, cellCount) {
			var cellObj = config.headers[rowCount][config.inner.leftCellOffset + cellCount],
				isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

			if (colspan > 1) {
				cell.style.display = 'none';
				colspan--;
			} else {
				cellElement.updateDataContainer(config, cell, cellElement.createHeaderData(config, cell, cellObj, isLastRow));

				cell.style.display = 'table-cell';
			}

			if (typeof cellObj.colspan == 'undefined') {
				cell.removeAttribute('colspan');
			} else {
				var calculatedColspan = config.inner.visibleColumnNumber <= cellCount + cellObj.colspan ? config.inner.visibleColumnNumber - cellCount : cellObj.colspan;

				cell.setAttribute('colspan', calculatedColspan);
				colspan = calculatedColspan;
			}
		});
		colspan = 1;
	});

	// Fixed header cell update
	document.querySelectorAll('.' + config.selectors.fixedTable + ' tr.' + config.inner.selectors.headerRow).forEach(function(row, rowCount) {
		row.querySelectorAll('td.' + config.inner.selectors.headerCell).forEach(function(cell, cellCount) {
			var cellObj = config.fixedHeaders[rowCount][cellCount],
				isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

			cellElement.updateDataContainer(config, cell, cellElement.createHeaderData(config, cell, cellObj, isLastRow));
		});
	});

	// Filter row update
	if (config.filter.enabled) {
		document.querySelectorAll('.' + config.selectors.virtualTable + ' td.' + config.inner.selectors.filterCell).forEach(function(cell, cellCount) {
			var cellObj = configUtil.getKeyHeader(config)[config.inner.leftCellOffset + cellCount],
				filterObj = config.inner.filters[cellObj.key] || {},
				currentFilterAttr = cell.getAttribute('data-attribute');

			if (cellObj.key === currentFilterAttr) {
				return;
			}

			cell.setAttribute('data-attribute', cellObj.key);
			cell.classList.toggle(config.inner.selectors.filterDisabled, cellObj.filterDisabled);

			cellElement.updateDataContainer(config, cell, cellElement.createFilterData(config, cell, cellObj, filterObj));
		});

		document.querySelectorAll('.' + config.selectors.fixedTable + ' td.' + config.inner.selectors.filterCell).forEach(function(cell, cellCount) {
			var cellObj = config.fixedHeaders[config.inner.indexOfCellKeyHeader][cellCount],
				filterObj = config.inner.filters[cellObj.key] || {},
				currentFilterAttr = cell.getAttribute('data-attribute');

			if (cellObj.key === currentFilterAttr) {
				return;
			}

			cell.setAttribute('data-attribute', cellObj.key);
			cell.classList.toggle(config.inner.selectors.filterDisabled, cellObj.filterDisabled);

			cellElement.updateDataContainer(config, cell, cellElement.createFilterData(config, cell, cellObj, filterObj));
		});
	}

	// Cell data row update
	document.querySelectorAll('.' + config.selectors.virtualTable + ' tr.' + config.inner.selectors.dataRow).forEach(function(row, rowNumber) {
		row.querySelectorAll('td.' + config.inner.selectors.dataCell).forEach(function(cell, cellNumber) {
			var cellData = tableUtil.getCellData(config, config.inner.topCellOffset + rowNumber, config.inner.leftCellOffset + cellNumber);

			cellElement.updateCell(config, cell, cellData);
		});
	});

	// Fixed cell data row update
	document.querySelectorAll('.' + config.selectors.fixedTable + ' tr.' + config.inner.selectors.dataRow).forEach(function(row, rowNumber) {
		row.querySelectorAll('td.' + config.inner.selectors.dataCell).forEach(function(cell, cellNumber) {
			var fixedCellData = tableUtil.getFixedCellData(config, config.inner.topCellOffset + rowNumber, cellNumber);

			cellElement.updateCell(config, cell, fixedCellData);
		});
	});
}

function updateBuffers(config) {
	var virtualContainer = document.querySelector('.' + config.selectors.virtualContainer),
		cellFullWidth = configUtil.getCellFullWidth(config),
		left = virtualContainer.scrollLeft - virtualContainer.scrollLeft % cellFullWidth - config.inner.colspanOffset * cellFullWidth,
		right = config.inner.tableOffsetWidth - left,
		top = virtualContainer.scrollTop,
		bottom = config.inner.tableOffsetHeight - top;

	left = left > config.inner.tableOffsetWidth ? config.inner.tableOffsetWidth : left;
	left = left < config.inner.minBufferWidth ? config.inner.minBufferWidth : left;
	right = config.inner.tableOffsetWidth - left;
	top = top + config.inner.minBufferHeight > config.inner.tableOffsetHeight ? config.inner.tableOffsetHeight - config.inner.minBufferHeight : top + config.inner.minBufferHeight;
	bottom = config.inner.tableOffsetHeight > top ? config.inner.tableOffsetHeight - top : config.inner.minBufferHeight;

	config.inner.leftCellOffset = Math.floor(left / cellFullWidth);
	config.inner.topCellOffset = Math.floor((top - top % config.dimensions.cellHeight) / config.dimensions.cellHeight);

	config.inner.bufferLeft.forEach(function(el) {
		el.style.minWidth = left + 'px';
	});
	config.inner.bufferRight.forEach(function(el) {
		el.style.minWidth = right + 'px';
	});
	config.inner.bufferTop.forEach(function(el) {
		el.style.height = top + 'px';
	});
	config.inner.bufferBottom.forEach(function(el) {
		el.style.height = bottom + 'px';
	});
}

function recalculateDimensions(config) {
	var smallerTable = config.dataSource.length < config.inner.visibleRowNumber,
		virtualContainer = document.querySelector('.' + config.selectors.virtualContainer);

	virtualContainer.classList.toggle('no-vertical-scroll', smallerTable);

	if (smallerTable) {
		virtualContainer.scrollTop = 0;
	}

	config.inner.tableOffsetWidth = configUtil.getTableOffsetWidth(config);
	config.inner.tableOffsetHeight = configUtil.getTableOffsetHeight(config);
}

function resetEditingCell(config, eventHandlers) {
	document.querySelectorAll('.' + config.selectors.virtualTable + ' td.' + config.selectors.editingCell).forEach(function(editingCell) {
		var input = editingCell.querySelector('input');

		input.removeEventListener('blur', eventHandlers.onInputBlurEventHandler);
		input.removeEventListener('keyup', eventHandlers.onInputKeyUpEventHandler);

		cellElement.updateDataContainer(config, editingCell, input.value);

		editingCell.classList.remove(config.selectors.editingCell);
	});
}

function resetEditedCells(config) {
	document.querySelectorAll('.' + config.selectors.virtualTable + ' td.' + config.selectors.editingCell).forEach(function(editedCell) {
		editedCell.classList.remove(config.selectors.editedCell);
	});

	updateTable(config);
}

function destroyTable(config) {
	document.querySelector(config.selectors.mainContainer).innerHTML = '';
}

module.exports = {
	updateTable: updateTable,
	updateBuffers: updateBuffers,
	recalculateDimensions: recalculateDimensions,
	resetEditingCell: resetEditingCell,
	resetEditedCells: resetEditedCells,
	destroyTable: destroyTable
};
},{"../elements/cell":3,"../utils/configuration":28,"../utils/table":32}],16:[function(require,module,exports){
'use strict';

var BeforeEditArgs = require('../models/event-arguments/before-edit'),
	BeforeSaveArgs = require('../models/event-arguments/before-save'),
	ValidationArgs = require('../models/event-arguments/validation'),
	SaveRowArgs    = require('../models/event-arguments/save-row'),
	SaveBatchArgs  = require('../models/event-arguments/save-batch'),
	AfterEditArgs  = require('../models/event-arguments/after-edit'),
	AfterSaveArgs  = require('../models/event-arguments/after-save'),
	cellElement    = require('../elements/cell'),
	tableUtil      = require('../utils/table'),
	domUtil        = require('../utils/dom'),
	domModule      = require('../modules/dom'),
	filterModule   = require('../modules/filter');

function startEditingCell(config, cellNode, instances, eventHandlers) {
	if (!config.edit.enabled) {
		return;
	}

	var rowNumber = domUtil.getRowNumber(config, cellNode),
		columnNumber = domUtil.getColumnNumber(config, cellNode);

	if (rowNumber >= config.dataSource.length) {
		return;
	}

	var cellData = tableUtil.getCellData(config, rowNumber, columnNumber),
		inputElement = document.createElement('input');

	var beforeEditArgs = new BeforeEditArgs({
		cellNode: cellNode,
		cellData: cellData,
		cancelEvent: false
	});

	config.eventHandlers.onBeforeEdit(beforeEditArgs);

	if (!beforeEditArgs.cancelEvent) {
		cellNode.classList.add(config.selectors.editingCell);
		cellNode.classList.remove(config.selectors.editedCell);

		cellElement.updateDataContainer(config, cellNode, inputElement);

		instances.onInputBlurEventHandler = function(ev) { eventHandlers.onInputBlurEventHandler(ev, config); };
		instances.onInputKeyUpEventHandler = function(ev) { eventHandlers.onInputKeyUpEventHandler(ev, config); };

		inputElement.focus();
		inputElement.value = cellData.getValue();
		inputElement.style.minWidth = '10px'; // TODO: Kiszervezni osztályba
		inputElement.style.width = '80%'; // TODO: Kiszervezni osztályba
		inputElement.setAttribute('type', cellData.dataType);
		inputElement.addEventListener('blur', instances.onInputBlurEventHandler);
		inputElement.addEventListener('keyup', instances.onInputKeyUpEventHandler);
	}
}

function finishEditingCell(config, inputElement, eventHandlers) {
	var cellNode = inputElement.parentNode.parentNode,
		rowNumber = domUtil.getRowNumber(config, cellNode),
		columnNumber = domUtil.getColumnNumber(config, cellNode),
		cellData = tableUtil.getCellData(config, rowNumber, columnNumber),
		updatedValue = inputElement.value;

	cellData.updateAttributes({ class: config.selectors.editedCell });
	cellData.updateValue(updatedValue);

	if (!cellData.isCellChanged()) {
		domModule.resetEditingCell(config, eventHandlers);

		return;
	}

	var validationArgs = new ValidationArgs({
		cellNode: cellNode,
		cellData: cellData,
		cancelEvent: false
	});

	config.eventHandlers.onValidation(validationArgs);

	if (validationArgs.cancelEdit !== true) {
		tableUtil.storeUpdatedCellValue(config, cellData);
		cellElement.updateCell(config, cellNode, cellData);

		var afterEditArgs = new AfterEditArgs({
			cellNode: cellNode,
			cellData: cellData
		});

		config.eventHandlers.onAfterEdit(afterEditArgs);

		filterModule.filter(config);
	}
}

function cancelEditingCell(config) {
	return '';
}

function saveCells(config) {
	if (!config.edit.enabled) {
		return;
	}

	var beforeSaveArgs = new BeforeSaveArgs({
		editedRows: config.inner.editedValues,
		cancelEvent: false
	});

	config.eventHandlers.onBeforeSave(beforeSaveArgs);

	if (beforeSaveArgs.cancelEvent) {
		return;
	}

	if (config.edit.mode === 'row') { // Row mode
		var saveRowArgs = new SaveRowArgs({ cancelEvent: false });

		config.dataSource.forEach(function(row) {
			saveRowArgs = new SaveRowArgs({
				editedRow: config.inner.editedValues,
				cancelEvent: false
			});

			if (!saveRowArgs.cancelEvent) {
				config.eventHandlers.onSavingRow(saveRowArgs);
			}

			if (!saveRowArgs.cancelEvent) {
				tableUtil.persistRowValues(config, row);
			}
		});

		if (!saveRowArgs.cancelEvent) {
			return;
		}
	} else if (config.edit.mode === 'batch') { // Batch mode
		var saveBatchArgs = new SaveBatchArgs({
			editedRows: config.inner.editedValues,
			cancelEvent: false
		});

		config.eventHandlers.onSavingBatch(saveBatchArgs);

		if (saveBatchArgs.cancelEvent) {
			return;
		}

		tableUtil.persistBatchValues(config);
	}

	var afterSaveArgs = new AfterSaveArgs({
		savedRows: config.inner.editedValues
	});

	domModule.resetEditedCells(config);

	config.eventHandlers.onAfterSave(afterSaveArgs);
}

module.exports = {
	startEditingCell: startEditingCell,
	finishEditingCell: finishEditingCell,
	cancelEditingCell: cancelEditingCell,
	saveCells: saveCells
};
},{"../elements/cell":3,"../models/event-arguments/after-edit":6,"../models/event-arguments/after-save":7,"../models/event-arguments/before-edit":8,"../models/event-arguments/before-save":9,"../models/event-arguments/save-batch":10,"../models/event-arguments/save-row":11,"../models/event-arguments/validation":12,"../modules/dom":15,"../modules/filter":18,"../utils/dom":30,"../utils/table":32}],17:[function(require,module,exports){
'use strict';

var domUtil       = require('../utils/dom'),
	keyboardUtil  = require('../utils/keyboard'),
	sortModule    = require('../modules/sort'),
	editModule    = require('../modules/edit'),
	domModule     = require('../modules/dom'),
	filterModule  = require('../modules/filter'),
	resizeModule  = require('../modules/resize'),
	tooltipModule = require('../modules/tooltip');

var container;

var instances = {
	onScrollEventHandler: function() {},
	onWheelEventHandler: function() {},
	onInputBlurEventHandler: function() {},
	onClickCellEventHandler: function() {},
	onClickSaveButtonEventHandler: function() {},
	onClickSortHeader: function() {},
	onClickFilterHeader: function() {},
	onWindowResize: function() {},
	onMouseEnterCellWithTitle: function() {},
	onMouseLeaveCellWithTitle: function() {},
};

function onWheelEventHandler(event, config) {
	event.preventDefault();

	if (event.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
		container.scrollTop += event.deltaY;
		container.scrollLeft += event.deltaX;
	} else if (event.deltaMode === WheelEvent.DOM_DELTA_LINE) {
		container.scrollTop += event.deltaY * config.inner.dimensions.scrollLineHeight;
		container.scrollLeft += event.deltaX * config.inner.dimensions.scrollLineHeight;
	} else if (event.deltaMode === WheelEvent.DOM_DELTA_PAGE) {
		container.scrollTop += event.deltaY * config.inner.dimensions.scrollPageHeight;
		container.scrollLeft += event.deltaX * config.inner.dimensions.scrollPageHeight;
	}
}

function onScrollEventHandler(event, config) {
	tooltipModule.hideAll(config);

	domModule.resetEditingCell(config, instances.onInputBlurEventHandler);
	domModule.updateBuffers(config);
	domModule.updateTable(config, false);
}

function onClickCellEventHandler(event, config) {
	if (!event.target.matches('.' + config.inner.selectors.cellDataContainer)) {
		return;
	}

	editModule.startEditingCell(config, event.target.parentNode, instances, {
		onInputBlurEventHandler: onInputBlurEventHandler,
		onInputKeyUpEventHandler: onInputKeyUpEventHandler
	});
}

function onInputBlurEventHandler(event, config) {
	editModule.finishEditingCell(config, event.target, {
		onInputBlurEventHandler: onInputBlurEventHandler,
		onInputKeyUpEventHandler: onInputKeyUpEventHandler
	});
}

function onInputKeyUpEventHandler(event, config) {
	var keyCode = keyboardUtil.getKeyCode(event);

	switch (keyCode) {
		case keyboardUtil.KEY_CODES.ENTER:
			event.target.removeEventListener('blur', instances.onInputBlurEventHandler);
			editModule.finishEditingCell(config, event.target, {
				onInputBlurEventHandler: onInputBlurEventHandler,
				onInputKeyUpEventHandler: onInputKeyUpEventHandler
			});
			break;
		case keyboardUtil.KEY_CODES.ESCAPE:
			editModule.cancelEditingCell(config, event.target, {
				onInputBlurEventHandler: onInputBlurEventHandler,
				onInputKeyUpEventHandler: onInputKeyUpEventHandler
			});
			break;
		default:
			break;
	}
}

function onClickSaveButtonEventHandler(event, config) {
	editModule.saveCells(config);
}

function onClickSortHeader(event, config) {
	var sortCellSelector = '.' + config.inner.selectors.sortCell,
		sortContainerSelector = sortCellSelector + ' .' + config.inner.selectors.cellDataContainer,
		sortDisabledSelector = '.' + config.inner.selectors.sortDisabled,
		sortIconSelector = sortCellSelector + ' .' + config.inner.selectors.sortIcon;

	if (!event.target.matches(sortContainerSelector) &&
		!event.target.matches(sortIconSelector) ||
		event.target.matches(sortDisabledSelector)) {
		return;
	}

	if (event.target.matches(sortIconSelector)) {
		sortModule.resetSort(config);
	}

	if (event.target.matches(sortContainerSelector)) {
		sortModule.sortByColumn(config, domUtil.findParentNode(event.target, sortCellSelector));
	}
}

function onClickFilterHeader(event, config) {
	var filterCellSelector = '.' + config.inner.selectors.filterCell,
		filterContainerSelector = filterCellSelector + ' .' + config.inner.selectors.cellDataContainer,
		filterDisabledSelector = '.' + config.inner.selectors.filterDisabled,
		filterSearchIconSelector = filterCellSelector + ' .' + config.inner.selectors.filterSearchIcon,
		filterClearIconSelector = filterCellSelector + ' .' + config.inner.selectors.filterClearIcon;

	if (!event.target.matches(filterContainerSelector) &&
		!event.target.matches(filterSearchIconSelector) &&
		!event.target.matches(filterClearIconSelector) ||
		event.target.matches(filterDisabledSelector)) {

		return;
	}

	var cellNode = domUtil.findParentNode(event.target, filterCellSelector);

	if (event.target.matches(filterClearIconSelector)) {
		filterModule.clearFilter(config, cellNode);

		return;
	}

	filterModule.startEditingFilter(config, cellNode);
}

function onWindowResize(event, config) {
	if (document.querySelector('#' + config.inner.selectors.uniqueId) === null) {
		return;
	}

	resizeModule.resizeEventHandler(config);
}

function onMouseEnterCellWithTitle(event, config) {
	tooltipModule.onMouseEnterCellWithTitle(config, event.target);
}

function onMouseLeaveCellWithTitle(event, config) {
	tooltipModule.onMouseLeaveCellWithTitle(config, event.target);
}

function addEvents(config) {
	container = document.querySelector('.' + config.selectors.virtualContainer);

	instances.onScrollEventHandler = function(event) { onScrollEventHandler(event, config); };
	instances.onWheelEventHandler = function(event) { onWheelEventHandler(event, config); };
	instances.onClickCellEventHandler = function(event) { onClickCellEventHandler(event, config); };
	instances.onClickSaveButtonEventHandler = function(event) { onClickSaveButtonEventHandler(event, config); };
	instances.onClickSortHeader = function(event) { onClickSortHeader(event, config); };
	instances.onClickFilterHeader = function(event) { onClickFilterHeader(event, config); };
	instances.onWindowResize = function(event) { onWindowResize(event, config); };
	instances.onMouseEnterCellWithTitle = function(event) { onMouseEnterCellWithTitle(event, config); };
	instances.onMouseLeaveCellWithTitle = function(event) { onMouseLeaveCellWithTitle(event, config); };

	if (container !== null) {
		container.addEventListener('wheel', instances.onWheelEventHandler, { passive: false, capture: true });
		container.addEventListener('scroll', instances.onScrollEventHandler);
	}

	if (config.modules.tooltip.enabled) {
		document.querySelectorAll('[title]').forEach(function(el) {
			el.addEventListener('mouseenter', instances.onMouseEnterCellWithTitle);
			el.addEventListener('mouseleave', instances.onMouseLeaveCellWithTitle);
		});
	}

	if (config.edit.enabled && config.selectors.saveButton !== null) {
		document.querySelector(config.selectors.saveButton).addEventListener('click', instances.onClickSaveButtonEventHandler);
	}

	if (config.edit.enabled) {
		document.querySelectorAll('.' + config.selectors.virtualTable + ' td.' + config.inner.selectors.dataCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickCellEventHandler);
		});
	}

	if (config.sort.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.sortCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickSortHeader);
		});
	}

	if (config.filter.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.filterCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickFilterHeader);
		});
	}

	if (config.autoResize) {
		window.addEventListener('resize', instances.onWindowResize);
	}
}

function removeEvents(config) {
	container = document.querySelector('.' + config.selectors.virtualContainer);

	if (container !== null) {
		container.removeEventListener('wheel', instances.onWheelEventHandler);
		container.removeEventListener('scroll', instances.onScrollEventHandler);
	}

	if (config.modules.tooltip.enabled) {
		document.querySelectorAll('[title]').forEach(function(el) {
			el.removeEventListener('mouseenter', instances.onMouseEnterCellWithTitle);
			el.removeEventListener('mouseleave', instances.onMouseLeaveCellWithTitle);
		});
	}

	if (config.edit.enabled && config.selectors.saveButton !== null) {
		document.querySelector(config.selectors.saveButton).removeEventListener('click', instances.onClickSaveButtonEventHandler);
	}

	if (config.edit.enabled) {
		document.querySelectorAll('.' + config.selectors.virtualTable + ' td.' + config.inner.selectors.dataCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickCellEventHandler);
		});
	}

	if (config.sort.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.sortCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickSortHeader);
		});
	}

	if (config.filter.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.filterCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickFilterHeader);
		});
	}

	if (config.autoResize) {
		window.removeEventListener('resize', instances.onWindowResize);
	}
}

module.exports = {
	addEvents: addEvents,
	removeEvents: removeEvents
};
},{"../modules/dom":15,"../modules/edit":16,"../modules/filter":18,"../modules/resize":20,"../modules/sort":21,"../modules/tooltip":22,"../utils/dom":30,"../utils/keyboard":31}],18:[function(require,module,exports){
'use strict';

var domModule   = require('../modules/dom'),
	sortModule  = require('../modules/sort'),
	dataUtil    = require('../utils/data'),
	configUtil  = require('../utils/configuration'),
	cellElement = require('../elements/cell');

function startEditingFilter(config, cellNode) {
	if (cellNode.querySelector('.' + config.inner.selectors.filterContainer) !== null) {
		return;
	}

	var attribute = cellNode.getAttribute('data-attribute'),
		filterObj = config.inner.filters[attribute] || {},
		headerObj = configUtil.getHeaderObject(config, attribute),
		clearIconClass = config.inner.icons.filter.clear,
		clearIconElementClass = config.inner.selectors.filterClearIcon + ' ' + clearIconClass;

	filterObj.attribute = attribute;
	filterObj.filterType = headerObj.filterType;
	filterObj.value = filterObj.value || '';

	config.inner.filters[attribute] = filterObj;

	var container = document.createElement('div');

	cellElement.updateDataContainer(config, cellNode, container);

	container.classList.add(config.inner.selectors.filterContainer);
	container.innerHTML = '<input><i class="' + clearIconElementClass + '" aria-hidden="true"></i>';

	var input = container.querySelector('input');

	input.setAttribute('type', headerObj.dataType);
	input.value = filterObj.value;
	input.focus();
	input.addEventListener('keyup', function(event) {
		if ((event.keyCode || event.which) === 13) { // Enter key
			filterObj.value = dataUtil.getValueByType(input.value, headerObj.dataType);

			finishEditingFilter(config, cellNode, headerObj, filterObj);
		} else if ((event.keyCode || event.which) === 27) { // Escape key
			finishEditingFilter(config, cellNode, headerObj, filterObj);
		}
	});
}

function filter(config, sortTable) {
	sortTable = sortTable !== false;

	config.dataSource = config.inner.originalDataSource;

	Object.keys(config.inner.filters).forEach(function(key) {
		var filterObj = config.inner.filters[key];

		if (typeof filterObj.value == 'undefined' || filterObj.value === '') {
			return;
		}

		if (filterObj.filterType === 'custom') {
			if (config.filter.customFilter !== null) {
				config.dataSource = config.filter.customFilter({
					dataSource: config.dataSource,
					attribute: filterObj.attribute,
					value: filterObj.value,
					editedValues: config.inner.editedValues,
					uniqueRowKey: config.uniqueRowKey
				});
			}
		} else {
			config.dataSource = dataUtil.filterData({
				dataSource: config.dataSource,
				attribute: filterObj.attribute,
				filterType: filterObj.filterType,
				valueOne: filterObj.value,
				valueTwo: filterObj.valueTwo,
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}
	});

	if (sortTable) {
		sortModule.sort(config, false);
	}

	domModule.recalculateDimensions(config);
	domModule.updateBuffers(config);
	domModule.updateTable(config);
}

function clearFilter(config, cellNode) {
	var attribute = cellNode.getAttribute('data-attribute'),
		cellObj = configUtil.getHeaderObject(config, attribute),
		filterObj = config.inner.filters[attribute];

	filterObj.value = '';

	var newFilters = {};

	Object.keys(config.inner.filters).forEach(function(key) {
		if (key !== attribute) {
			newFilters[key] = config.inner.filters[key];
		}
	});

	config.inner.filters = newFilters;

	finishEditingFilter(config, cellNode, cellObj, filterObj);
}

function finishEditingFilter(config, cellNode, cellObj, filterObj) {
	cellElement.updateDataContainer(config, cellNode, cellElement.createFilterData(config, cellNode, cellObj, filterObj));

	filter(config);
}

module.exports = {
	startEditingFilter: startEditingFilter,
	filter: filter,
	clearFilter: clearFilter
};
},{"../elements/cell":3,"../modules/dom":15,"../modules/sort":21,"../utils/configuration":28,"../utils/data":29}],19:[function(require,module,exports){
'use strict';

var configuration      = require('../modules/configuration'),
	eventHandlerModule = require('../modules/event-handler'),
	domModule          = require('../modules/dom'),
	configUtil         = require('../utils/configuration'),
	dataUtil           = require('../utils/data'),
	cellElement        = require('../elements/cell');

function generateTable(config, options) {
	configuration.init(config, options);

	initContainers(config);

	configuration.initCalculatedValues(config);

	initTable(config);

	domModule.updateBuffers(config);
	domModule.updateTable(config);

	eventHandlerModule.addEvents(config);
}

function destroyTable(config) {
	eventHandlerModule.removeEvents(config);
	domModule.destroyTable(config);
}

function initContainers(config) {
	var container = document.querySelector(config.selectors.mainContainer),
		virtualContainer = document.createElement('div'),
		virtualTable = document.createElement('table'),
		fixedContainer = document.createElement('div'),
		fixedTable = document.createElement('table');

	container.setAttribute('id', config.inner.selectors.uniqueId);
	virtualContainer.classList.add(config.selectors.virtualContainer);
	virtualTable.classList.add(config.selectors.virtualTable);
	fixedContainer.classList.add(config.selectors.fixedContainer);
	fixedTable.classList.add(config.selectors.fixedTable);

	container.appendChild(fixedContainer);
	fixedContainer.appendChild(fixedTable);

	container.appendChild(virtualContainer);
	virtualContainer.appendChild(virtualTable);

	virtualContainer.style.maxHeight = config.dimensions.containerHeight + 'px';
	virtualContainer.style.height = config.dimensions.containerHeight + 'px';
	virtualContainer.style.overflow = 'scroll';

	fixedContainer.style.padding = config.inner.minBufferHeight + 'px 0';
	fixedContainer.style.float = 'left';
}

function initTable(config) {
	// Generate virtual table
	var virtualThead = document.createElement('thead'),
		virtualTbody = document.createElement('tbody'),
		trHeadBuffer = document.createElement('tr'),
		columnsNumber = configUtil.getKeyHeader(config).length,
		rowsNumber = config.dataSource.length,
		maxColumnNumber = config.inner.visibleColumnNumber >= columnsNumber ? columnsNumber : config.inner.visibleColumnNumber,
		maxRowNumber = config.inner.visibleRowNumber >= rowsNumber ? rowsNumber : config.inner.visibleRowNumber;

	trHeadBuffer.classList.add(config.inner.selectors.bufferRowTop);

	var i, j, trHead, trBody, bufferColumnLeft, bufferColumnRight, bufferRowBottom, tdElement, cellObj;

	// Generate virtual header
	bufferColumnLeft = document.createElement('td');
	bufferColumnLeft.classList.add(config.inner.selectors.bufferColumnLeft);

	trHeadBuffer.appendChild(bufferColumnLeft);

	for (i = 0; i < maxColumnNumber; i++) {
		tdElement = document.createElement('td');
		tdElement.style.minWidth = config.dimensions.cellWidth + 'px';
		trHeadBuffer.appendChild(tdElement);
	}

	bufferColumnRight = document.createElement('td');
	bufferColumnRight.classList.add(config.inner.selectors.bufferColumnRight);

	trHeadBuffer.appendChild(bufferColumnRight);

	virtualThead.appendChild(trHeadBuffer);

	config.headers.forEach(function(headerRow, rowCount) {
		var isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.headerRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferColumnLeft);

		trHead.appendChild(tdElement);

		for (j = 0; j < maxColumnNumber; j++) {
			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.headerCell);

			cellElement.createDataContainer(config, tdElement, cellElement.createHeaderData(config, tdElement, headerRow[j], isLastRow));

			if (isLastRow) {
				tdElement.classList.add(config.inner.selectors.sortCell);

				if (!config.sort.enabled || headerRow[j].sortDisabled) {
					tdElement.classList.add(config.inner.selectors.sortDisabled);
				}
			}

			trHead.appendChild(tdElement);
		}

		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferColumnRight);

		trHead.appendChild(tdElement);

		virtualThead.appendChild(trHead);
	});

	// Generate virtual filter row
	if (config.filter.enabled) {
		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.filterRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferColumnLeft);

		trHead.appendChild(tdElement);

		for (j = 0; j < maxColumnNumber; j++) {
			cellObj = configUtil.getKeyHeader(config)[j];

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.filterCell);

			cellElement.createDataContainer(config, tdElement, cellElement.createFilterData(config, tdElement, cellObj, {}));

			if (cellObj.filterDisabled) {
				tdElement.classList.add(config.inner.selectors.filterDisabled);
			}

			trHead.appendChild(tdElement);
		}

		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferColumnRight);

		trHead.appendChild(tdElement);

		virtualThead.appendChild(trHead);
	}

	// Generate virtual body
	for (i = 0; i < maxRowNumber; i++) {
		trBody = document.createElement('tr');
		trBody.classList.add(config.inner.selectors.dataRow);
		trBody.style.height = config.dimensions.cellHeight + 'px';

		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferColumnLeft);

		trBody.appendChild(tdElement);

		for (j = 0; j < maxColumnNumber; j++) {
			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.dataCell);

			cellElement.createDataContainer(config, tdElement);

			trBody.appendChild(tdElement);
		}

		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferColumnRight);

		trBody.appendChild(tdElement);

		virtualTbody.appendChild(trBody);
	}

	bufferRowBottom = document.createElement('tr');
	bufferRowBottom.classList.add(config.inner.selectors.bufferRowBottom);

	virtualTbody.appendChild(bufferRowBottom);

	document.querySelector('.' + config.selectors.virtualTable).appendChild(virtualThead);
	document.querySelector('.' + config.selectors.virtualTable).appendChild(virtualTbody);

	config.inner.bufferLeft = document.querySelectorAll('.' + config.inner.selectors.bufferColumnLeft);
	config.inner.bufferRight = document.querySelectorAll('.' + config.inner.selectors.bufferColumnRight);
	config.inner.bufferTop = document.querySelectorAll('.' + config.inner.selectors.bufferRowTop);
	config.inner.bufferBottom = document.querySelectorAll('.' + config.inner.selectors.bufferRowBottom);

	// Generate fixed table

	if (config.fixedHeaders.length === 0 || config.fixedHeaders[0].length === 0) {
		document.querySelector('.' + config.selectors.fixedTable).remove();

		return;
	}

	var fixedThead = document.createElement('thead'),
		fixedTbody = document.createElement('tbody');

	// Generate fixed header

	for (i = 0; i < config.fixedHeaders.length; i++) {
		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.headerRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[i].length; j++) {
			var isLastRow = j === config.fixedHeaders[i].length - 1;

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.headerCell);

			cellElement.createDataContainer(config, tdElement, cellElement.createHeaderData(config, tdElement, config.fixedHeaders[i][j], isLastRow));

			if (isLastRow) {
				tdElement.classList.add(config.inner.selectors.sortCell);

				if (!config.sort.enabled || config.fixedHeaders[i][j].sortDisabled) {
					tdElement.classList.add(config.inner.selectors.sortDisabled);
				}
			}

			trHead.appendChild(tdElement);
		}

		fixedThead.appendChild(trHead);
	}

	// Generate fixed filter row

	if (config.filter.enabled &&
		config.fixedHeaders.length > 0 &&
		config.fixedHeaders[config.inner.indexOfCellKeyHeader].length > 0) {

		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.filterRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[config.inner.indexOfCellKeyHeader].length; j++) {
			cellObj = configUtil.getFixedKeyHeader(config)[j];

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.filterCell);
			tdElement.style.minWidth = config.dimensions.cellWidth + 'px';

			cellElement.createDataContainer(config, tdElement, cellElement.createFilterData(config, tdElement, cellObj, {}));

			if (cellObj.filterDisabled) {
				tdElement.classList.add(config.inner.selectors.filterDisabled);
			}

			trHead.appendChild(tdElement);
		}

		fixedThead.appendChild(trHead);
	}

	// Generate fixed body

	for (i = 0; i < maxRowNumber; i++) {
		trBody = document.createElement('tr');
		trBody.classList.add(config.inner.selectors.dataRow);
		trBody.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[config.inner.indexOfCellKeyHeader].length; j++) {
			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.dataCell);

			cellElement.createDataContainer(config, tdElement);

			trBody.appendChild(tdElement);
		}

		fixedTbody.appendChild(trBody);
	}

	document.querySelector('.' + config.selectors.fixedTable).appendChild(fixedThead);
	document.querySelector('.' + config.selectors.fixedTable).appendChild(fixedTbody);
}

function getDefaultOptions() {
	return dataUtil.cloneObject(configuration.DEFAULTS);
}

module.exports = {
	generateTable: generateTable,
	destroyTable: destroyTable,
	getDefaultOptions: getDefaultOptions
};
},{"../elements/cell":3,"../modules/configuration":14,"../modules/dom":15,"../modules/event-handler":17,"../utils/configuration":28,"../utils/data":29}],20:[function(require,module,exports){
'use strict';

var configUtil = require('../utils/configuration'),
	domModule  = require('../modules/dom');

var DELAY = 200;

var isEventDelayed = false;

function redrawTable(config) {
	var prevRowNumber = config.inner.visibleRowNumber,
		prevColumnNumber = config.inner.visibleColumnNumber;

	config.dimensions.containerHeight = configUtil.calculateVirtualContainerHeight(config, configUtil.getDefaultContainerHeight(config));
	config.inner.visibleRowNumber = configUtil.getVisibleRowNumber(config);
	config.inner.visibleColumnNumber = configUtil.getVisibleColumnNumber(config);
	config.inner.tableOffsetWidth = configUtil.getTableOffsetWidth(config);
	config.inner.tableOffsetHeight = configUtil.getTableOffsetHeight(config);

	var i, lastRow, lastColumns;

	if (prevRowNumber === config.inner.visibleRowNumber &&
		prevColumnNumber === config.inner.visibleColumnNumber) {

		return;
	}

	if (config.inner.visibleRowNumber < 1) {
		config.inner.visibleRowNumber = 1;

		return;
	}

	var virtualContainerSelector = '#' + config.inner.selectors.uniqueId + ' .' + config.selectors.virtualContainer,
		lastFixedRowSelector = '#' + config.inner.selectors.uniqueId + ' .' + config.selectors.fixedTable + ' .data-row:last-of-type',
		lastVirtualRowSelector = '#' + config.inner.selectors.uniqueId + ' .' + config.selectors.virtualTable + ' .data-row:nth-last-of-type(2)',
		lastVirtualColumn = '#' + config.inner.selectors.uniqueId + ' .' + config.selectors.virtualTable + ' td:nth-last-of-type(2)';

	var virtualContainer = document.querySelector(virtualContainerSelector);

	virtualContainer.style.maxHeight = config.dimensions.containerHeight + 'px';
	virtualContainer.style.height = config.dimensions.containerHeight + 'px';

	if (prevRowNumber < config.inner.visibleRowNumber) { // Ha több sor lett
		for (i = 0; i < config.inner.visibleRowNumber - prevRowNumber; i++) {
			lastRow = document.querySelector(lastFixedRowSelector);

			if (lastRow !== null) {
				lastRow.parentNode.insertBefore(lastRow.cloneNode(true), lastRow);
			}

			lastRow = document.querySelector(lastVirtualRowSelector);
			lastRow.parentNode.insertBefore(lastRow.cloneNode(true), lastRow);
		}
	} else if (prevRowNumber > config.inner.visibleRowNumber) { // Ha kevesebb sor lett
		for (i = 0; i < prevRowNumber - config.inner.visibleRowNumber; i++) {
			lastRow = document.querySelector(lastFixedRowSelector);

			if (lastRow !== null) {
				lastRow.remove();
			}

			lastRow = document.querySelector(lastVirtualRowSelector);
			lastRow.remove();
		}
	}

	if (prevColumnNumber < config.inner.visibleColumnNumber) { // Ha több oszlop lett
		for (i = 0; i < config.inner.visibleColumnNumber - prevColumnNumber; i++) {
			lastColumns = document.querySelectorAll(lastVirtualColumn);
			lastColumns.forEach(function(column) {
				column.parentNode.insertBefore(column.cloneNode(true), column);
			});
		}
	} else if (prevColumnNumber > config.inner.visibleColumnNumber) { // Ha kevesebb oszlop lett
		for (i = 0; i < prevColumnNumber - config.inner.visibleColumnNumber; i++) {
			lastColumns = document.querySelectorAll(lastVirtualColumn);
			lastColumns.forEach(function(column) {
				column.remove();
			});
		}
	}

	config.inner.bufferLeft = document.querySelectorAll('.' + config.inner.selectors.bufferColumnLeft);
	config.inner.bufferRight = document.querySelectorAll('.' + config.inner.selectors.bufferColumnRight);
	config.inner.bufferTop = document.querySelectorAll('.' + config.inner.selectors.bufferRowTop);
	config.inner.bufferBottom = document.querySelectorAll('.' + config.inner.selectors.bufferRowBottom);

	domModule.updateBuffers(config);
	domModule.updateTable(config);
}

function resizeEventHandler(config) {
	if (!isEventDelayed) {
		isEventDelayed = true;

		window.setTimeout(function() {
			isEventDelayed = false;

			redrawTable(config);
		}, DELAY);
	}
}

module.exports = {
	resizeEventHandler: resizeEventHandler
};
},{"../modules/dom":15,"../utils/configuration":28}],21:[function(require,module,exports){
'use strict';

var domModule  = require('../modules/dom'),
	configUtil = require('../utils/configuration'),
	dataUtil   = require('../utils/data');

function sortByColumn(config, column) {
	var attribute = column.getAttribute('data-attribute'),
		headerObj = configUtil.getHeaderObject(config, attribute),
		direction = 'up';

	if (config.inner.sort.attribute === attribute &&
		config.inner.sort.direction === 'up') {

		direction = 'down';
	}

	config.inner.sort.direction = direction;
	config.inner.sort.attribute = attribute;
	config.inner.sort.dataType = headerObj.dataType;

	sort(config);
}

function sort(config, updateTable) {
	updateTable = updateTable !== false;

	config.dataSource.sort(function(a, b) {
		if (config.sort.customSort !== null) {
			return config.sort.customSort(a, b, {
				attribute: config.inner.sort.attribute,
				direction: config.inner.sort.direction,
				dataType: config.inner.sort.dataType,
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}

		var attribute = config.inner.sort.attribute || config.sort.default,
			direction = config.inner.sort.direction || 'down',
			dataType = config.inner.sort.dataType || getSortType(config, config.sort.default);

		return dataUtil.defaultComparator(a, b, {
			attribute: attribute,
			direction: direction,
			dataType: dataType,
			editedValues: config.inner.editedValues,
			uniqueRowKey: config.uniqueRowKey,
			name: config.locale.name
		});
	});

	if (updateTable) {
		domModule.updateTable(config);
	}
}

function resetSort(config) {
	config.inner.sort.attribute =
	config.inner.sort.direction =
	config.inner.sort.dataType = undefined; // eslint-disable-line no-undefined

	config.dataSource.sort(function(a, b) {
		if (config.sort.customSort !== null) {
			return config.sort.customSort(a, b, {
				attribute: config.sort.default,
				direction: 'down',
				dataType: getSortType(config, config.sort.default),
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}

		return dataUtil.defaultComparator(a, b, {
			attribute: config.sort.default,
			direction: 'down',
			dataType: getSortType(config, config.sort.default),
			editedValues: config.inner.editedValues,
			uniqueRowKey: config.uniqueRowKey,
			name: config.locale.name
		});
	});

	domModule.updateTable(config);
}

function getSortType(config, attribute) {
	var headerObj = configUtil.getHeaderObject(config, attribute);

	return typeof headerObj == 'undefined' || typeof headerObj.dataType == 'undefined' ? 'string' : headerObj.dataType;
}

module.exports = {
	sortByColumn: sortByColumn,
	sort: sort,
	resetSort: resetSort
};
},{"../modules/dom":15,"../utils/configuration":28,"../utils/data":29}],22:[function(require,module,exports){
'use strict';

var domUtil = require('../utils/dom');

function show(config, options) {
	switch (options.type) {
		case 'info':
			showInfo(config, options);
			break;
		case 'warn':
			showWarn(config, options);
			break;
		case 'error':
			showError(config, options);
			break;
		default:
			config.modules.tooltip.show(options);
			break;
	}
}

function hide(config, element) {
	config.modules.tooltip.hide(element);
}

function hideAll(config) {
	config.modules.tooltip.hideAll();
}

function showInfo(config, options) {
	config.modules.tooltip.showInfo(options);
}

function showWarn(config, options) {
	config.modules.tooltip.showWarn(options);
}

function showError(config, options) {
	config.modules.tooltip.showError(options);
}

function onMouseEnterCellWithTitle(config, element) {
	var cellDataContainer = element === null ? null : element.querySelector('.' + config.inner.selectors.cellDataContainer);

	if (cellDataContainer === null ||
		!domUtil.isEllipsisActive(cellDataContainer) &&
		!domUtil.isOverflown(cellDataContainer)) {

		return;
	}

	showInfo(config, {
		element: element,
		text: element.getAttribute('title')
	});
}

function onMouseLeaveCellWithTitle(config, element) {
	hide(config, element);
}

module.exports = {
	show: show,
	hide: hide,
	hideAll: hideAll,
	showInfo: showInfo,
	showWarn: showWarn,
	showError: showError,
	onMouseEnterCellWithTitle: onMouseEnterCellWithTitle,
	onMouseLeaveCellWithTitle: onMouseLeaveCellWithTitle
};
},{"../utils/dom":30}],23:[function(require,module,exports){
'use strict';

if (typeof Array.prototype.find == 'undefined') {
	Array.prototype.find = function(predicate) { // eslint-disable-line no-extend-native
		if (this === null) {
			throw new TypeError('Array.prototype.find called on null or undefined');
		}

		if (typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}

		var list = Object(this);
		var length = list.length >>> 0;
		var thisArg = arguments[1];
		var value;

		for (var i = 0; i < length; i++) {
			value = list[i];
			if (predicate.call(thisArg, value, i, list)) {
				return value;
			}
		}

		return undefined; // eslint-disable-line no-undefined
	};
}
},{}],24:[function(require,module,exports){
'use strict';

if (!Element.prototype.matches) {
	Element.prototype.matches =
		Element.prototype.matchesSelector ||
		Element.prototype.mozMatchesSelector ||
		Element.prototype.msMatchesSelector ||
		Element.prototype.oMatchesSelector ||
		Element.prototype.webkitMatchesSelector ||
		function(s) {
			var matches = (this.document || this.ownerDocument).querySelectorAll(s),
				i = matches.length;

			while (--i >= 0 && matches.item(i) !== this) {} // eslint-disable-line
			return i > -1;
		};
}
},{}],25:[function(require,module,exports){
'use strict';

[ Element.prototype, CharacterData.prototype, DocumentType.prototype ].forEach(function(item) {
	if (item.hasOwnProperty('remove')) {
		return;
	}
	Object.defineProperty(item, 'remove', {
		configurable: true,
		enumerable: true,
		writable: true,
		value: function remove() {
			if (this.parentNode !== null) {
				this.parentNode.removeChild(this);
			}
		}
	});
});
},{}],26:[function(require,module,exports){
'use strict';

if (!NodeList.prototype.forEach) {
	NodeList.prototype.forEach = function(callback, argument) {
		argument = argument || window;

		for (var i = 0; i < this.length; i++) {
			callback.call(argument, this[i], i, this);
		}
	};
}
},{}],27:[function(require,module,exports){
'use strict';

if (typeof Object.assign != 'function') {
	// Must be writable: true, enumerable: false, configurable: true
	Object.defineProperty(Object, 'assign', {
		value: function assign(target) { // .length of function is 2
			if (target === null) { // TypeError if undefined or null
				throw new TypeError('Cannot convert undefined or null to object');
			}

			var to = Object(target);

			for (var index = 1; index < arguments.length; index++) {
				var nextSource = arguments[index];

				if (nextSource !== null) { // Skip over if undefined or null
					for (var nextKey in nextSource) {
						// Avoid bugs when hasOwnProperty is shadowed
						if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
							to[nextKey] = nextSource[nextKey];
						}
					}
				}
			}
			return to;
		},
		writable: true,
		configurable: true
	});
}
},{}],28:[function(require,module,exports){
'use strict';

function calculateVirtualContainerHeight(config, height) {
	if (typeof height == 'undefined') {
		return height;
	}

	return config.inner.minBufferHeight * 2 + Math.floor(height / config.dimensions.cellHeight) * config.dimensions.cellHeight;
}

function getDefaultContainerHeight(config) {
	return calculateVirtualContainerHeight(config, window.innerHeight - document.querySelector(config.selectors.mainContainer).getBoundingClientRect().top - 64);
}

function getIndexOfCellKeyHeader(config) {
	return config.headers.length - 1;
}

function getSortDefault(config) {
	return config.uniqueRowKey;
}

function getMaxColspan(config) {
	var maxVal = 1;

	config.headers.forEach(function(element) {
		element.forEach(function(subElement) {
			if (typeof subElement.colspan != 'undefined' && maxVal < subElement.colspan) {
				maxVal = subElement.colspan;
			}
		});
	});

	return maxVal;
}

// Firefox using MouseEvent.DOM_DELTA_LINE || MouseEvent.DOM_DELTA_PAGE instead of exact pixels, when measuring scroll delta values.
// This function will give the exact line height for the pixel conversion
function getScrollLineHeight() {
	var iframe = document.createElement('iframe');

	iframe.src = '#';
	document.body.appendChild(iframe);

	var iwin = iframe.contentWindow,
		idoc = iwin.document;

	idoc.open();
	idoc.write('<!DOCTYPE html><html><head></head><body><span>a</span></body></html>');
	idoc.close();

	var span = idoc.body.firstElementChild,
		r = span.offsetHeight;

	document.body.removeChild(iframe);

	return r;
}

// Firefox using MouseEvent.DOM_DELTA_LINE || MouseEvent.DOM_DELTA_PAGE instead of exact pixels, when measuring scroll delta values.
// This function will give the exact page height for the pixel conversion
function getScrollPageHeight() {
	return window.document.body.clientHeight;
}

function getVisibleRowNumber(config) {
	var hasFilter = config.filter.enabled,
		containerHeight = config.dimensions.containerHeight - config.inner.minBufferHeight * 2,
		dataCells = Math.floor(containerHeight / config.dimensions.cellHeight),
		headerCells = config.headers.length + (hasFilter ? 1 : 0);

	return dataCells - headerCells;
}

function getVisibleColumnNumber(config) {
	return Math.floor(document.querySelector('.' + config.selectors.virtualContainer).offsetWidth / getCellFullWidth(config) +
		(config.inner.colspanOffset > 2 ? config.inner.colspanOffset : 2) + config.inner.colspanOffset);
}

function getTableOffsetWidth(config) {
	var tabbleOffsetColumns = getKeyHeader(config).length < config.inner.visibleColumnNumber ? config.inner.minBufferWidth : getKeyHeader(config).length - config.inner.visibleColumnNumber;

	return tabbleOffsetColumns * getCellFullWidth(config);
}

function getTableOffsetHeight(config) {
	var tableOffsetRows = config.dataSource.length < config.inner.visibleRowNumber ? config.inner.minBufferHeight : config.dataSource.length - config.inner.visibleRowNumber + 1;

	return tableOffsetRows * config.dimensions.cellHeight;
}

function getCellFullWidth(config) {
	return config.dimensions.cellPaddingHorizontal * 2 + config.dimensions.cellWidth + config.dimensions.cellBorderWidth;
}

function getKeyHeader(config) {
	return config.headers[config.inner.indexOfCellKeyHeader];
}

function getFixedKeyHeader(config) {
	return config.fixedHeaders[config.inner.indexOfCellKeyHeader];
}

function getHeaderObject(config, attribute) {
	return getKeyHeader(config).find(function(column) {
		return column.key === attribute;
	}) || getFixedKeyHeader(config).find(function(column) {
		return column.key === attribute;
	});
}

function nil() {
	return function() {};
}

function wrapper(f) {
	return function() { return f; };
}

module.exports = {
	calculateVirtualContainerHeight: calculateVirtualContainerHeight,
	getDefaultContainerHeight: getDefaultContainerHeight,
	getIndexOfCellKeyHeader: getIndexOfCellKeyHeader,
	getSortDefault: getSortDefault,
	getMaxColspan: getMaxColspan,
	getScrollLineHeight: getScrollLineHeight,
	getScrollPageHeight: getScrollPageHeight,
	getVisibleRowNumber: getVisibleRowNumber,
	getVisibleColumnNumber: getVisibleColumnNumber,
	getTableOffsetWidth: getTableOffsetWidth,
	getTableOffsetHeight: getTableOffsetHeight,
	getCellFullWidth: getCellFullWidth,
	getKeyHeader: getKeyHeader,
	getFixedKeyHeader: getFixedKeyHeader,
	getHeaderObject: getHeaderObject,
	nil: nil,
	wrapper: wrapper
};
},{}],29:[function(require,module,exports){
'use strict';

var FILTER_TYPES = [ 'equals', 'equalsCaseInsensitive', 'like', 'likeCaseInsensitive', 'greaterThan', 'greaterOrEqual',
	'lessThan', 'lessOrEqual', 'between', 'betweenInclusive', 'contains' ];

function defaultComparator(a, b, options) {
	var attrA = getMergedValue(a, options.attribute, options.editedValues, options.uniqueRowKey),
		attrB = getMergedValue(b, options.attribute, options.editedValues, options.uniqueRowKey),
		isDown = options.direction === 'down';

	if (options.dataType === 'string') {
		var compareResult = 0;

		if (typeof attrA == 'undefined') {
			compareResult = -1;
		} else if (typeof attrB == 'undefined') {
			compareResult = 1;
		} else {
			attrA += '';
			attrB += '';

			compareResult = attrA.localeCompare(attrB, options.locale);
		}

		return isDown || compareResult === 0 ? compareResult : compareResult * -1;
	} else if (options.dataType === 'number') {
		attrA = parseFloat(attrA);
		attrB = parseFloat(attrB);

		if (isNaN(attrA)) {
			return isDown ? -1 : 1;
		}

		if (isNaN(attrB)) {
			return isDown ? 1 : -1;
		}
	}

	if (typeof attrA == 'undefined' && typeof attrB != 'undefined' || attrA < attrB) {
		return isDown ? -1 : 1;
	}

	if (typeof attrA != 'undefined' && typeof attrB == 'undefined' || attrA > attrB) {
		return isDown ? 1 : -1;
	}

	return 0;
}

function filterData(options) {
	if (FILTER_TYPES.indexOf(options.filterType) === -1) {
		window.console.error('Not a valid filter type! (' + options.filterType + ')');

		return options.dataSource;
	}

	switch (options.filterType) {
		case 'equals':
			return equalsFilter(options);
		case 'equalsCaseInsensitive':
			return equalsCaseInsensitiveFilter(options);
		case 'like':
			return likeFilter(options);
		case 'likeCaseInsensitive':
			return likeCaseInsensitiveFilter(options);
		case 'greaterThan':
			return greaterThanFilter(options);
		case 'greaterOrEqual':
			return greaterOrEqualFilter(options);
		case 'lessThan':
			return lessThanFilter(options);
		case 'lessOrEqual':
			return lessOrEqualFilter(options);
		case 'between':
			return betweenFilter(options);
		case 'betweenInclusive':
			return betweenInclusiveFilter(options);
		case 'contains':
			return containsFilter(options);
		default:
			return options.dataSource;
	}
}

function equalsFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) === options.valueOne;
	});
}

function equalsCaseInsensitiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).toUpperCase() === options.valueOne.toUpperCase();
	});
}

function likeFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).indexOf(options.valueOne) !== -1;
	});
}

function likeCaseInsensitiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).toUpperCase().indexOf(options.valueOne.toUpperCase()) !== -1;
	});
}

function greaterThanFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) > options.valueOne;
	});
}

function greaterOrEqualFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) >= options.valueOne;
	});
}

function lessThanFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) < options.valueOne;
	});
}

function lessOrEqualFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) <= options.valueOne;
	});
}

function betweenFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) > options.valueOne && obj[options.attribute] < options.valueTwo;
	});
}

function betweenInclusiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) >= options.valueOne && obj[options.attribute] <= options.valueTwo;
	});
}

function containsFilter(options) {
	return options.dataSource.filter(function(obj) {
		return options.valueOne.indexOf(getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey)) !== -1;
	});
}

function getValueByType(value, dataType) {
	if (typeof value == 'undefined') {
		return value;
	}

	switch (dataType) {
		case 'string':
			return value.toString();
		case 'number':
			return parseFloat(value);
		default:
			return value;
	}
}

function getMergedValue(row, attribute, editedValues, uniqueRowKey) {
	var editedRow = editedValues[row[uniqueRowKey]];

	return typeof editedRow == 'undefined' || typeof editedRow[attribute] == 'undefined' ? row[attribute] : editedRow[attribute];
}

function cloneObject(obj) {
	return JSON.parse(JSON.stringify(obj));
}

module.exports = {
	defaultComparator: defaultComparator,
	filterData: filterData,
	getValueByType: getValueByType,
	cloneObject: cloneObject
};
},{}],30:[function(require,module,exports){
'use strict';

function indexOfElement(element) {
	var collection = element.parentNode.childNodes;

	for (var i = 0; i < collection.length; i++) {
		if (collection[i] === element) {
			return i;
		}
	}

	return -1;
}

function findParentNode(child, selector) {
	if (child.parentNode === null) {
		return null;
	} else if (child.parentNode.matches(selector)) {
		return child.parentNode;
	}

	return findParentNode(child.parentNode, selector);
}

function getRowNumber(config, cellNode) {
	return indexOfElement(cellNode.parentNode) + config.inner.topCellOffset;
}

function getColumnNumber(config, cellNode) {
	return indexOfElement(cellNode) - 1 + config.inner.leftCellOffset;
}

function isEllipsisActive(element) {
	return element.offsetWidth < element.scrollWidth;
}

function isOverflown(element) {
	return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}

module.exports = {
	indexOfElement: indexOfElement,
	findParentNode: findParentNode,
	getRowNumber: getRowNumber,
	getColumnNumber: getColumnNumber,
	isEllipsisActive: isEllipsisActive,
	isOverflown: isOverflown
};
},{}],31:[function(require,module,exports){
'use strict';

var KEY_CODES = {
	ENTER: 13,
	ESCAPE: 27
};

function getKeyCode(event) {
	return event.keyCode || event.which;
}

module.exports = {
	getKeyCode: getKeyCode,
	KEY_CODES: KEY_CODES
};
},{}],32:[function(require,module,exports){
'use strict';

var Cell       = require('../models/data/cell'),
	configUtil = require('../utils/configuration');

function getCellData(config, rowNumber, columnNumber) {
	var cellData = null,
		headerObj = configUtil.getKeyHeader(config)[columnNumber],
		uniqueRowKey = null;

	// If the index is higher than the available rows number
	if (rowNumber >= config.dataSource.length) {
		cellData = new Cell({
			key: headerObj.key,
			value: '',
			dataType: headerObj.dataType
		});
	} else {
		uniqueRowKey = config.dataSource[rowNumber][config.uniqueRowKey];
		cellData = new Cell({
			key: headerObj.key,
			value: config.dataSource[rowNumber][headerObj.key],
			dataType: headerObj.dataType,
			rowNumber: rowNumber,
			columnNumber: columnNumber
		});

		if (typeof config.inner.editedValues[uniqueRowKey] != 'undefined' &&
			typeof config.inner.editedValues[uniqueRowKey][headerObj.key] != 'undefined') {

			cellData.class = config.selectors.editedCell;
			cellData.updateValue(config.inner.editedValues[uniqueRowKey][headerObj.key]);
		}
	}

	return cellData;
}

function getFixedCellData(config, rowNumber, columnNumber) {
	var cellData = null,
		headerObj = configUtil.getFixedKeyHeader(config)[columnNumber];

	// If the index is higher than the available rows number
	if (rowNumber >= config.dataSource.length) {
		cellData = new Cell({
			key: headerObj.key,
			value: '',
			dataType: headerObj.dataType
		});
	} else {
		cellData = new Cell({
			key: headerObj.key,
			value: config.dataSource[rowNumber][headerObj.key],
			dataType: headerObj.dataType,
			rowNumber: rowNumber,
			columnNumber: columnNumber
		});
	}

	return cellData;
}

function mergeEditedValuesInRow(config, row) {
	var mergedRowData = {},
		uniqueRowKey = row[config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] == 'undefined') {
		return row;
	}

	Object.keys(row).forEach(function(key) {
		mergedRowData[key] = config.inner.editedValues[uniqueRowKey][key] || row[key];
	});

	return mergedRowData;
}

function mergeEditedValuesInDataSource(config, ds) {
	var mergedDs = [];

	ds.forEach(function(row) {
		mergedDs.push(mergeEditedValuesInRow(config, row));
	});

	return mergedDs;
}

function separateValuesInDataSource(config, mergedDs) {
	var separatedDs = [];

	mergedDs.forEach(function(mergedRow) {
		var originalRow = config.inner.originalDataSource.find(function(row) {
			return row[config.uniqueRowKey] === mergedRow[config.uniqueRowKey];
		});

		if (typeof originalRow != 'undefined') {
			separatedDs.push(originalRow);
		}
	});

	return separatedDs;
}

function storeUpdatedCellValue(config, cellData) {
	var uniqueRowKey = config.dataSource[cellData.rowNumber][config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] == 'undefined') {
		config.inner.editedValues[uniqueRowKey] = {};
	}

	config.inner.editedValues[uniqueRowKey][cellData.key] = cellData.editedValue;
}

function persistRowValues(config, row) {
	var uniqueRowKey = row[config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] != 'undefined') {
		Object.keys(config.inner.editedValues[uniqueRowKey]).forEach(function(key) {
			row[key] = config.inner.editedValues[uniqueRowKey][key];
		});

		config.inner.editedValues[uniqueRowKey] = {};
	}
}

function persistBatchValues(config) {
	config.dataSource.forEach(function(row) {
		persistRowValues(config, row);
	});
}

module.exports = {
	getCellData: getCellData,
	getFixedCellData: getFixedCellData,
	mergeEditedValuesInRow: mergeEditedValuesInRow,
	mergeEditedValuesInDataSource: mergeEditedValuesInDataSource,
	separateValuesInDataSource: separateValuesInDataSource,
	storeUpdatedCellValue: storeUpdatedCellValue,
	persistRowValues: persistRowValues,
	persistBatchValues: persistBatchValues
};
},{"../models/data/cell":5,"../utils/configuration":28}],33:[function(require,module,exports){
!function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.Class=e()}(this,function(){"use strict";function t(){}var e="constructor",o="extend";return t[o]=function(t){function n(){i[e].apply(this,arguments)}var i=Object.create(this.prototype);return t.call(i,this.prototype),n.prototype=i,n[o]=this[o],n},t});
},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvYnJvd3Nlci5qcyIsImFwcC9kZWZhdWx0cy90b29sdGlwLmpzIiwiYXBwL2VsZW1lbnRzL2NlbGwuanMiLCJhcHAvbW9kZWxzL2Jhc2UuanMiLCJhcHAvbW9kZWxzL2RhdGEvY2VsbC5qcyIsImFwcC9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL2FmdGVyLWVkaXQuanMiLCJhcHAvbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9hZnRlci1zYXZlLmpzIiwiYXBwL21vZGVscy9ldmVudC1hcmd1bWVudHMvYmVmb3JlLWVkaXQuanMiLCJhcHAvbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9iZWZvcmUtc2F2ZS5qcyIsImFwcC9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL3NhdmUtcm93LmpzIiwiYXBwL21vZGVscy9tb2R1bGUvdmlydHVhbC1kYXRhLWdyaWQuanMiLCJhcHAvbW9kdWxlcy9jb25maWd1cmF0aW9uLmpzIiwiYXBwL21vZHVsZXMvZG9tLmpzIiwiYXBwL21vZHVsZXMvZWRpdC5qcyIsImFwcC9tb2R1bGVzL2V2ZW50LWhhbmRsZXIuanMiLCJhcHAvbW9kdWxlcy9maWx0ZXIuanMiLCJhcHAvbW9kdWxlcy9nZW5lcmF0b3IuanMiLCJhcHAvbW9kdWxlcy9yZXNpemUuanMiLCJhcHAvbW9kdWxlcy9zb3J0LmpzIiwiYXBwL21vZHVsZXMvdG9vbHRpcC5qcyIsImFwcC9wb2xseWZpbGxzL0FycmF5LmZpbmQuanMiLCJhcHAvcG9sbHlmaWxscy9FbGVtZW50Lm1hdGNoZXMuanMiLCJhcHAvcG9sbHlmaWxscy9FbGVtZW50LnJlbW92ZS5qcyIsImFwcC9wb2xseWZpbGxzL05vZGVMaXN0LmZvckVhY2guanMiLCJhcHAvcG9sbHlmaWxscy9PYmplY3QuYXNzaWduLmpzIiwiYXBwL3V0aWxzL2NvbmZpZ3VyYXRpb24uanMiLCJhcHAvdXRpbHMvZGF0YS5qcyIsImFwcC91dGlscy9kb20uanMiLCJhcHAvdXRpbHMva2V5Ym9hcmQuanMiLCJhcHAvdXRpbHMvdGFibGUuanMiLCJub2RlX21vZHVsZXMvY2xhc3MtMjU2LmpzL2Rpc3QvY2xhc3MudW1kLm1pbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SUEiLCJmaWxlIjoidmlydHVhbC1kYXRhLWdyaWQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XHJcblxyXG5yZXF1aXJlKCcuL3BvbGx5ZmlsbHMvQXJyYXkuZmluZC5qcycpO3JlcXVpcmUoJy4vcG9sbHlmaWxscy9FbGVtZW50Lm1hdGNoZXMuanMnKTtyZXF1aXJlKCcuL3BvbGx5ZmlsbHMvRWxlbWVudC5yZW1vdmUuanMnKTtyZXF1aXJlKCcuL3BvbGx5ZmlsbHMvTm9kZUxpc3QuZm9yRWFjaC5qcycpO3JlcXVpcmUoJy4vcG9sbHlmaWxscy9PYmplY3QuYXNzaWduLmpzJyk7XHJcblxyXG52YXIgVmlydHVhbERhdGFHcmlkID0gcmVxdWlyZSgnLi9tb2RlbHMvbW9kdWxlL3ZpcnR1YWwtZGF0YS1ncmlkJyk7XHJcblxyXG53aW5kb3cuVmlydHVhbERhdGFHcmlkID0gVmlydHVhbERhdGFHcmlkOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmZ1bmN0aW9uIGludm9rZUZuKG5hbWUsIHBhcmFtMSwgcGFyYW0yKSB7XHJcblx0aWYgKHR5cGVvZiB3aW5kb3cudGxpdGUgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHdpbmRvdy50bGl0ZVtuYW1lXShwYXJhbTEsIHBhcmFtMik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3cob3B0aW9ucykge1xyXG5cdHN3aXRjaCAob3B0aW9ucy50eXBlKSB7XHJcblx0XHRjYXNlICdpbmZvJzpcclxuXHRcdFx0c2hvd0luZm8ob3B0aW9ucyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnd2Fybic6XHJcblx0XHRcdHNob3dXYXJuKG9wdGlvbnMpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2Vycm9yJzpcclxuXHRcdFx0c2hvd0Vycm9yKG9wdGlvbnMpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdHNob3dJbmZvKG9wdGlvbnMpO1xyXG5cdFx0XHRicmVhaztcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGUoZWxlbWVudCkge1xyXG5cdGludm9rZUZuKCdoaWRlJywgZWxlbWVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVBbGwoKSB7XHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRsaXRlJykuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0aGlkZShlbC5wYXJlbnROb2RlKTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0luZm8ob3B0aW9ucykge1xyXG5cdHZhciBvcmllbnRhdGlvbiA9ICdzJztcclxuXHJcblx0aWYgKG9wdGlvbnMuZWxlbWVudC5tYXRjaGVzKCcuaGVhZGVyLWNlbGwnKSkge1xyXG5cdFx0b3JpZW50YXRpb24gPSAnbic7XHJcblx0fVxyXG5cclxuXHRpbnZva2VGbignc2hvdycsIG9wdGlvbnMuZWxlbWVudCwgeyBncmF2OiBvcmllbnRhdGlvbiB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1dhcm4ob3B0aW9ucykge1xyXG5cdGludm9rZUZuKCdzaG93Jywgb3B0aW9ucy5lbGVtZW50KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0Vycm9yKG9wdGlvbnMpIHtcclxuXHRpbnZva2VGbignc2hvdycsIG9wdGlvbnMuZWxlbWVudCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdHNob3c6IHNob3csXHJcblx0aGlkZTogaGlkZSxcclxuXHRoaWRlQWxsOiBoaWRlQWxsLFxyXG5cdHNob3dJbmZvOiBzaG93SW5mbyxcclxuXHRzaG93V2Fybjogc2hvd1dhcm4sXHJcblx0c2hvd0Vycm9yOiBzaG93RXJyb3JcclxufTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250YWluZXIoY29uZmlnLCBjZWxsTm9kZSwgZGF0YSkge1xuXHR2YXIgZGF0YUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuXHRcdG1heEhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxIZWlnaHQgLSBjb25maWcuZGltZW5zaW9ucy5jZWxsQm9yZGVyV2lkdGggLSBjb25maWcuZGltZW5zaW9ucy5jZWxsUGFkZGluZ1ZlcnRpY2FsICogMjtcblxuXHRkYXRhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5jZWxsRGF0YUNvbnRhaW5lcik7XG5cdGRhdGFDb250YWluZXIuc3R5bGUubWluV2lkdGggPSBjb25maWcuZGltZW5zaW9ucy5jZWxsV2lkdGggKyAncHgnO1xuXHRkYXRhQ29udGFpbmVyLnN0eWxlLm1heEhlaWdodCA9IG1heEhlaWdodCArICdweCc7XG5cdGRhdGFDb250YWluZXIuc3R5bGUucGFkZGluZyA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxQYWRkaW5nVmVydGljYWwgKyAncHggJyArIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxQYWRkaW5nSG9yaXpvbnRhbCArICdweCc7XG5cblx0Y2VsbE5vZGUuYXBwZW5kQ2hpbGQoZGF0YUNvbnRhaW5lcik7XG5cblx0aWYgKHR5cGVvZiBkYXRhICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0dXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGxOb2RlLCBkYXRhKTtcblx0fVxuXG5cdHJldHVybiBkYXRhQ29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJEYXRhKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxPYmosIGlzTGFzdFJvdykge1xuXHR2YXIgaW5uZXJIVE1MID0gJycsXG5cdFx0Y29sdW1uVGV4dCA9IGNlbGxPYmoudGV4dCB8fCBjZWxsT2JqLmtleSB8fCAnJztcblxuXHRpZiAoY29uZmlnLnNvcnQuZW5hYmxlZCAmJiAhY2VsbE9iai5zb3J0RGlzYWJsZWQgJiYgaXNMYXN0Um93KSB7XG5cdFx0dmFyIGF0dHJpYnV0ZSA9IGNlbGxPYmoua2V5LFxuXHRcdFx0ZGlyZWN0aW9uID0gdHlwZW9mIGF0dHJpYnV0ZSAhPSAndW5kZWZpbmVkJyAmJiBjb25maWcuaW5uZXIuc29ydC5hdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZSA/IGNvbmZpZy5pbm5lci5zb3J0LmRpcmVjdGlvbiA6ICdub25lJyxcblx0XHRcdGlzU29ydGVkID0gZGlyZWN0aW9uICE9PSAnbm9uZScsXG5cdFx0XHRpY29uQ2xhc3MgPSBkaXJlY3Rpb24gPT09ICdkb3duJyA/IGNvbmZpZy5pbm5lci5pY29ucy5zb3J0LmFzYyA6IGNvbmZpZy5pbm5lci5pY29ucy5zb3J0LmRlc2MsXG5cdFx0XHRpY29uRWxlbWVudENsYXNzID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0SWNvbiArIChpc1NvcnRlZCA/ICcgJyArIGljb25DbGFzcyA6ICcgaGlkZGVuJyk7XG5cblx0XHRpbm5lckhUTUwgKz0gJzxpIGNsYXNzPVwiJyArIGljb25FbGVtZW50Q2xhc3MgKyAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7XG5cblx0XHRjZWxsTm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJywgYXR0cmlidXRlKTtcblx0fVxuXG5cdGlubmVySFRNTCArPSBjb2x1bW5UZXh0O1xuXG5cdHJldHVybiBpbm5lckhUTUw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbHRlckRhdGEoY29uZmlnLCBjZWxsTm9kZSwgY2VsbE9iaiwgZmlsdGVyT2JqKSB7XG5cdHZhciBpbm5lckhUTUwgPSAnJyxcblx0XHRpY29uQ2xhc3MgPSBjb25maWcuaW5uZXIuaWNvbnMuZmlsdGVyLnNlYXJjaCxcblx0XHRpY29uRWxlbWVudENsYXNzID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJTZWFyY2hJY29uICsgJyAnICsgaWNvbkNsYXNzLFxuXHRcdGNsZWFySWNvbkNsYXNzID0gY29uZmlnLmlubmVyLmljb25zLmZpbHRlci5jbGVhcixcblx0XHRjbGVhckljb25FbGVtZW50Q2xhc3MgPSBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckNsZWFySWNvbiArICcgJyArIGNsZWFySWNvbkNsYXNzO1xuXG5cdGlmICghY2VsbE9iai5maWx0ZXJEaXNhYmxlZCkge1xuXHRcdGlubmVySFRNTCArPSAnPGkgY2xhc3M9XCInICsgaWNvbkVsZW1lbnRDbGFzcyArICdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+Jztcblx0XHRpbm5lckhUTUwgKz0gZmlsdGVyT2JqLnZhbHVlIHx8ICcnO1xuXG5cdFx0aWYgKHR5cGVvZiBmaWx0ZXJPYmoudmFsdWUgIT0gJ3VuZGVmaW5lZCcgJiYgZmlsdGVyT2JqLnZhbHVlICE9PSAnJykge1xuXHRcdFx0aW5uZXJIVE1MICs9ICc8aSBjbGFzcz1cIicgKyBjbGVhckljb25FbGVtZW50Q2xhc3MgKyAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGlubmVySFRNTDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGxOb2RlLCBkYXRhKSB7XG5cdHZhciBkYXRhQ29udGFpbmVyID0gY2VsbE5vZGUucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmNlbGxEYXRhQ29udGFpbmVyKTtcblxuXHRpZiAodHlwZW9mIGRhdGEgPT0gJ3VuZGVmaW5lZCcgfHwgZGF0YSA9PT0gbnVsbCkge1xuXHRcdGRhdGFDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cdFx0Y2VsbE5vZGUudGl0bGUgPSAnJztcblx0fSBlbHNlIGlmIChkYXRhLm5vZGVUeXBlKSB7IC8vIElmIGl0cyBhbiBFbGVtZW50IG9iamVjdFxuXHRcdGRhdGFDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cdFx0ZGF0YUNvbnRhaW5lci5hcHBlbmRDaGlsZChkYXRhKTtcblx0XHRjZWxsTm9kZS50aXRsZSA9IGRhdGEudGV4dENvbnRlbnQ7XG5cdH0gZWxzZSB7IC8vIGVsc2UganVzdCBhZGQgdG8gdGhlIGNvbnRhaW5lcnMgaW5uZXJIVE1MXG5cdFx0ZGF0YUNvbnRhaW5lci5pbm5lckhUTUwgPSBkYXRhO1xuXHRcdGNlbGxOb2RlLnRpdGxlID0gZGF0YUNvbnRhaW5lci50ZXh0Q29udGVudDtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDZWxsKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxEYXRhKSB7XG5cdHVwZGF0ZURhdGFDb250YWluZXIoY29uZmlnLCBjZWxsTm9kZSwgY2VsbERhdGEuZ2V0VmFsdWUoKSk7XG5cblx0Y2VsbE5vZGUuY2xhc3NOYW1lID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCArICcgJyArIChjZWxsRGF0YS5jbGFzcyB8fCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjcmVhdGVEYXRhQ29udGFpbmVyOiBjcmVhdGVEYXRhQ29udGFpbmVyLFxuXHRjcmVhdGVIZWFkZXJEYXRhOiBjcmVhdGVIZWFkZXJEYXRhLFxuXHRjcmVhdGVGaWx0ZXJEYXRhOiBjcmVhdGVGaWx0ZXJEYXRhLFxuXHR1cGRhdGVEYXRhQ29udGFpbmVyOiB1cGRhdGVEYXRhQ29udGFpbmVyLFxuXHR1cGRhdGVDZWxsOiB1cGRhdGVDZWxsXG59OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBDbGFzcyA9IHJlcXVpcmUoJ2NsYXNzLTI1Ni5qcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDbGFzcy5leHRlbmQoZnVuY3Rpb24oKSB7XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRzZWxmLmNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYXR0cmlidXRlcywgcGFyYW1zKSB7XHJcblx0XHRpZiAodHlwZW9mIGF0dHJpYnV0ZXMgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbihhdHRyKSB7XHJcblx0XHRcdHNlbGZbYXR0cl0gPSB0eXBlb2YgcGFyYW1zID09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBwYXJhbXNbYXR0cl0gPT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcGFyYW1zW2F0dHJdO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0dGhpcy51cGRhdGVBdHRyaWJ1dGVzID0gZnVuY3Rpb24oYXR0cnMpIHtcclxuXHRcdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBhdHRyc1trXSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc2VsZltrXSAhPSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdHNlbGZba10gPSBhdHRyc1trXTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZnVuY3Rpb24gQ2VsbE9iamVjdChwKSB7XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRpbml0QXR0cigna2V5Jyk7XHJcblx0aW5pdEF0dHIoJ3ZhbHVlJyk7XHJcblx0aW5pdEF0dHIoJ2RhdGFUeXBlJyk7XHJcblx0aW5pdEF0dHIoJ2VkaXRlZFZhbHVlJyk7XHJcblx0aW5pdEF0dHIoJ2NsYXNzJyk7XHJcblx0aW5pdEF0dHIoJ3Jvd051bWJlcicpO1xyXG5cdGluaXRBdHRyKCdjb2x1bW5OdW1iZXInKTtcclxuXHJcblx0ZnVuY3Rpb24gaW5pdEF0dHIobmFtZSkge1xyXG5cdFx0c2VsZltuYW1lXSA9IHR5cGVvZiBwID09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBwW25hbWVdID09ICd1bmRlZmluZWQnID8gbnVsbCA6IHBbbmFtZV07XHJcblx0fVxyXG5cclxuXHR0aGlzLnVwZGF0ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbihhdHRycykge1xyXG5cdFx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24oaykge1xyXG5cdFx0XHRpZiAodHlwZW9mIGF0dHJzW2tdICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzZWxmW2tdICE9ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0c2VsZltrXSA9IGF0dHJzW2tdO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHR0aGlzLmdldFZhbHVlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2VsZi5jZWxsQ2hhbmdlZCA/IHNlbGYuZWRpdGVkVmFsdWUgOiBzZWxmLnZhbHVlO1xyXG5cdH07XHJcblxyXG5cdHRoaXMudXBkYXRlVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG5cdFx0aWYgKHNlbGYuZGF0YVR5cGUgPT09ICdudW1iZXInKSB7XHJcblx0XHRcdHZhbHVlID0gaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpID8gMCA6IHBhcnNlRmxvYXQodmFsdWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChzZWxmLnZhbHVlID09PSB2YWx1ZSB8fCBzZWxmLnZhbHVlID09PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRzZWxmLmVkaXRlZFZhbHVlID0gbnVsbDtcclxuXHRcdFx0c2VsZi5jZWxsQ2hhbmdlZCA9IGZhbHNlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2VsZi5lZGl0ZWRWYWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHRzZWxmLmNlbGxDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHR0aGlzLmRpc2NhcmRDaGFuZ2VkVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHNlbGYuZWRpdGVkVmFsdWUgPSBudWxsO1xyXG5cdH07XHJcblxyXG5cdHRoaXMuaXNDZWxsQ2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNlbGYuY2VsbENoYW5nZWQ7XHJcblx0fTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDZWxsT2JqZWN0OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBCYXNlQ2xhc3MgPSByZXF1aXJlKCcuLi9iYXNlJyk7XHJcblxyXG52YXIgQVRUUklCVVRFUyA9IFtcclxuXHQnY2VsbE5vZGUnLFxyXG5cdCdjZWxsRGF0YSdcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmFzZUNsYXNzLmV4dGVuZChmdW5jdGlvbihwYXJlbnQpIHtcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHNlbGYuY29uc3RydWN0b3IgPSBmdW5jdGlvbihwYXJhbXMpIHtcclxuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XHJcblx0fTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEJhc2VDbGFzcyA9IHJlcXVpcmUoJy4uL2Jhc2UnKTtcclxuXHJcbnZhciBBVFRSSUJVVEVTID0gW1xyXG5cdCdzYXZlZFJvd3MnXHJcbl07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDbGFzcy5leHRlbmQoZnVuY3Rpb24ocGFyZW50KSB7XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRzZWxmLmNvbnN0cnVjdG9yID0gZnVuY3Rpb24ocGFyYW1zKSB7XHJcblx0XHRwYXJlbnQuY29uc3RydWN0b3IuY2FsbChzZWxmLCBBVFRSSUJVVEVTLCBwYXJhbXMpO1xyXG5cdH07XHJcbn0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBCYXNlQ2xhc3MgPSByZXF1aXJlKCcuLi9iYXNlJyk7XHJcblxyXG52YXIgQVRUUklCVVRFUyA9IFtcclxuXHQnY2VsbE5vZGUnLFxyXG5cdCdjZWxsRGF0YScsXHJcblx0J2NhbmNlbEV2ZW50J1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ2xhc3MuZXh0ZW5kKGZ1bmN0aW9uKHBhcmVudCkge1xyXG5cdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0c2VsZi5jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG5cdFx0cGFyZW50LmNvbnN0cnVjdG9yLmNhbGwoc2VsZiwgQVRUUklCVVRFUywgcGFyYW1zKTtcclxuXHR9O1xyXG59KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgQmFzZUNsYXNzID0gcmVxdWlyZSgnLi4vYmFzZScpO1xyXG5cclxudmFyIEFUVFJJQlVURVMgPSBbXHJcblx0J2VkaXRlZFJvd3MnLFxyXG5cdCdjYW5jZWxFdmVudCdcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmFzZUNsYXNzLmV4dGVuZChmdW5jdGlvbihwYXJlbnQpIHtcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHNlbGYuY29uc3RydWN0b3IgPSBmdW5jdGlvbihwYXJhbXMpIHtcclxuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XHJcblx0fTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEJhc2VDbGFzcyA9IHJlcXVpcmUoJy4uL2Jhc2UnKTtcclxuXHJcbnZhciBBVFRSSUJVVEVTID0gW1xyXG5cdCdlZGl0ZWRSb3cnLFxyXG5cdCdjYW5jZWxFdmVudCdcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmFzZUNsYXNzLmV4dGVuZChmdW5jdGlvbihwYXJlbnQpIHtcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHNlbGYuY29uc3RydWN0b3IgPSBmdW5jdGlvbihwYXJhbXMpIHtcclxuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XHJcblx0fTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGdlbmVyYXRvciA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZ2VuZXJhdG9yJyk7XHJcblxyXG52YXIgdW5pcXVlSWRTZXF1ZW5jZSA9IDE7XHJcblxyXG5mdW5jdGlvbiBWaXJ0dWFsRGF0YUdyaWQoKSB7XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRzZWxmLmNvbmZpZ3VyYXRpb24gPSB7fTtcclxuXHRzZWxmLnVuaXF1ZUlkID0gdW5pcXVlSWRTZXF1ZW5jZSsrO1xyXG5cdHNlbGYuREVGQVVMVF9PUFRJT05TID0gZ2VuZXJhdG9yLmdldERlZmF1bHRPcHRpb25zKCk7XHJcblx0c2VsZi5nZW5lcmF0ZVRhYmxlID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cdFx0b3B0aW9ucy51bmlxdWVJZCA9IHNlbGYudW5pcXVlSWQ7XHJcblxyXG5cdFx0Z2VuZXJhdG9yLmdlbmVyYXRlVGFibGUoc2VsZi5jb25maWd1cmF0aW9uLCBvcHRpb25zKTtcclxuXHR9O1xyXG5cdHNlbGYuZGVzdHJveVRhYmxlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRnZW5lcmF0b3IuZGVzdHJveVRhYmxlKHNlbGYuY29uZmlndXJhdGlvbik7XHJcblx0fTtcclxuXHRzZWxmLmdldElkID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2VsZi51bmlxdWVJZDtcclxuXHR9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFZpcnR1YWxEYXRhR3JpZDsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgY29uZmlnVXRpbCAgICAgPSByZXF1aXJlKCcuLi91dGlscy9jb25maWd1cmF0aW9uJyksXHJcblx0ZGF0YVV0aWwgICAgICAgPSByZXF1aXJlKCcuLi91dGlscy9kYXRhJyksXHJcblx0dG9vbHRpcERlZmF1bHQgPSByZXF1aXJlKCcuLi9kZWZhdWx0cy90b29sdGlwJyk7XHJcblxyXG52YXIgREVGQVVMVFMgPSB7XHJcblx0c2VsZWN0b3JzOiB7XHJcblx0XHRtYWluQ29udGFpbmVyOiAnLmRhdGEtY29udGFpbmVyJyxcclxuXHRcdGZpeGVkQ29udGFpbmVyOiAnZml4ZWQtY29udGFpbmVyJyxcclxuXHRcdGZpeGVkVGFibGU6ICdmaXhlZC10YWJsZScsXHJcblx0XHR2aXJ0dWFsQ29udGFpbmVyOiAndmlydHVhbC1jb250YWluZXInLFxyXG5cdFx0dmlydHVhbFRhYmxlOiAndmlydHVhbC10YWJsZScsXHJcblx0XHRlZGl0aW5nQ2VsbDogJ2VkaXRpbmctY2VsbCcsXHJcblx0XHRlZGl0ZWRDZWxsOiAnZWRpdGVkLWNlbGwnLFxyXG5cdFx0c2F2ZUJ1dHRvbjogbnVsbFxyXG5cdH0sXHJcblx0ZGltZW5zaW9uczoge1xyXG5cdFx0Y2VsbFdpZHRoOiAxNTAsXHJcblx0XHRjZWxsSGVpZ2h0OiA1MCxcclxuXHRcdGNlbGxQYWRkaW5nVmVydGljYWw6IDQsXHJcblx0XHRjZWxsUGFkZGluZ0hvcml6b250YWw6IDgsXHJcblx0XHRjZWxsQm9yZGVyV2lkdGg6IDEsXHJcblx0XHRjb250YWluZXJIZWlnaHQ6IGNvbmZpZ1V0aWwuZ2V0RGVmYXVsdENvbnRhaW5lckhlaWdodFxyXG5cdH0sXHJcblx0ZWRpdDoge1xyXG5cdFx0ZW5hYmxlZDogZmFsc2UsXHJcblx0XHRtb2RlOiAnYmF0Y2gnXHJcblx0fSxcclxuXHRmaWx0ZXI6IHtcclxuXHRcdGVuYWJsZWQ6IGZhbHNlLFxyXG5cdFx0Y3VzdG9tRmlsdGVyOiBudWxsXHJcblx0fSxcclxuXHRzb3J0OiB7XHJcblx0XHRlbmFibGVkOiBmYWxzZSxcclxuXHRcdGRlZmF1bHQ6IGNvbmZpZ1V0aWwuZ2V0U29ydERlZmF1bHQsXHJcblx0XHRjdXN0b21Tb3J0OiBudWxsXHJcblx0fSxcclxuXHRldmVudEhhbmRsZXJzOiB7XHJcblx0XHRvbkJlZm9yZUVkaXQ6IGNvbmZpZ1V0aWwubmlsLFxyXG5cdFx0b25WYWxpZGF0aW9uOiBjb25maWdVdGlsLm5pbCxcclxuXHRcdG9uQWZ0ZXJFZGl0OiBjb25maWdVdGlsLm5pbCxcclxuXHRcdG9uQmVmb3JlU2F2ZTogY29uZmlnVXRpbC5uaWwsXHJcblx0XHRvblNhdmVSb3c6IGNvbmZpZ1V0aWwubmlsLFxyXG5cdFx0b25TYXZlQmF0Y2g6IGNvbmZpZ1V0aWwubmlsLFxyXG5cdFx0b25BZnRlclNhdmU6IGNvbmZpZ1V0aWwubmlsXHJcblx0fSxcclxuXHRsb2NhbGU6IHtcclxuXHRcdG5hbWU6ICdlbidcclxuXHR9LFxyXG5cdGRhdGFTb3VyY2U6IFsgXSxcclxuXHRoZWFkZXJzOiBbIFsgXSBdLFxyXG5cdGZpeGVkSGVhZGVyczogWyBbIF0gXSxcclxuXHR1bmlxdWVSb3dLZXk6ICdfX3VuaXF1ZVJvd0tleScsXHJcblx0YXV0b1Jlc2l6ZTogdHJ1ZSxcclxuXHRkZWJ1ZzogZmFsc2UsXHJcblx0dW5pcXVlSWQ6IDAsXHJcblx0bW9kdWxlczoge1xyXG5cdFx0dG9vbHRpcDoge1xyXG5cdFx0XHRlbmFibGVkOiB0cnVlLFxyXG5cdFx0XHRzaG93OiBjb25maWdVdGlsLndyYXBwZXIodG9vbHRpcERlZmF1bHQuc2hvdyksXHJcblx0XHRcdGhpZGU6IGNvbmZpZ1V0aWwud3JhcHBlcih0b29sdGlwRGVmYXVsdC5oaWRlKSxcclxuXHRcdFx0aGlkZUFsbDogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LmhpZGVBbGwpLFxyXG5cdFx0XHRzaG93SW5mbzogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LnNob3dJbmZvKSxcclxuXHRcdFx0c2hvd1dhcm46IGNvbmZpZ1V0aWwud3JhcHBlcih0b29sdGlwRGVmYXVsdC5zaG93V2FybiksXHJcblx0XHRcdHNob3dFcnJvcjogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LnNob3dFcnJvcilcclxuXHRcdH1cclxuXHR9LFxyXG5cdGlubmVyOiB7fVxyXG59O1xyXG5cclxudmFyIEhFQURFUl9ERUZBVUxUUyA9IHtcclxuXHRkYXRhVHlwZTogJ3RleHQnLFxyXG5cdGZpbHRlclR5cGU6ICdlcXVhbHMnLFxyXG5cdGZpbHRlckRpc2FibGVkOiBmYWxzZSxcclxuXHRzb3J0RGlzYWJsZWQ6IGZhbHNlXHJcbn07XHJcblxyXG52YXIgU1RBVElDX0lOTkVSX0FUVFJTID0ge1xyXG5cdHNlbGVjdG9yczoge1xyXG5cdFx0dW5pcXVlSWRQcmVmaXg6ICd2aXJ0dWFsLWRhdGEtZ3JpZC0nLFxyXG5cdFx0YnVmZmVyUm93VG9wOiAnYnVmZmVyLXJvdy10b3AnLFxyXG5cdFx0YnVmZmVyUm93Qm90dG9tOiAnYnVmZmVyLXJvdy1ib3R0b20nLFxyXG5cdFx0YnVmZmVyQ29sdW1uTGVmdDogJ2J1ZmZlci1jb2x1bW4tbGVmdCcsXHJcblx0XHRidWZmZXJDb2x1bW5SaWdodDogJ2J1ZmZlci1jb2x1bW4tcmlnaHQnLFxyXG5cdFx0aGVhZGVyUm93OiAnaGVhZGVyLXJvdycsXHJcblx0XHRoZWFkZXJDZWxsOiAnaGVhZGVyLWNlbGwnLFxyXG5cdFx0c29ydENlbGw6ICdzb3J0LWNlbGwnLFxyXG5cdFx0c29ydEljb246ICdzb3J0LWljb24nLFxyXG5cdFx0c29ydERpc2FibGVkOiAnc29ydC1kaXNhYmxlZCcsXHJcblx0XHRmaWx0ZXJSb3c6ICdmaWx0ZXItcm93JyxcclxuXHRcdGZpbHRlckNlbGw6ICdmaWx0ZXItY2VsbCcsXHJcblx0XHRmaWx0ZXJEaXNhYmxlZDogJ2ZpbHRlci1kaXNhYmxlZCcsXHJcblx0XHRmaWx0ZXJDb250YWluZXI6ICdmaWx0ZXItY29udGFpbmVyJyxcclxuXHRcdGZpbHRlclNlYXJjaEljb246ICdmaWx0ZXItc2VhcmNoLWljb24nLFxyXG5cdFx0ZmlsdGVyQ2xlYXJJY29uOiAnZmlsdGVyLWNsZWFyLWljb24nLFxyXG5cdFx0ZGF0YVJvdzogJ2RhdGEtcm93JyxcclxuXHRcdGRhdGFDZWxsOiAnZGF0YS1jZWxsJyxcclxuXHRcdGNlbGxEYXRhQ29udGFpbmVyOiAnY2VsbC1kYXRhLWNvbnRhaW5lcidcclxuXHR9LFxyXG5cdGRpbWVuc2lvbnM6IHt9LFxyXG5cdGljb25zOiB7XHJcblx0XHRzb3J0OiB7XHJcblx0XHRcdGFzYzogJ2ZhIGZhLWFycm93LWRvd24nLFxyXG5cdFx0XHRkZXNjOiAnZmEgZmEtYXJyb3ctdXAnXHJcblx0XHR9LFxyXG5cdFx0ZmlsdGVyOiB7XHJcblx0XHRcdHNlYXJjaDogJ2ZhIGZhLXNlYXJjaCcsXHJcblx0XHRcdGNsZWFyOiAnZmEgZmEtdGltZXMnXHJcblx0XHR9XHJcblx0fSxcclxuXHRlZGl0ZWRWYWx1ZXM6IHt9LFxyXG5cdHNvcnQ6IHsgfSxcclxuXHRmaWx0ZXJzOiB7IH0sXHJcblx0bWluQnVmZmVyV2lkdGg6IDIsXHJcblx0bWluQnVmZmVySGVpZ2h0OiAxOCwgLy8gQXrDqXJ0IHZhbiByw6Egc3rDvGtzw6lnLCBtZXJ0IGhhIG5pbmNzIG1lZ2FkdmEsIGFra29yIHVncmlrIGVneWV0dCBhIHNjcm9sbCBoYSBhIHbDqWfDqXJlIHZhZ3kgYXogZWxlasOpcmUgw6lydMO8bmsgYSB0w6FibMOhemF0YmFuXHJcblx0bGVmdENlbGxPZmZzZXQ6IDAsXHJcblx0dG9wQ2VsbE9mZnNldDogMFxyXG59O1xyXG5cclxuZnVuY3Rpb24gaW5pdChjb25maWcsIG9wdGlvbnMpIHtcclxuXHRpbml0Q29uZmlnT2JqZWN0KGNvbmZpZyk7XHJcblxyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5tYWluQ29udGFpbmVyJyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc2VsZWN0b3JzLmZpeGVkQ29udGFpbmVyJyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc2VsZWN0b3JzLmZpeGVkVGFibGUnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzZWxlY3RvcnMudmlydHVhbENvbnRhaW5lcicpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy52aXJ0dWFsVGFibGUnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzZWxlY3RvcnMuZWRpdGluZ0NlbGwnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzZWxlY3RvcnMuZWRpdGVkQ2VsbCcpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5zYXZlQnV0dG9uJyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZGltZW5zaW9ucy5jZWxsV2lkdGgnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkaW1lbnNpb25zLmNlbGxIZWlnaHQnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkaW1lbnNpb25zLmNlbGxQYWRkaW5nVmVydGljYWwnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkaW1lbnNpb25zLmNlbGxQYWRkaW5nSG9yaXpvbnRhbCcpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2RpbWVuc2lvbnMuY2VsbEJvcmRlcldpZHRoJyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAndW5pcXVlSWQnKTtcclxuXHJcblx0Y2FsY3VsYXRlVW5pcXVlSWRTZWxlY3Rvcihjb25maWcpO1xyXG5cdGNhbGN1bGF0ZVZpcnR1YWxDb250YWluZXJIZWlnaHQoY29uZmlnLCBvcHRpb25zKTtcclxuXHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnbG9jYWxlLm5hbWUnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkYXRhU291cmNlJyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnaGVhZGVycycpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2ZpeGVkSGVhZGVycycpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3VuaXF1ZVJvd0tleScpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2F1dG9SZXNpemUnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdlZGl0LmVuYWJsZWQnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdlZGl0Lm1vZGUnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdmaWx0ZXIuZW5hYmxlZCcpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2ZpbHRlci5jdXN0b21GaWx0ZXInKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzb3J0LmVuYWJsZWQnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzb3J0LmRlZmF1bHQnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzb3J0LmN1c3RvbVNvcnQnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkZWJ1ZycpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2V2ZW50SGFuZGxlcnMub25CZWZvcmVFZGl0Jyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZXZlbnRIYW5kbGVycy5vblZhbGlkYXRpb24nKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdldmVudEhhbmRsZXJzLm9uQWZ0ZXJFZGl0Jyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZXZlbnRIYW5kbGVycy5vbkJlZm9yZVNhdmUnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdldmVudEhhbmRsZXJzLm9uU2F2ZVJvdycpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2V2ZW50SGFuZGxlcnMub25TYXZlQmF0Y2gnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdldmVudEhhbmRsZXJzLm9uQWZ0ZXJTYXZlJyk7XHJcblxyXG5cdC8vIFRvb2x0aXAgbW9kdWxlXHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnbW9kdWxlcy50b29sdGlwLmVuYWJsZWQnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdtb2R1bGVzLnRvb2x0aXAuc2hvdycpO1xyXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ21vZHVsZXMudG9vbHRpcC5oaWRlJyk7XHJcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnbW9kdWxlcy50b29sdGlwLmhpZGVBbGwnKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdtb2R1bGVzLnRvb2x0aXAuc2hvd0luZm8nKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdtb2R1bGVzLnRvb2x0aXAuc2hvd1dhcm4nKTtcclxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdtb2R1bGVzLnRvb2x0aXAuc2hvd0Vycm9yJyk7XHJcblxyXG5cdGluaXRIZWFkZXJEYXRhKGNvbmZpZyk7XHJcblx0aW5pdERhdGFTb3VyY2UoY29uZmlnLCBvcHRpb25zLnVuaXF1ZVJvd0tleSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRDb25maWdPYmplY3QoY29uZmlnKSB7XHJcblx0Y29uZmlnLnNlbGVjdG9ycyA9IHt9O1xyXG5cdGNvbmZpZy5ldmVudEhhbmRsZXJzID0ge307XHJcblx0Y29uZmlnLmxvY2FsZSA9IHt9O1xyXG5cdGNvbmZpZy5pbm5lciA9IGRhdGFVdGlsLmNsb25lT2JqZWN0KFNUQVRJQ19JTk5FUl9BVFRSUyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVVuaXF1ZUlkU2VsZWN0b3IoY29uZmlnKSB7XHJcblx0Y29uZmlnLmlubmVyLnNlbGVjdG9ycy51bmlxdWVJZCA9IGNvbmZpZy5pbm5lci5zZWxlY3RvcnMudW5pcXVlSWRQcmVmaXggKyBjb25maWcudW5pcXVlSWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVZpcnR1YWxDb250YWluZXJIZWlnaHQoY29uZmlnLCBvcHRpb25zKSB7XHJcblx0dmFyIGNvbnRhaW5lckhlaWdodCA9IGdldElubmVyVmFsdWUob3B0aW9ucywgJ2RpbWVuc2lvbnMuY29udGFpbmVySGVpZ2h0Jyk7XHJcblxyXG5cdGlmICh0eXBlb2YgY29udGFpbmVySGVpZ2h0ID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRjb250YWluZXJIZWlnaHQgPSBjb25maWdVdGlsLmdldERlZmF1bHRDb250YWluZXJIZWlnaHQoY29uZmlnKTtcclxuXHR9XHJcblxyXG5cdGNvbmZpZy5kaW1lbnNpb25zLmNvbnRhaW5lckhlaWdodCA9IGNvbmZpZ1V0aWwuY2FsY3VsYXRlVmlydHVhbENvbnRhaW5lckhlaWdodChjb25maWcsIGNvbnRhaW5lckhlaWdodCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRDYWxjdWxhdGVkVmFsdWVzKGNvbmZpZykge1xyXG5cdC8vIEFubmFrIGEgaGVhZGVyIHNvcm5hayBheiBpbmRleGUsIGFtaSBhIGNlbGxhIGt1bGNzb2thdCBpcyBtZWdoYXTDoXJvenphLiBNaXZlbCBleiBtaW5kaWcgYXogdXRvbHPDsyBsZXN6LCBlesOpcnQgVE9ETzogS2lzemVkbmkvw6F0YWxha8OtdGFuaVxyXG5cdGNvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlciA9IGNvbmZpZ1V0aWwuZ2V0SW5kZXhPZkNlbGxLZXlIZWFkZXIoY29uZmlnKTtcclxuXHRjb25maWcuaW5uZXIuY29sc3Bhbk9mZnNldCA9IGNvbmZpZ1V0aWwuZ2V0TWF4Q29sc3Bhbihjb25maWcpO1xyXG5cdGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyID0gY29uZmlnVXRpbC5nZXRWaXNpYmxlUm93TnVtYmVyKGNvbmZpZyk7XHJcblx0Y29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXIgPSBjb25maWdVdGlsLmdldFZpc2libGVDb2x1bW5OdW1iZXIoY29uZmlnKTtcclxuXHRjb25maWcuaW5uZXIudGFibGVPZmZzZXRXaWR0aCA9IGNvbmZpZ1V0aWwuZ2V0VGFibGVPZmZzZXRXaWR0aChjb25maWcpO1xyXG5cdGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCA9IGNvbmZpZ1V0aWwuZ2V0VGFibGVPZmZzZXRIZWlnaHQoY29uZmlnKTtcclxuXHRjb25maWcuaW5uZXIub3JpZ2luYWxEYXRhU291cmNlID0gW10uY29uY2F0KGNvbmZpZy5kYXRhU291cmNlKTtcclxuXHRjb25maWcuaW5uZXIuZGltZW5zaW9ucy5zY3JvbGxMaW5lSGVpZ2h0ID0gY29uZmlnVXRpbC5nZXRTY3JvbGxMaW5lSGVpZ2h0KCk7XHJcblx0Y29uZmlnLmlubmVyLmRpbWVuc2lvbnMuc2Nyb2xsUGFnZUhlaWdodCA9IGNvbmZpZ1V0aWwuZ2V0U2Nyb2xsUGFnZUhlaWdodCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0SGVhZGVyRGF0YShjb25maWcpIHtcclxuXHR2YXIgcHJvY2Vzc2VkSGVhZGVycyA9IFtdLFxyXG5cdFx0cHJvY2Vzc2VkRml4ZWRIZWFkZXJzID0gW107XHJcblxyXG5cdGNvbmZpZy5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyUm93KSB7XHJcblx0XHR2YXIgaFJvdyA9IFtdO1xyXG5cclxuXHRcdGhlYWRlclJvdy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlckNlbGwpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmRhdGFUeXBlID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0aGVhZGVyQ2VsbC5kYXRhVHlwZSA9IEhFQURFUl9ERUZBVUxUUy5kYXRhVHlwZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmZpbHRlclR5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRoZWFkZXJDZWxsLmZpbHRlclR5cGUgPSBIRUFERVJfREVGQVVMVFMuZmlsdGVyVHlwZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmZpbHRlckRpc2FibGVkID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0aGVhZGVyQ2VsbC5maWx0ZXJEaXNhYmxlZCA9IEhFQURFUl9ERUZBVUxUUy5maWx0ZXJEaXNhYmxlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLnNvcnREaXNhYmxlZCA9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdGhlYWRlckNlbGwuc29ydERpc2FibGVkID0gSEVBREVSX0RFRkFVTFRTLnNvcnREaXNhYmxlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aFJvdy5wdXNoKGhlYWRlckNlbGwpO1xyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmNvbHNwYW4gIT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IGhlYWRlckNlbGwuY29sc3BhbjsgaSsrKSB7XHJcblx0XHRcdFx0XHRoUm93LnB1c2goe30pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cHJvY2Vzc2VkSGVhZGVycy5wdXNoKGhSb3cpO1xyXG5cdH0pO1xyXG5cclxuXHRjb25maWcuZml4ZWRIZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyUm93KSB7XHJcblx0XHR2YXIgaFJvdyA9IFtdO1xyXG5cclxuXHRcdGhlYWRlclJvdy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlckNlbGwpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmRhdGFUeXBlID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0aGVhZGVyQ2VsbC5kYXRhVHlwZSA9IEhFQURFUl9ERUZBVUxUUy5kYXRhVHlwZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmZpbHRlclR5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRoZWFkZXJDZWxsLmZpbHRlclR5cGUgPSBIRUFERVJfREVGQVVMVFMuZmlsdGVyVHlwZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmZpbHRlckRpc2FibGVkID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0aGVhZGVyQ2VsbC5maWx0ZXJEaXNhYmxlZCA9IEhFQURFUl9ERUZBVUxUUy5maWx0ZXJEaXNhYmxlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLnNvcnREaXNhYmxlZCA9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdGhlYWRlckNlbGwuc29ydERpc2FibGVkID0gSEVBREVSX0RFRkFVTFRTLnNvcnREaXNhYmxlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aFJvdy5wdXNoKGhlYWRlckNlbGwpO1xyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmNvbHNwYW4gIT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IGhlYWRlckNlbGwuY29sc3BhbjsgaSsrKSB7XHJcblx0XHRcdFx0XHRoUm93LnB1c2goe30pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cHJvY2Vzc2VkRml4ZWRIZWFkZXJzLnB1c2goaFJvdyk7XHJcblx0fSk7XHJcblxyXG5cdGNvbmZpZy5oZWFkZXJzID0gcHJvY2Vzc2VkSGVhZGVycztcclxuXHRjb25maWcuZml4ZWRIZWFkZXJzID0gcHJvY2Vzc2VkRml4ZWRIZWFkZXJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0RGF0YVNvdXJjZShjb25maWcsIHVuaXF1ZVJvd0tleSkge1xyXG5cdGlmICh0eXBlb2YgdW5pcXVlUm93S2V5ID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZy5kYXRhU291cmNlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGNvbmZpZy5kYXRhU291cmNlW2ldW2NvbmZpZy51bmlxdWVSb3dLZXldID0gaTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywga2V5KSB7XHJcblx0dmFyIHRhcmdldCA9IGdldElubmVyT2JqZWN0KGNvbmZpZywga2V5KSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG5cdFx0dmFsdWUgPSBnZXRJbm5lclZhbHVlKG9wdGlvbnMsIGtleSksXHJcblx0XHRrZXlzID0ga2V5LnNwbGl0KCcuJyksXHJcblx0XHRsYXN0S2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xyXG5cclxuXHRpZiAodHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHR0YXJnZXRbbGFzdEtleV0gPSB0eXBlb2YgZ2V0SW5uZXJWYWx1ZShERUZBVUxUUywga2V5KSA9PSAnZnVuY3Rpb24nID8gZ2V0SW5uZXJWYWx1ZShERUZBVUxUUywga2V5KShjb25maWcpIDogZ2V0SW5uZXJWYWx1ZShERUZBVUxUUywga2V5KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGFyZ2V0W2xhc3RLZXldID0gdmFsdWU7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJbm5lck9iamVjdChvYmplY3QsIGtleSkge1xyXG5cdGlmIChrZXkuaW5kZXhPZignLicpID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIG9iamVjdDtcclxuXHR9XHJcblxyXG5cdHZhciBzdWJLZXkgPSBrZXkuc3BsaXQoJy4nKVswXSxcclxuXHRcdHN1Yk9iamVjdCA9IG9iamVjdFtzdWJLZXldO1xyXG5cclxuXHRpZiAodHlwZW9mIHN1Yk9iamVjdCA9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0b2JqZWN0W3N1YktleV0gPSB7fTtcclxuXHRcdHN1Yk9iamVjdCA9IG9iamVjdFtzdWJLZXldO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGdldElubmVyT2JqZWN0KHN1Yk9iamVjdCwga2V5LnN1YnN0cmluZyhrZXkuaW5kZXhPZignLicpICsgMSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJbm5lclZhbHVlKG9iamVjdCwga2V5KSB7XHJcblx0aWYgKGtleS5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gb2JqZWN0W2tleV07XHJcblx0fVxyXG5cclxuXHR2YXIgc3ViS2V5ID0ga2V5LnNwbGl0KCcuJylbMF0sXHJcblx0XHRzdWJPYmplY3QgPSBvYmplY3Rbc3ViS2V5XTtcclxuXHJcblx0aWYgKHR5cGVvZiBzdWJPYmplY3QgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdHJldHVybiBzdWJPYmplY3Q7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZ2V0SW5uZXJWYWx1ZShzdWJPYmplY3QsIGtleS5zdWJzdHJpbmcoa2V5LmluZGV4T2YoJy4nKSArIDEpKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0aW5pdDogaW5pdCxcclxuXHRpbml0Q2FsY3VsYXRlZFZhbHVlczogaW5pdENhbGN1bGF0ZWRWYWx1ZXMsXHJcblx0REVGQVVMVFM6IERFRkFVTFRTXHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIHRhYmxlVXRpbCAgID0gcmVxdWlyZSgnLi4vdXRpbHMvdGFibGUnKSxcclxuXHRjb25maWdVdGlsICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24nKSxcclxuXHRjZWxsRWxlbWVudCA9IHJlcXVpcmUoJy4uL2VsZW1lbnRzL2NlbGwnKTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRhYmxlKGNvbmZpZywgZm9yY2VVcGRhdGUpIHtcclxuXHR2YXIgY29sc3BhbiA9IDE7XHJcblxyXG5cdGlmIChjb25maWcuaW5uZXIucHJldmlvdXNMZWZ0Q2VsbE9mZnNldCA9PT0gY29uZmlnLmlubmVyLmxlZnRDZWxsT2Zmc2V0ICYmXHJcblx0XHRjb25maWcuaW5uZXIucHJldmlvdXNUb3BDZWxsT2Zmc2V0ID09PSBjb25maWcuaW5uZXIudG9wQ2VsbE9mZnNldCAmJlxyXG5cdFx0Zm9yY2VVcGRhdGUgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Y29uZmlnLmlubmVyLnByZXZpb3VzTGVmdENlbGxPZmZzZXQgPSBjb25maWcuaW5uZXIubGVmdENlbGxPZmZzZXQ7XHJcblx0Y29uZmlnLmlubmVyLnByZXZpb3VzVG9wQ2VsbE9mZnNldCA9IGNvbmZpZy5pbm5lci50b3BDZWxsT2Zmc2V0O1xyXG5cclxuXHQvLyBIZWFkZXIgY2VsbCB1cGRhdGVcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbFRhYmxlICsgJyB0ci4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5oZWFkZXJSb3cpLmZvckVhY2goZnVuY3Rpb24ocm93LCByb3dDb3VudCkge1xyXG5cdFx0cm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlckNlbGwpLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgY2VsbENvdW50KSB7XHJcblx0XHRcdHZhciBjZWxsT2JqID0gY29uZmlnLmhlYWRlcnNbcm93Q291bnRdW2NvbmZpZy5pbm5lci5sZWZ0Q2VsbE9mZnNldCArIGNlbGxDb3VudF0sXHJcblx0XHRcdFx0aXNMYXN0Um93ID0gY29uZmlnLmlubmVyLmluZGV4T2ZDZWxsS2V5SGVhZGVyID09PSByb3dDb3VudDtcclxuXHJcblx0XHRcdGlmIChjb2xzcGFuID4gMSkge1xyXG5cdFx0XHRcdGNlbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdFx0XHRjb2xzcGFuLS07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2VsbEVsZW1lbnQudXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGwsIGNlbGxFbGVtZW50LmNyZWF0ZUhlYWRlckRhdGEoY29uZmlnLCBjZWxsLCBjZWxsT2JqLCBpc0xhc3RSb3cpKTtcclxuXHJcblx0XHRcdFx0Y2VsbC5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLWNlbGwnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodHlwZW9mIGNlbGxPYmouY29sc3BhbiA9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdGNlbGwucmVtb3ZlQXR0cmlidXRlKCdjb2xzcGFuJyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGNhbGN1bGF0ZWRDb2xzcGFuID0gY29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXIgPD0gY2VsbENvdW50ICsgY2VsbE9iai5jb2xzcGFuID8gY29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXIgLSBjZWxsQ291bnQgOiBjZWxsT2JqLmNvbHNwYW47XHJcblxyXG5cdFx0XHRcdGNlbGwuc2V0QXR0cmlidXRlKCdjb2xzcGFuJywgY2FsY3VsYXRlZENvbHNwYW4pO1xyXG5cdFx0XHRcdGNvbHNwYW4gPSBjYWxjdWxhdGVkQ29sc3BhbjtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRjb2xzcGFuID0gMTtcclxuXHR9KTtcclxuXHJcblx0Ly8gRml4ZWQgaGVhZGVyIGNlbGwgdXBkYXRlXHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkVGFibGUgKyAnIHRyLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlclJvdykuZm9yRWFjaChmdW5jdGlvbihyb3csIHJvd0NvdW50KSB7XHJcblx0XHRyb3cucXVlcnlTZWxlY3RvckFsbCgndGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuaGVhZGVyQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBjZWxsQ291bnQpIHtcclxuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWcuZml4ZWRIZWFkZXJzW3Jvd0NvdW50XVtjZWxsQ291bnRdLFxyXG5cdFx0XHRcdGlzTGFzdFJvdyA9IGNvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlciA9PT0gcm93Q291bnQ7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbCwgY2VsbEVsZW1lbnQuY3JlYXRlSGVhZGVyRGF0YShjb25maWcsIGNlbGwsIGNlbGxPYmosIGlzTGFzdFJvdykpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIEZpbHRlciByb3cgdXBkYXRlXHJcblx0aWYgKGNvbmZpZy5maWx0ZXIuZW5hYmxlZCkge1xyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLnZpcnR1YWxUYWJsZSArICcgdGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBjZWxsQ291bnQpIHtcclxuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWdVdGlsLmdldEtleUhlYWRlcihjb25maWcpW2NvbmZpZy5pbm5lci5sZWZ0Q2VsbE9mZnNldCArIGNlbGxDb3VudF0sXHJcblx0XHRcdFx0ZmlsdGVyT2JqID0gY29uZmlnLmlubmVyLmZpbHRlcnNbY2VsbE9iai5rZXldIHx8IHt9LFxyXG5cdFx0XHRcdGN1cnJlbnRGaWx0ZXJBdHRyID0gY2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJyk7XHJcblxyXG5cdFx0XHRpZiAoY2VsbE9iai5rZXkgPT09IGN1cnJlbnRGaWx0ZXJBdHRyKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnLCBjZWxsT2JqLmtleSk7XHJcblx0XHRcdGNlbGwuY2xhc3NMaXN0LnRvZ2dsZShjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckRpc2FibGVkLCBjZWxsT2JqLmZpbHRlckRpc2FibGVkKTtcclxuXHJcblx0XHRcdGNlbGxFbGVtZW50LnVwZGF0ZURhdGFDb250YWluZXIoY29uZmlnLCBjZWxsLCBjZWxsRWxlbWVudC5jcmVhdGVGaWx0ZXJEYXRhKGNvbmZpZywgY2VsbCwgY2VsbE9iaiwgZmlsdGVyT2JqKSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZml4ZWRUYWJsZSArICcgdGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBjZWxsQ291bnQpIHtcclxuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWcuZml4ZWRIZWFkZXJzW2NvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlcl1bY2VsbENvdW50XSxcclxuXHRcdFx0XHRmaWx0ZXJPYmogPSBjb25maWcuaW5uZXIuZmlsdGVyc1tjZWxsT2JqLmtleV0gfHwge30sXHJcblx0XHRcdFx0Y3VycmVudEZpbHRlckF0dHIgPSBjZWxsLmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnKTtcclxuXHJcblx0XHRcdGlmIChjZWxsT2JqLmtleSA9PT0gY3VycmVudEZpbHRlckF0dHIpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLWF0dHJpYnV0ZScsIGNlbGxPYmoua2V5KTtcclxuXHRcdFx0Y2VsbC5jbGFzc0xpc3QudG9nZ2xlKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyRGlzYWJsZWQsIGNlbGxPYmouZmlsdGVyRGlzYWJsZWQpO1xyXG5cclxuXHRcdFx0Y2VsbEVsZW1lbnQudXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGwsIGNlbGxFbGVtZW50LmNyZWF0ZUZpbHRlckRhdGEoY29uZmlnLCBjZWxsLCBjZWxsT2JqLCBmaWx0ZXJPYmopKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2VsbCBkYXRhIHJvdyB1cGRhdGVcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbFRhYmxlICsgJyB0ci4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhUm93KS5mb3JFYWNoKGZ1bmN0aW9uKHJvdywgcm93TnVtYmVyKSB7XHJcblx0XHRyb3cucXVlcnlTZWxlY3RvckFsbCgndGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZGF0YUNlbGwpLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgY2VsbE51bWJlcikge1xyXG5cdFx0XHR2YXIgY2VsbERhdGEgPSB0YWJsZVV0aWwuZ2V0Q2VsbERhdGEoY29uZmlnLCBjb25maWcuaW5uZXIudG9wQ2VsbE9mZnNldCArIHJvd051bWJlciwgY29uZmlnLmlubmVyLmxlZnRDZWxsT2Zmc2V0ICsgY2VsbE51bWJlcik7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC51cGRhdGVDZWxsKGNvbmZpZywgY2VsbCwgY2VsbERhdGEpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIEZpeGVkIGNlbGwgZGF0YSByb3cgdXBkYXRlXHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkVGFibGUgKyAnIHRyLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmRhdGFSb3cpLmZvckVhY2goZnVuY3Rpb24ocm93LCByb3dOdW1iZXIpIHtcclxuXHRcdHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBjZWxsTnVtYmVyKSB7XHJcblx0XHRcdHZhciBmaXhlZENlbGxEYXRhID0gdGFibGVVdGlsLmdldEZpeGVkQ2VsbERhdGEoY29uZmlnLCBjb25maWcuaW5uZXIudG9wQ2VsbE9mZnNldCArIHJvd051bWJlciwgY2VsbE51bWJlcik7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC51cGRhdGVDZWxsKGNvbmZpZywgY2VsbCwgZml4ZWRDZWxsRGF0YSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQnVmZmVycyhjb25maWcpIHtcclxuXHR2YXIgdmlydHVhbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy52aXJ0dWFsQ29udGFpbmVyKSxcclxuXHRcdGNlbGxGdWxsV2lkdGggPSBjb25maWdVdGlsLmdldENlbGxGdWxsV2lkdGgoY29uZmlnKSxcclxuXHRcdGxlZnQgPSB2aXJ0dWFsQ29udGFpbmVyLnNjcm9sbExlZnQgLSB2aXJ0dWFsQ29udGFpbmVyLnNjcm9sbExlZnQgJSBjZWxsRnVsbFdpZHRoIC0gY29uZmlnLmlubmVyLmNvbHNwYW5PZmZzZXQgKiBjZWxsRnVsbFdpZHRoLFxyXG5cdFx0cmlnaHQgPSBjb25maWcuaW5uZXIudGFibGVPZmZzZXRXaWR0aCAtIGxlZnQsXHJcblx0XHR0b3AgPSB2aXJ0dWFsQ29udGFpbmVyLnNjcm9sbFRvcCxcclxuXHRcdGJvdHRvbSA9IGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCAtIHRvcDtcclxuXHJcblx0bGVmdCA9IGxlZnQgPiBjb25maWcuaW5uZXIudGFibGVPZmZzZXRXaWR0aCA/IGNvbmZpZy5pbm5lci50YWJsZU9mZnNldFdpZHRoIDogbGVmdDtcclxuXHRsZWZ0ID0gbGVmdCA8IGNvbmZpZy5pbm5lci5taW5CdWZmZXJXaWR0aCA/IGNvbmZpZy5pbm5lci5taW5CdWZmZXJXaWR0aCA6IGxlZnQ7XHJcblx0cmlnaHQgPSBjb25maWcuaW5uZXIudGFibGVPZmZzZXRXaWR0aCAtIGxlZnQ7XHJcblx0dG9wID0gdG9wICsgY29uZmlnLmlubmVyLm1pbkJ1ZmZlckhlaWdodCA+IGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCA/IGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCAtIGNvbmZpZy5pbm5lci5taW5CdWZmZXJIZWlnaHQgOiB0b3AgKyBjb25maWcuaW5uZXIubWluQnVmZmVySGVpZ2h0O1xyXG5cdGJvdHRvbSA9IGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCA+IHRvcCA/IGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCAtIHRvcCA6IGNvbmZpZy5pbm5lci5taW5CdWZmZXJIZWlnaHQ7XHJcblxyXG5cdGNvbmZpZy5pbm5lci5sZWZ0Q2VsbE9mZnNldCA9IE1hdGguZmxvb3IobGVmdCAvIGNlbGxGdWxsV2lkdGgpO1xyXG5cdGNvbmZpZy5pbm5lci50b3BDZWxsT2Zmc2V0ID0gTWF0aC5mbG9vcigodG9wIC0gdG9wICUgY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCkgLyBjb25maWcuZGltZW5zaW9ucy5jZWxsSGVpZ2h0KTtcclxuXHJcblx0Y29uZmlnLmlubmVyLmJ1ZmZlckxlZnQuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0ZWwuc3R5bGUubWluV2lkdGggPSBsZWZ0ICsgJ3B4JztcclxuXHR9KTtcclxuXHRjb25maWcuaW5uZXIuYnVmZmVyUmlnaHQuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0ZWwuc3R5bGUubWluV2lkdGggPSByaWdodCArICdweCc7XHJcblx0fSk7XHJcblx0Y29uZmlnLmlubmVyLmJ1ZmZlclRvcC5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRlbC5zdHlsZS5oZWlnaHQgPSB0b3AgKyAncHgnO1xyXG5cdH0pO1xyXG5cdGNvbmZpZy5pbm5lci5idWZmZXJCb3R0b20uZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gYm90dG9tICsgJ3B4JztcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVjYWxjdWxhdGVEaW1lbnNpb25zKGNvbmZpZykge1xyXG5cdHZhciBzbWFsbGVyVGFibGUgPSBjb25maWcuZGF0YVNvdXJjZS5sZW5ndGggPCBjb25maWcuaW5uZXIudmlzaWJsZVJvd051bWJlcixcclxuXHRcdHZpcnR1YWxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbENvbnRhaW5lcik7XHJcblxyXG5cdHZpcnR1YWxDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnbm8tdmVydGljYWwtc2Nyb2xsJywgc21hbGxlclRhYmxlKTtcclxuXHJcblx0aWYgKHNtYWxsZXJUYWJsZSkge1xyXG5cdFx0dmlydHVhbENvbnRhaW5lci5zY3JvbGxUb3AgPSAwO1xyXG5cdH1cclxuXHJcblx0Y29uZmlnLmlubmVyLnRhYmxlT2Zmc2V0V2lkdGggPSBjb25maWdVdGlsLmdldFRhYmxlT2Zmc2V0V2lkdGgoY29uZmlnKTtcclxuXHRjb25maWcuaW5uZXIudGFibGVPZmZzZXRIZWlnaHQgPSBjb25maWdVdGlsLmdldFRhYmxlT2Zmc2V0SGVpZ2h0KGNvbmZpZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0RWRpdGluZ0NlbGwoY29uZmlnLCBldmVudEhhbmRsZXJzKSB7XHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLnZpcnR1YWxUYWJsZSArICcgdGQuJyArIGNvbmZpZy5zZWxlY3RvcnMuZWRpdGluZ0NlbGwpLmZvckVhY2goZnVuY3Rpb24oZWRpdGluZ0NlbGwpIHtcclxuXHRcdHZhciBpbnB1dCA9IGVkaXRpbmdDZWxsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XHJcblxyXG5cdFx0aW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50SGFuZGxlcnMub25JbnB1dEJsdXJFdmVudEhhbmRsZXIpO1xyXG5cdFx0aW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudEhhbmRsZXJzLm9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcik7XHJcblxyXG5cdFx0Y2VsbEVsZW1lbnQudXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGVkaXRpbmdDZWxsLCBpbnB1dC52YWx1ZSk7XHJcblxyXG5cdFx0ZWRpdGluZ0NlbGwuY2xhc3NMaXN0LnJlbW92ZShjb25maWcuc2VsZWN0b3JzLmVkaXRpbmdDZWxsKTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRFZGl0ZWRDZWxscyhjb25maWcpIHtcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbFRhYmxlICsgJyB0ZC4nICsgY29uZmlnLnNlbGVjdG9ycy5lZGl0aW5nQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlZGl0ZWRDZWxsKSB7XHJcblx0XHRlZGl0ZWRDZWxsLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLnNlbGVjdG9ycy5lZGl0ZWRDZWxsKTtcclxuXHR9KTtcclxuXHJcblx0dXBkYXRlVGFibGUoY29uZmlnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVzdHJveVRhYmxlKGNvbmZpZykge1xyXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnNlbGVjdG9ycy5tYWluQ29udGFpbmVyKS5pbm5lckhUTUwgPSAnJztcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0dXBkYXRlVGFibGU6IHVwZGF0ZVRhYmxlLFxyXG5cdHVwZGF0ZUJ1ZmZlcnM6IHVwZGF0ZUJ1ZmZlcnMsXHJcblx0cmVjYWxjdWxhdGVEaW1lbnNpb25zOiByZWNhbGN1bGF0ZURpbWVuc2lvbnMsXHJcblx0cmVzZXRFZGl0aW5nQ2VsbDogcmVzZXRFZGl0aW5nQ2VsbCxcclxuXHRyZXNldEVkaXRlZENlbGxzOiByZXNldEVkaXRlZENlbGxzLFxyXG5cdGRlc3Ryb3lUYWJsZTogZGVzdHJveVRhYmxlXHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEJlZm9yZUVkaXRBcmdzID0gcmVxdWlyZSgnLi4vbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9iZWZvcmUtZWRpdCcpLFxyXG5cdEJlZm9yZVNhdmVBcmdzID0gcmVxdWlyZSgnLi4vbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9iZWZvcmUtc2F2ZScpLFxyXG5cdFZhbGlkYXRpb25BcmdzID0gcmVxdWlyZSgnLi4vbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy92YWxpZGF0aW9uJyksXHJcblx0U2F2ZVJvd0FyZ3MgICAgPSByZXF1aXJlKCcuLi9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL3NhdmUtcm93JyksXHJcblx0U2F2ZUJhdGNoQXJncyAgPSByZXF1aXJlKCcuLi9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL3NhdmUtYmF0Y2gnKSxcclxuXHRBZnRlckVkaXRBcmdzICA9IHJlcXVpcmUoJy4uL21vZGVscy9ldmVudC1hcmd1bWVudHMvYWZ0ZXItZWRpdCcpLFxyXG5cdEFmdGVyU2F2ZUFyZ3MgID0gcmVxdWlyZSgnLi4vbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9hZnRlci1zYXZlJyksXHJcblx0Y2VsbEVsZW1lbnQgICAgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9jZWxsJyksXHJcblx0dGFibGVVdGlsICAgICAgPSByZXF1aXJlKCcuLi91dGlscy90YWJsZScpLFxyXG5cdGRvbVV0aWwgICAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvZG9tJyksXHJcblx0ZG9tTW9kdWxlICAgICAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2RvbScpLFxyXG5cdGZpbHRlck1vZHVsZSAgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9maWx0ZXInKTtcclxuXHJcbmZ1bmN0aW9uIHN0YXJ0RWRpdGluZ0NlbGwoY29uZmlnLCBjZWxsTm9kZSwgaW5zdGFuY2VzLCBldmVudEhhbmRsZXJzKSB7XHJcblx0aWYgKCFjb25maWcuZWRpdC5lbmFibGVkKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHR2YXIgcm93TnVtYmVyID0gZG9tVXRpbC5nZXRSb3dOdW1iZXIoY29uZmlnLCBjZWxsTm9kZSksXHJcblx0XHRjb2x1bW5OdW1iZXIgPSBkb21VdGlsLmdldENvbHVtbk51bWJlcihjb25maWcsIGNlbGxOb2RlKTtcclxuXHJcblx0aWYgKHJvd051bWJlciA+PSBjb25maWcuZGF0YVNvdXJjZS5sZW5ndGgpIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciBjZWxsRGF0YSA9IHRhYmxlVXRpbC5nZXRDZWxsRGF0YShjb25maWcsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSxcclxuXHRcdGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcblxyXG5cdHZhciBiZWZvcmVFZGl0QXJncyA9IG5ldyBCZWZvcmVFZGl0QXJncyh7XHJcblx0XHRjZWxsTm9kZTogY2VsbE5vZGUsXHJcblx0XHRjZWxsRGF0YTogY2VsbERhdGEsXHJcblx0XHRjYW5jZWxFdmVudDogZmFsc2VcclxuXHR9KTtcclxuXHJcblx0Y29uZmlnLmV2ZW50SGFuZGxlcnMub25CZWZvcmVFZGl0KGJlZm9yZUVkaXRBcmdzKTtcclxuXHJcblx0aWYgKCFiZWZvcmVFZGl0QXJncy5jYW5jZWxFdmVudCkge1xyXG5cdFx0Y2VsbE5vZGUuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmVkaXRpbmdDZWxsKTtcclxuXHRcdGNlbGxOb2RlLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLnNlbGVjdG9ycy5lZGl0ZWRDZWxsKTtcclxuXHJcblx0XHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbE5vZGUsIGlucHV0RWxlbWVudCk7XHJcblxyXG5cdFx0aW5zdGFuY2VzLm9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHsgZXZlbnRIYW5kbGVycy5vbklucHV0Qmx1ckV2ZW50SGFuZGxlcihldiwgY29uZmlnKTsgfTtcclxuXHRcdGluc3RhbmNlcy5vbklucHV0S2V5VXBFdmVudEhhbmRsZXIgPSBmdW5jdGlvbihldikgeyBldmVudEhhbmRsZXJzLm9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcihldiwgY29uZmlnKTsgfTtcclxuXHJcblx0XHRpbnB1dEVsZW1lbnQuZm9jdXMoKTtcclxuXHRcdGlucHV0RWxlbWVudC52YWx1ZSA9IGNlbGxEYXRhLmdldFZhbHVlKCk7XHJcblx0XHRpbnB1dEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSAnMTBweCc7IC8vIFRPRE86IEtpc3plcnZlem5pIG9zenTDoWx5YmFcclxuXHRcdGlucHV0RWxlbWVudC5zdHlsZS53aWR0aCA9ICc4MCUnOyAvLyBUT0RPOiBLaXN6ZXJ2ZXpuaSBvc3p0w6FseWJhXHJcblx0XHRpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0eXBlJywgY2VsbERhdGEuZGF0YVR5cGUpO1xyXG5cdFx0aW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBpbnN0YW5jZXMub25JbnB1dEJsdXJFdmVudEhhbmRsZXIpO1xyXG5cdFx0aW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaW5zdGFuY2VzLm9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5pc2hFZGl0aW5nQ2VsbChjb25maWcsIGlucHV0RWxlbWVudCwgZXZlbnRIYW5kbGVycykge1xyXG5cdHZhciBjZWxsTm9kZSA9IGlucHV0RWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGUsXHJcblx0XHRyb3dOdW1iZXIgPSBkb21VdGlsLmdldFJvd051bWJlcihjb25maWcsIGNlbGxOb2RlKSxcclxuXHRcdGNvbHVtbk51bWJlciA9IGRvbVV0aWwuZ2V0Q29sdW1uTnVtYmVyKGNvbmZpZywgY2VsbE5vZGUpLFxyXG5cdFx0Y2VsbERhdGEgPSB0YWJsZVV0aWwuZ2V0Q2VsbERhdGEoY29uZmlnLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlciksXHJcblx0XHR1cGRhdGVkVmFsdWUgPSBpbnB1dEVsZW1lbnQudmFsdWU7XHJcblxyXG5cdGNlbGxEYXRhLnVwZGF0ZUF0dHJpYnV0ZXMoeyBjbGFzczogY29uZmlnLnNlbGVjdG9ycy5lZGl0ZWRDZWxsIH0pO1xyXG5cdGNlbGxEYXRhLnVwZGF0ZVZhbHVlKHVwZGF0ZWRWYWx1ZSk7XHJcblxyXG5cdGlmICghY2VsbERhdGEuaXNDZWxsQ2hhbmdlZCgpKSB7XHJcblx0XHRkb21Nb2R1bGUucmVzZXRFZGl0aW5nQ2VsbChjb25maWcsIGV2ZW50SGFuZGxlcnMpO1xyXG5cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciB2YWxpZGF0aW9uQXJncyA9IG5ldyBWYWxpZGF0aW9uQXJncyh7XHJcblx0XHRjZWxsTm9kZTogY2VsbE5vZGUsXHJcblx0XHRjZWxsRGF0YTogY2VsbERhdGEsXHJcblx0XHRjYW5jZWxFdmVudDogZmFsc2VcclxuXHR9KTtcclxuXHJcblx0Y29uZmlnLmV2ZW50SGFuZGxlcnMub25WYWxpZGF0aW9uKHZhbGlkYXRpb25BcmdzKTtcclxuXHJcblx0aWYgKHZhbGlkYXRpb25BcmdzLmNhbmNlbEVkaXQgIT09IHRydWUpIHtcclxuXHRcdHRhYmxlVXRpbC5zdG9yZVVwZGF0ZWRDZWxsVmFsdWUoY29uZmlnLCBjZWxsRGF0YSk7XHJcblx0XHRjZWxsRWxlbWVudC51cGRhdGVDZWxsKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxEYXRhKTtcclxuXHJcblx0XHR2YXIgYWZ0ZXJFZGl0QXJncyA9IG5ldyBBZnRlckVkaXRBcmdzKHtcclxuXHRcdFx0Y2VsbE5vZGU6IGNlbGxOb2RlLFxyXG5cdFx0XHRjZWxsRGF0YTogY2VsbERhdGFcclxuXHRcdH0pO1xyXG5cclxuXHRcdGNvbmZpZy5ldmVudEhhbmRsZXJzLm9uQWZ0ZXJFZGl0KGFmdGVyRWRpdEFyZ3MpO1xyXG5cclxuXHRcdGZpbHRlck1vZHVsZS5maWx0ZXIoY29uZmlnKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbmNlbEVkaXRpbmdDZWxsKGNvbmZpZykge1xyXG5cdHJldHVybiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZUNlbGxzKGNvbmZpZykge1xyXG5cdGlmICghY29uZmlnLmVkaXQuZW5hYmxlZCkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0dmFyIGJlZm9yZVNhdmVBcmdzID0gbmV3IEJlZm9yZVNhdmVBcmdzKHtcclxuXHRcdGVkaXRlZFJvd3M6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXHJcblx0XHRjYW5jZWxFdmVudDogZmFsc2VcclxuXHR9KTtcclxuXHJcblx0Y29uZmlnLmV2ZW50SGFuZGxlcnMub25CZWZvcmVTYXZlKGJlZm9yZVNhdmVBcmdzKTtcclxuXHJcblx0aWYgKGJlZm9yZVNhdmVBcmdzLmNhbmNlbEV2ZW50KSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRpZiAoY29uZmlnLmVkaXQubW9kZSA9PT0gJ3JvdycpIHsgLy8gUm93IG1vZGVcclxuXHRcdHZhciBzYXZlUm93QXJncyA9IG5ldyBTYXZlUm93QXJncyh7IGNhbmNlbEV2ZW50OiBmYWxzZSB9KTtcclxuXHJcblx0XHRjb25maWcuZGF0YVNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xyXG5cdFx0XHRzYXZlUm93QXJncyA9IG5ldyBTYXZlUm93QXJncyh7XHJcblx0XHRcdFx0ZWRpdGVkUm93OiBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzLFxyXG5cdFx0XHRcdGNhbmNlbEV2ZW50OiBmYWxzZVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmICghc2F2ZVJvd0FyZ3MuY2FuY2VsRXZlbnQpIHtcclxuXHRcdFx0XHRjb25maWcuZXZlbnRIYW5kbGVycy5vblNhdmluZ1JvdyhzYXZlUm93QXJncyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICghc2F2ZVJvd0FyZ3MuY2FuY2VsRXZlbnQpIHtcclxuXHRcdFx0XHR0YWJsZVV0aWwucGVyc2lzdFJvd1ZhbHVlcyhjb25maWcsIHJvdyk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmICghc2F2ZVJvd0FyZ3MuY2FuY2VsRXZlbnQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoY29uZmlnLmVkaXQubW9kZSA9PT0gJ2JhdGNoJykgeyAvLyBCYXRjaCBtb2RlXHJcblx0XHR2YXIgc2F2ZUJhdGNoQXJncyA9IG5ldyBTYXZlQmF0Y2hBcmdzKHtcclxuXHRcdFx0ZWRpdGVkUm93czogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcclxuXHRcdFx0Y2FuY2VsRXZlbnQ6IGZhbHNlXHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25maWcuZXZlbnRIYW5kbGVycy5vblNhdmluZ0JhdGNoKHNhdmVCYXRjaEFyZ3MpO1xyXG5cclxuXHRcdGlmIChzYXZlQmF0Y2hBcmdzLmNhbmNlbEV2ZW50KSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0YWJsZVV0aWwucGVyc2lzdEJhdGNoVmFsdWVzKGNvbmZpZyk7XHJcblx0fVxyXG5cclxuXHR2YXIgYWZ0ZXJTYXZlQXJncyA9IG5ldyBBZnRlclNhdmVBcmdzKHtcclxuXHRcdHNhdmVkUm93czogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1xyXG5cdH0pO1xyXG5cclxuXHRkb21Nb2R1bGUucmVzZXRFZGl0ZWRDZWxscyhjb25maWcpO1xyXG5cclxuXHRjb25maWcuZXZlbnRIYW5kbGVycy5vbkFmdGVyU2F2ZShhZnRlclNhdmVBcmdzKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0c3RhcnRFZGl0aW5nQ2VsbDogc3RhcnRFZGl0aW5nQ2VsbCxcclxuXHRmaW5pc2hFZGl0aW5nQ2VsbDogZmluaXNoRWRpdGluZ0NlbGwsXHJcblx0Y2FuY2VsRWRpdGluZ0NlbGw6IGNhbmNlbEVkaXRpbmdDZWxsLFxyXG5cdHNhdmVDZWxsczogc2F2ZUNlbGxzXHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGRvbVV0aWwgICAgICAgPSByZXF1aXJlKCcuLi91dGlscy9kb20nKSxcclxuXHRrZXlib2FyZFV0aWwgID0gcmVxdWlyZSgnLi4vdXRpbHMva2V5Ym9hcmQnKSxcclxuXHRzb3J0TW9kdWxlICAgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9zb3J0JyksXHJcblx0ZWRpdE1vZHVsZSAgICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZWRpdCcpLFxyXG5cdGRvbU1vZHVsZSAgICAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2RvbScpLFxyXG5cdGZpbHRlck1vZHVsZSAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2ZpbHRlcicpLFxyXG5cdHJlc2l6ZU1vZHVsZSAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3Jlc2l6ZScpLFxyXG5cdHRvb2x0aXBNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3Rvb2x0aXAnKTtcclxuXHJcbnZhciBjb250YWluZXI7XHJcblxyXG52YXIgaW5zdGFuY2VzID0ge1xyXG5cdG9uU2Nyb2xsRXZlbnRIYW5kbGVyOiBmdW5jdGlvbigpIHt9LFxyXG5cdG9uV2hlZWxFdmVudEhhbmRsZXI6IGZ1bmN0aW9uKCkge30sXHJcblx0b25JbnB1dEJsdXJFdmVudEhhbmRsZXI6IGZ1bmN0aW9uKCkge30sXHJcblx0b25DbGlja0NlbGxFdmVudEhhbmRsZXI6IGZ1bmN0aW9uKCkge30sXHJcblx0b25DbGlja1NhdmVCdXR0b25FdmVudEhhbmRsZXI6IGZ1bmN0aW9uKCkge30sXHJcblx0b25DbGlja1NvcnRIZWFkZXI6IGZ1bmN0aW9uKCkge30sXHJcblx0b25DbGlja0ZpbHRlckhlYWRlcjogZnVuY3Rpb24oKSB7fSxcclxuXHRvbldpbmRvd1Jlc2l6ZTogZnVuY3Rpb24oKSB7fSxcclxuXHRvbk1vdXNlRW50ZXJDZWxsV2l0aFRpdGxlOiBmdW5jdGlvbigpIHt9LFxyXG5cdG9uTW91c2VMZWF2ZUNlbGxXaXRoVGl0bGU6IGZ1bmN0aW9uKCkge30sXHJcbn07XHJcblxyXG5mdW5jdGlvbiBvbldoZWVsRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRpZiAoZXZlbnQuZGVsdGFNb2RlID09PSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9QSVhFTCkge1xyXG5cdFx0Y29udGFpbmVyLnNjcm9sbFRvcCArPSBldmVudC5kZWx0YVk7XHJcblx0XHRjb250YWluZXIuc2Nyb2xsTGVmdCArPSBldmVudC5kZWx0YVg7XHJcblx0fSBlbHNlIGlmIChldmVudC5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX0xJTkUpIHtcclxuXHRcdGNvbnRhaW5lci5zY3JvbGxUb3AgKz0gZXZlbnQuZGVsdGFZICogY29uZmlnLmlubmVyLmRpbWVuc2lvbnMuc2Nyb2xsTGluZUhlaWdodDtcclxuXHRcdGNvbnRhaW5lci5zY3JvbGxMZWZ0ICs9IGV2ZW50LmRlbHRhWCAqIGNvbmZpZy5pbm5lci5kaW1lbnNpb25zLnNjcm9sbExpbmVIZWlnaHQ7XHJcblx0fSBlbHNlIGlmIChldmVudC5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX1BBR0UpIHtcclxuXHRcdGNvbnRhaW5lci5zY3JvbGxUb3AgKz0gZXZlbnQuZGVsdGFZICogY29uZmlnLmlubmVyLmRpbWVuc2lvbnMuc2Nyb2xsUGFnZUhlaWdodDtcclxuXHRcdGNvbnRhaW5lci5zY3JvbGxMZWZ0ICs9IGV2ZW50LmRlbHRhWCAqIGNvbmZpZy5pbm5lci5kaW1lbnNpb25zLnNjcm9sbFBhZ2VIZWlnaHQ7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBvblNjcm9sbEV2ZW50SGFuZGxlcihldmVudCwgY29uZmlnKSB7XHJcblx0dG9vbHRpcE1vZHVsZS5oaWRlQWxsKGNvbmZpZyk7XHJcblxyXG5cdGRvbU1vZHVsZS5yZXNldEVkaXRpbmdDZWxsKGNvbmZpZywgaW5zdGFuY2VzLm9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyKTtcclxuXHRkb21Nb2R1bGUudXBkYXRlQnVmZmVycyhjb25maWcpO1xyXG5cdGRvbU1vZHVsZS51cGRhdGVUYWJsZShjb25maWcsIGZhbHNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25DbGlja0NlbGxFdmVudEhhbmRsZXIoZXZlbnQsIGNvbmZpZykge1xyXG5cdGlmICghZXZlbnQudGFyZ2V0Lm1hdGNoZXMoJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5jZWxsRGF0YUNvbnRhaW5lcikpIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGVkaXRNb2R1bGUuc3RhcnRFZGl0aW5nQ2VsbChjb25maWcsIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLCBpbnN0YW5jZXMsIHtcclxuXHRcdG9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyOiBvbklucHV0Qmx1ckV2ZW50SGFuZGxlcixcclxuXHRcdG9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcjogb25JbnB1dEtleVVwRXZlbnRIYW5kbGVyXHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcclxuXHRlZGl0TW9kdWxlLmZpbmlzaEVkaXRpbmdDZWxsKGNvbmZpZywgZXZlbnQudGFyZ2V0LCB7XHJcblx0XHRvbklucHV0Qmx1ckV2ZW50SGFuZGxlcjogb25JbnB1dEJsdXJFdmVudEhhbmRsZXIsXHJcblx0XHRvbklucHV0S2V5VXBFdmVudEhhbmRsZXI6IG9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlclxyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbklucHV0S2V5VXBFdmVudEhhbmRsZXIoZXZlbnQsIGNvbmZpZykge1xyXG5cdHZhciBrZXlDb2RlID0ga2V5Ym9hcmRVdGlsLmdldEtleUNvZGUoZXZlbnQpO1xyXG5cclxuXHRzd2l0Y2ggKGtleUNvZGUpIHtcclxuXHRcdGNhc2Uga2V5Ym9hcmRVdGlsLktFWV9DT0RFUy5FTlRFUjpcclxuXHRcdFx0ZXZlbnQudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBpbnN0YW5jZXMub25JbnB1dEJsdXJFdmVudEhhbmRsZXIpO1xyXG5cdFx0XHRlZGl0TW9kdWxlLmZpbmlzaEVkaXRpbmdDZWxsKGNvbmZpZywgZXZlbnQudGFyZ2V0LCB7XHJcblx0XHRcdFx0b25JbnB1dEJsdXJFdmVudEhhbmRsZXI6IG9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyLFxyXG5cdFx0XHRcdG9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcjogb25JbnB1dEtleVVwRXZlbnRIYW5kbGVyXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2Uga2V5Ym9hcmRVdGlsLktFWV9DT0RFUy5FU0NBUEU6XHJcblx0XHRcdGVkaXRNb2R1bGUuY2FuY2VsRWRpdGluZ0NlbGwoY29uZmlnLCBldmVudC50YXJnZXQsIHtcclxuXHRcdFx0XHRvbklucHV0Qmx1ckV2ZW50SGFuZGxlcjogb25JbnB1dEJsdXJFdmVudEhhbmRsZXIsXHJcblx0XHRcdFx0b25JbnB1dEtleVVwRXZlbnRIYW5kbGVyOiBvbklucHV0S2V5VXBFdmVudEhhbmRsZXJcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0YnJlYWs7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBvbkNsaWNrU2F2ZUJ1dHRvbkV2ZW50SGFuZGxlcihldmVudCwgY29uZmlnKSB7XHJcblx0ZWRpdE1vZHVsZS5zYXZlQ2VsbHMoY29uZmlnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25DbGlja1NvcnRIZWFkZXIoZXZlbnQsIGNvbmZpZykge1xyXG5cdHZhciBzb3J0Q2VsbFNlbGVjdG9yID0gJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0Q2VsbCxcclxuXHRcdHNvcnRDb250YWluZXJTZWxlY3RvciA9IHNvcnRDZWxsU2VsZWN0b3IgKyAnIC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5jZWxsRGF0YUNvbnRhaW5lcixcclxuXHRcdHNvcnREaXNhYmxlZFNlbGVjdG9yID0gJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0RGlzYWJsZWQsXHJcblx0XHRzb3J0SWNvblNlbGVjdG9yID0gc29ydENlbGxTZWxlY3RvciArICcgLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnNvcnRJY29uO1xyXG5cclxuXHRpZiAoIWV2ZW50LnRhcmdldC5tYXRjaGVzKHNvcnRDb250YWluZXJTZWxlY3RvcikgJiZcclxuXHRcdCFldmVudC50YXJnZXQubWF0Y2hlcyhzb3J0SWNvblNlbGVjdG9yKSB8fFxyXG5cdFx0ZXZlbnQudGFyZ2V0Lm1hdGNoZXMoc29ydERpc2FibGVkU2VsZWN0b3IpKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoc29ydEljb25TZWxlY3RvcikpIHtcclxuXHRcdHNvcnRNb2R1bGUucmVzZXRTb3J0KGNvbmZpZyk7XHJcblx0fVxyXG5cclxuXHRpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoc29ydENvbnRhaW5lclNlbGVjdG9yKSkge1xyXG5cdFx0c29ydE1vZHVsZS5zb3J0QnlDb2x1bW4oY29uZmlnLCBkb21VdGlsLmZpbmRQYXJlbnROb2RlKGV2ZW50LnRhcmdldCwgc29ydENlbGxTZWxlY3RvcikpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gb25DbGlja0ZpbHRlckhlYWRlcihldmVudCwgY29uZmlnKSB7XHJcblx0dmFyIGZpbHRlckNlbGxTZWxlY3RvciA9ICcuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCxcclxuXHRcdGZpbHRlckNvbnRhaW5lclNlbGVjdG9yID0gZmlsdGVyQ2VsbFNlbGVjdG9yICsgJyAuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuY2VsbERhdGFDb250YWluZXIsXHJcblx0XHRmaWx0ZXJEaXNhYmxlZFNlbGVjdG9yID0gJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJEaXNhYmxlZCxcclxuXHRcdGZpbHRlclNlYXJjaEljb25TZWxlY3RvciA9IGZpbHRlckNlbGxTZWxlY3RvciArICcgLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlclNlYXJjaEljb24sXHJcblx0XHRmaWx0ZXJDbGVhckljb25TZWxlY3RvciA9IGZpbHRlckNlbGxTZWxlY3RvciArICcgLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckNsZWFySWNvbjtcclxuXHJcblx0aWYgKCFldmVudC50YXJnZXQubWF0Y2hlcyhmaWx0ZXJDb250YWluZXJTZWxlY3RvcikgJiZcclxuXHRcdCFldmVudC50YXJnZXQubWF0Y2hlcyhmaWx0ZXJTZWFyY2hJY29uU2VsZWN0b3IpICYmXHJcblx0XHQhZXZlbnQudGFyZ2V0Lm1hdGNoZXMoZmlsdGVyQ2xlYXJJY29uU2VsZWN0b3IpIHx8XHJcblx0XHRldmVudC50YXJnZXQubWF0Y2hlcyhmaWx0ZXJEaXNhYmxlZFNlbGVjdG9yKSkge1xyXG5cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciBjZWxsTm9kZSA9IGRvbVV0aWwuZmluZFBhcmVudE5vZGUoZXZlbnQudGFyZ2V0LCBmaWx0ZXJDZWxsU2VsZWN0b3IpO1xyXG5cclxuXHRpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoZmlsdGVyQ2xlYXJJY29uU2VsZWN0b3IpKSB7XHJcblx0XHRmaWx0ZXJNb2R1bGUuY2xlYXJGaWx0ZXIoY29uZmlnLCBjZWxsTm9kZSk7XHJcblxyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0ZmlsdGVyTW9kdWxlLnN0YXJ0RWRpdGluZ0ZpbHRlcihjb25maWcsIGNlbGxOb2RlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoZXZlbnQsIGNvbmZpZykge1xyXG5cdGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMudW5pcXVlSWQpID09PSBudWxsKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRyZXNpemVNb2R1bGUucmVzaXplRXZlbnRIYW5kbGVyKGNvbmZpZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uTW91c2VFbnRlckNlbGxXaXRoVGl0bGUoZXZlbnQsIGNvbmZpZykge1xyXG5cdHRvb2x0aXBNb2R1bGUub25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZShjb25maWcsIGV2ZW50LnRhcmdldCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uTW91c2VMZWF2ZUNlbGxXaXRoVGl0bGUoZXZlbnQsIGNvbmZpZykge1xyXG5cdHRvb2x0aXBNb2R1bGUub25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZShjb25maWcsIGV2ZW50LnRhcmdldCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEV2ZW50cyhjb25maWcpIHtcclxuXHRjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbENvbnRhaW5lcik7XHJcblxyXG5cdGluc3RhbmNlcy5vblNjcm9sbEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7IG9uU2Nyb2xsRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpOyB9O1xyXG5cdGluc3RhbmNlcy5vbldoZWVsRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHsgb25XaGVlbEV2ZW50SGFuZGxlcihldmVudCwgY29uZmlnKTsgfTtcclxuXHRpbnN0YW5jZXMub25DbGlja0NlbGxFdmVudEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkgeyBvbkNsaWNrQ2VsbEV2ZW50SGFuZGxlcihldmVudCwgY29uZmlnKTsgfTtcclxuXHRpbnN0YW5jZXMub25DbGlja1NhdmVCdXR0b25FdmVudEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkgeyBvbkNsaWNrU2F2ZUJ1dHRvbkV2ZW50SGFuZGxlcihldmVudCwgY29uZmlnKTsgfTtcclxuXHRpbnN0YW5jZXMub25DbGlja1NvcnRIZWFkZXIgPSBmdW5jdGlvbihldmVudCkgeyBvbkNsaWNrU29ydEhlYWRlcihldmVudCwgY29uZmlnKTsgfTtcclxuXHRpbnN0YW5jZXMub25DbGlja0ZpbHRlckhlYWRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7IG9uQ2xpY2tGaWx0ZXJIZWFkZXIoZXZlbnQsIGNvbmZpZyk7IH07XHJcblx0aW5zdGFuY2VzLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24oZXZlbnQpIHsgb25XaW5kb3dSZXNpemUoZXZlbnQsIGNvbmZpZyk7IH07XHJcblx0aW5zdGFuY2VzLm9uTW91c2VFbnRlckNlbGxXaXRoVGl0bGUgPSBmdW5jdGlvbihldmVudCkgeyBvbk1vdXNlRW50ZXJDZWxsV2l0aFRpdGxlKGV2ZW50LCBjb25maWcpOyB9O1xyXG5cdGluc3RhbmNlcy5vbk1vdXNlTGVhdmVDZWxsV2l0aFRpdGxlID0gZnVuY3Rpb24oZXZlbnQpIHsgb25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZShldmVudCwgY29uZmlnKTsgfTtcclxuXHJcblx0aWYgKGNvbnRhaW5lciAhPT0gbnVsbCkge1xyXG5cdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaW5zdGFuY2VzLm9uV2hlZWxFdmVudEhhbmRsZXIsIHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IHRydWUgfSk7XHJcblx0XHRjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2VzLm9uU2Nyb2xsRXZlbnRIYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdGlmIChjb25maWcubW9kdWxlcy50b29sdGlwLmVuYWJsZWQpIHtcclxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0aXRsZV0nKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBpbnN0YW5jZXMub25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZSk7XHJcblx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBpbnN0YW5jZXMub25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGlmIChjb25maWcuZWRpdC5lbmFibGVkICYmIGNvbmZpZy5zZWxlY3RvcnMuc2F2ZUJ1dHRvbiAhPT0gbnVsbCkge1xyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc2VsZWN0b3JzLnNhdmVCdXR0b24pLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW5zdGFuY2VzLm9uQ2xpY2tTYXZlQnV0dG9uRXZlbnRIYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdGlmIChjb25maWcuZWRpdC5lbmFibGVkKSB7XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbFRhYmxlICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGluc3RhbmNlcy5vbkNsaWNrQ2VsbEV2ZW50SGFuZGxlcik7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGlmIChjb25maWcuc29ydC5lbmFibGVkKSB7XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMudW5pcXVlSWQgKyAnIHRkLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnNvcnRDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW5zdGFuY2VzLm9uQ2xpY2tTb3J0SGVhZGVyKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0aWYgKGNvbmZpZy5maWx0ZXIuZW5hYmxlZCkge1xyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnIycgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW5zdGFuY2VzLm9uQ2xpY2tGaWx0ZXJIZWFkZXIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoY29uZmlnLmF1dG9SZXNpemUpIHtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZXMub25XaW5kb3dSZXNpemUpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRzKGNvbmZpZykge1xyXG5cdGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy52aXJ0dWFsQ29udGFpbmVyKTtcclxuXHJcblx0aWYgKGNvbnRhaW5lciAhPT0gbnVsbCkge1xyXG5cdFx0Y29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaW5zdGFuY2VzLm9uV2hlZWxFdmVudEhhbmRsZXIpO1xyXG5cdFx0Y29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlcy5vblNjcm9sbEV2ZW50SGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRpZiAoY29uZmlnLm1vZHVsZXMudG9vbHRpcC5lbmFibGVkKSB7XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbdGl0bGVdJykuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgaW5zdGFuY2VzLm9uTW91c2VFbnRlckNlbGxXaXRoVGl0bGUpO1xyXG5cdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaW5zdGFuY2VzLm9uTW91c2VMZWF2ZUNlbGxXaXRoVGl0bGUpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoY29uZmlnLmVkaXQuZW5hYmxlZCAmJiBjb25maWcuc2VsZWN0b3JzLnNhdmVCdXR0b24gIT09IG51bGwpIHtcclxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnNlbGVjdG9ycy5zYXZlQnV0dG9uKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGluc3RhbmNlcy5vbkNsaWNrU2F2ZUJ1dHRvbkV2ZW50SGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRpZiAoY29uZmlnLmVkaXQuZW5hYmxlZCkge1xyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLnZpcnR1YWxUYWJsZSArICcgdGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZGF0YUNlbGwpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcclxuXHRcdFx0ZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbnN0YW5jZXMub25DbGlja0NlbGxFdmVudEhhbmRsZXIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoY29uZmlnLnNvcnQuZW5hYmxlZCkge1xyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnIycgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0Q2VsbCkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGluc3RhbmNlcy5vbkNsaWNrU29ydEhlYWRlcik7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGlmIChjb25maWcuZmlsdGVyLmVuYWJsZWQpIHtcclxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy51bmlxdWVJZCArICcgdGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGluc3RhbmNlcy5vbkNsaWNrRmlsdGVySGVhZGVyKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0aWYgKGNvbmZpZy5hdXRvUmVzaXplKSB7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2VzLm9uV2luZG93UmVzaXplKTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGFkZEV2ZW50czogYWRkRXZlbnRzLFxyXG5cdHJlbW92ZUV2ZW50czogcmVtb3ZlRXZlbnRzXHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGRvbU1vZHVsZSAgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9kb20nKSxcclxuXHRzb3J0TW9kdWxlICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvc29ydCcpLFxyXG5cdGRhdGFVdGlsICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvZGF0YScpLFxyXG5cdGNvbmZpZ1V0aWwgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlndXJhdGlvbicpLFxyXG5cdGNlbGxFbGVtZW50ID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvY2VsbCcpO1xyXG5cclxuZnVuY3Rpb24gc3RhcnRFZGl0aW5nRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUpIHtcclxuXHRpZiAoY2VsbE5vZGUucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckNvbnRhaW5lcikgIT09IG51bGwpIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciBhdHRyaWJ1dGUgPSBjZWxsTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJyksXHJcblx0XHRmaWx0ZXJPYmogPSBjb25maWcuaW5uZXIuZmlsdGVyc1thdHRyaWJ1dGVdIHx8IHt9LFxyXG5cdFx0aGVhZGVyT2JqID0gY29uZmlnVXRpbC5nZXRIZWFkZXJPYmplY3QoY29uZmlnLCBhdHRyaWJ1dGUpLFxyXG5cdFx0Y2xlYXJJY29uQ2xhc3MgPSBjb25maWcuaW5uZXIuaWNvbnMuZmlsdGVyLmNsZWFyLFxyXG5cdFx0Y2xlYXJJY29uRWxlbWVudENsYXNzID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDbGVhckljb24gKyAnICcgKyBjbGVhckljb25DbGFzcztcclxuXHJcblx0ZmlsdGVyT2JqLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcclxuXHRmaWx0ZXJPYmouZmlsdGVyVHlwZSA9IGhlYWRlck9iai5maWx0ZXJUeXBlO1xyXG5cdGZpbHRlck9iai52YWx1ZSA9IGZpbHRlck9iai52YWx1ZSB8fCAnJztcclxuXHJcblx0Y29uZmlnLmlubmVyLmZpbHRlcnNbYXR0cmlidXRlXSA9IGZpbHRlck9iajtcclxuXHJcblx0dmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuXHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbE5vZGUsIGNvbnRhaW5lcik7XHJcblxyXG5cdGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ29udGFpbmVyKTtcclxuXHRjb250YWluZXIuaW5uZXJIVE1MID0gJzxpbnB1dD48aSBjbGFzcz1cIicgKyBjbGVhckljb25FbGVtZW50Q2xhc3MgKyAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7XHJcblxyXG5cdHZhciBpbnB1dCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xyXG5cclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBoZWFkZXJPYmouZGF0YVR5cGUpO1xyXG5cdGlucHV0LnZhbHVlID0gZmlsdGVyT2JqLnZhbHVlO1xyXG5cdGlucHV0LmZvY3VzKCk7XHJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0aWYgKChldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoKSA9PT0gMTMpIHsgLy8gRW50ZXIga2V5XHJcblx0XHRcdGZpbHRlck9iai52YWx1ZSA9IGRhdGFVdGlsLmdldFZhbHVlQnlUeXBlKGlucHV0LnZhbHVlLCBoZWFkZXJPYmouZGF0YVR5cGUpO1xyXG5cclxuXHRcdFx0ZmluaXNoRWRpdGluZ0ZpbHRlcihjb25maWcsIGNlbGxOb2RlLCBoZWFkZXJPYmosIGZpbHRlck9iaik7XHJcblx0XHR9IGVsc2UgaWYgKChldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoKSA9PT0gMjcpIHsgLy8gRXNjYXBlIGtleVxyXG5cdFx0XHRmaW5pc2hFZGl0aW5nRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUsIGhlYWRlck9iaiwgZmlsdGVyT2JqKTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmlsdGVyKGNvbmZpZywgc29ydFRhYmxlKSB7XHJcblx0c29ydFRhYmxlID0gc29ydFRhYmxlICE9PSBmYWxzZTtcclxuXHJcblx0Y29uZmlnLmRhdGFTb3VyY2UgPSBjb25maWcuaW5uZXIub3JpZ2luYWxEYXRhU291cmNlO1xyXG5cclxuXHRPYmplY3Qua2V5cyhjb25maWcuaW5uZXIuZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuXHRcdHZhciBmaWx0ZXJPYmogPSBjb25maWcuaW5uZXIuZmlsdGVyc1trZXldO1xyXG5cclxuXHRcdGlmICh0eXBlb2YgZmlsdGVyT2JqLnZhbHVlID09ICd1bmRlZmluZWQnIHx8IGZpbHRlck9iai52YWx1ZSA9PT0gJycpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChmaWx0ZXJPYmouZmlsdGVyVHlwZSA9PT0gJ2N1c3RvbScpIHtcclxuXHRcdFx0aWYgKGNvbmZpZy5maWx0ZXIuY3VzdG9tRmlsdGVyICE9PSBudWxsKSB7XHJcblx0XHRcdFx0Y29uZmlnLmRhdGFTb3VyY2UgPSBjb25maWcuZmlsdGVyLmN1c3RvbUZpbHRlcih7XHJcblx0XHRcdFx0XHRkYXRhU291cmNlOiBjb25maWcuZGF0YVNvdXJjZSxcclxuXHRcdFx0XHRcdGF0dHJpYnV0ZTogZmlsdGVyT2JqLmF0dHJpYnV0ZSxcclxuXHRcdFx0XHRcdHZhbHVlOiBmaWx0ZXJPYmoudmFsdWUsXHJcblx0XHRcdFx0XHRlZGl0ZWRWYWx1ZXM6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXHJcblx0XHRcdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXlcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uZmlnLmRhdGFTb3VyY2UgPSBkYXRhVXRpbC5maWx0ZXJEYXRhKHtcclxuXHRcdFx0XHRkYXRhU291cmNlOiBjb25maWcuZGF0YVNvdXJjZSxcclxuXHRcdFx0XHRhdHRyaWJ1dGU6IGZpbHRlck9iai5hdHRyaWJ1dGUsXHJcblx0XHRcdFx0ZmlsdGVyVHlwZTogZmlsdGVyT2JqLmZpbHRlclR5cGUsXHJcblx0XHRcdFx0dmFsdWVPbmU6IGZpbHRlck9iai52YWx1ZSxcclxuXHRcdFx0XHR2YWx1ZVR3bzogZmlsdGVyT2JqLnZhbHVlVHdvLFxyXG5cdFx0XHRcdGVkaXRlZFZhbHVlczogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcclxuXHRcdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXlcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdGlmIChzb3J0VGFibGUpIHtcclxuXHRcdHNvcnRNb2R1bGUuc29ydChjb25maWcsIGZhbHNlKTtcclxuXHR9XHJcblxyXG5cdGRvbU1vZHVsZS5yZWNhbGN1bGF0ZURpbWVuc2lvbnMoY29uZmlnKTtcclxuXHRkb21Nb2R1bGUudXBkYXRlQnVmZmVycyhjb25maWcpO1xyXG5cdGRvbU1vZHVsZS51cGRhdGVUYWJsZShjb25maWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckZpbHRlcihjb25maWcsIGNlbGxOb2RlKSB7XHJcblx0dmFyIGF0dHJpYnV0ZSA9IGNlbGxOb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnKSxcclxuXHRcdGNlbGxPYmogPSBjb25maWdVdGlsLmdldEhlYWRlck9iamVjdChjb25maWcsIGF0dHJpYnV0ZSksXHJcblx0XHRmaWx0ZXJPYmogPSBjb25maWcuaW5uZXIuZmlsdGVyc1thdHRyaWJ1dGVdO1xyXG5cclxuXHRmaWx0ZXJPYmoudmFsdWUgPSAnJztcclxuXHJcblx0dmFyIG5ld0ZpbHRlcnMgPSB7fTtcclxuXHJcblx0T2JqZWN0LmtleXMoY29uZmlnLmlubmVyLmZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRpZiAoa2V5ICE9PSBhdHRyaWJ1dGUpIHtcclxuXHRcdFx0bmV3RmlsdGVyc1trZXldID0gY29uZmlnLmlubmVyLmZpbHRlcnNba2V5XTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Y29uZmlnLmlubmVyLmZpbHRlcnMgPSBuZXdGaWx0ZXJzO1xyXG5cclxuXHRmaW5pc2hFZGl0aW5nRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxPYmosIGZpbHRlck9iaik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmlzaEVkaXRpbmdGaWx0ZXIoY29uZmlnLCBjZWxsTm9kZSwgY2VsbE9iaiwgZmlsdGVyT2JqKSB7XHJcblx0Y2VsbEVsZW1lbnQudXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGxOb2RlLCBjZWxsRWxlbWVudC5jcmVhdGVGaWx0ZXJEYXRhKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxPYmosIGZpbHRlck9iaikpO1xyXG5cclxuXHRmaWx0ZXIoY29uZmlnKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0c3RhcnRFZGl0aW5nRmlsdGVyOiBzdGFydEVkaXRpbmdGaWx0ZXIsXHJcblx0ZmlsdGVyOiBmaWx0ZXIsXHJcblx0Y2xlYXJGaWx0ZXI6IGNsZWFyRmlsdGVyXHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGNvbmZpZ3VyYXRpb24gICAgICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29uZmlndXJhdGlvbicpLFxyXG5cdGV2ZW50SGFuZGxlck1vZHVsZSA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXZlbnQtaGFuZGxlcicpLFxyXG5cdGRvbU1vZHVsZSAgICAgICAgICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZG9tJyksXHJcblx0Y29uZmlnVXRpbCAgICAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlndXJhdGlvbicpLFxyXG5cdGRhdGFVdGlsICAgICAgICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGEnKSxcclxuXHRjZWxsRWxlbWVudCAgICAgICAgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9jZWxsJyk7XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVRhYmxlKGNvbmZpZywgb3B0aW9ucykge1xyXG5cdGNvbmZpZ3VyYXRpb24uaW5pdChjb25maWcsIG9wdGlvbnMpO1xyXG5cclxuXHRpbml0Q29udGFpbmVycyhjb25maWcpO1xyXG5cclxuXHRjb25maWd1cmF0aW9uLmluaXRDYWxjdWxhdGVkVmFsdWVzKGNvbmZpZyk7XHJcblxyXG5cdGluaXRUYWJsZShjb25maWcpO1xyXG5cclxuXHRkb21Nb2R1bGUudXBkYXRlQnVmZmVycyhjb25maWcpO1xyXG5cdGRvbU1vZHVsZS51cGRhdGVUYWJsZShjb25maWcpO1xyXG5cclxuXHRldmVudEhhbmRsZXJNb2R1bGUuYWRkRXZlbnRzKGNvbmZpZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlc3Ryb3lUYWJsZShjb25maWcpIHtcclxuXHRldmVudEhhbmRsZXJNb2R1bGUucmVtb3ZlRXZlbnRzKGNvbmZpZyk7XHJcblx0ZG9tTW9kdWxlLmRlc3Ryb3lUYWJsZShjb25maWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0Q29udGFpbmVycyhjb25maWcpIHtcclxuXHR2YXIgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc2VsZWN0b3JzLm1haW5Db250YWluZXIpLFxyXG5cdFx0dmlydHVhbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG5cdFx0dmlydHVhbFRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKSxcclxuXHRcdGZpeGVkQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXHJcblx0XHRmaXhlZFRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcclxuXHJcblx0Y29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkKTtcclxuXHR2aXJ0dWFsQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY29uZmlnLnNlbGVjdG9ycy52aXJ0dWFsQ29udGFpbmVyKTtcclxuXHR2aXJ0dWFsVGFibGUuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLnZpcnR1YWxUYWJsZSk7XHJcblx0Zml4ZWRDb250YWluZXIuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmZpeGVkQ29udGFpbmVyKTtcclxuXHRmaXhlZFRhYmxlLmNsYXNzTGlzdC5hZGQoY29uZmlnLnNlbGVjdG9ycy5maXhlZFRhYmxlKTtcclxuXHJcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGZpeGVkQ29udGFpbmVyKTtcclxuXHRmaXhlZENvbnRhaW5lci5hcHBlbmRDaGlsZChmaXhlZFRhYmxlKTtcclxuXHJcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKHZpcnR1YWxDb250YWluZXIpO1xyXG5cdHZpcnR1YWxDb250YWluZXIuYXBwZW5kQ2hpbGQodmlydHVhbFRhYmxlKTtcclxuXHJcblx0dmlydHVhbENvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSBjb25maWcuZGltZW5zaW9ucy5jb250YWluZXJIZWlnaHQgKyAncHgnO1xyXG5cdHZpcnR1YWxDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY29udGFpbmVySGVpZ2h0ICsgJ3B4JztcclxuXHR2aXJ0dWFsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XHJcblxyXG5cdGZpeGVkQ29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSBjb25maWcuaW5uZXIubWluQnVmZmVySGVpZ2h0ICsgJ3B4IDAnO1xyXG5cdGZpeGVkQ29udGFpbmVyLnN0eWxlLmZsb2F0ID0gJ2xlZnQnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0VGFibGUoY29uZmlnKSB7XHJcblx0Ly8gR2VuZXJhdGUgdmlydHVhbCB0YWJsZVxyXG5cdHZhciB2aXJ0dWFsVGhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpLFxyXG5cdFx0dmlydHVhbFRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKSxcclxuXHRcdHRySGVhZEJ1ZmZlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyksXHJcblx0XHRjb2x1bW5zTnVtYmVyID0gY29uZmlnVXRpbC5nZXRLZXlIZWFkZXIoY29uZmlnKS5sZW5ndGgsXHJcblx0XHRyb3dzTnVtYmVyID0gY29uZmlnLmRhdGFTb3VyY2UubGVuZ3RoLFxyXG5cdFx0bWF4Q29sdW1uTnVtYmVyID0gY29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXIgPj0gY29sdW1uc051bWJlciA/IGNvbHVtbnNOdW1iZXIgOiBjb25maWcuaW5uZXIudmlzaWJsZUNvbHVtbk51bWJlcixcclxuXHRcdG1heFJvd051bWJlciA9IGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyID49IHJvd3NOdW1iZXIgPyByb3dzTnVtYmVyIDogY29uZmlnLmlubmVyLnZpc2libGVSb3dOdW1iZXI7XHJcblxyXG5cdHRySGVhZEJ1ZmZlci5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyUm93VG9wKTtcclxuXHJcblx0dmFyIGksIGosIHRySGVhZCwgdHJCb2R5LCBidWZmZXJDb2x1bW5MZWZ0LCBidWZmZXJDb2x1bW5SaWdodCwgYnVmZmVyUm93Qm90dG9tLCB0ZEVsZW1lbnQsIGNlbGxPYmo7XHJcblxyXG5cdC8vIEdlbmVyYXRlIHZpcnR1YWwgaGVhZGVyXHJcblx0YnVmZmVyQ29sdW1uTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0YnVmZmVyQ29sdW1uTGVmdC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyQ29sdW1uTGVmdCk7XHJcblxyXG5cdHRySGVhZEJ1ZmZlci5hcHBlbmRDaGlsZChidWZmZXJDb2x1bW5MZWZ0KTtcclxuXHJcblx0Zm9yIChpID0gMDsgaSA8IG1heENvbHVtbk51bWJlcjsgaSsrKSB7XHJcblx0XHR0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG5cdFx0dGRFbGVtZW50LnN0eWxlLm1pbldpZHRoID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbFdpZHRoICsgJ3B4JztcclxuXHRcdHRySGVhZEJ1ZmZlci5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xyXG5cdH1cclxuXHJcblx0YnVmZmVyQ29sdW1uUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG5cdGJ1ZmZlckNvbHVtblJpZ2h0LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJDb2x1bW5SaWdodCk7XHJcblxyXG5cdHRySGVhZEJ1ZmZlci5hcHBlbmRDaGlsZChidWZmZXJDb2x1bW5SaWdodCk7XHJcblxyXG5cdHZpcnR1YWxUaGVhZC5hcHBlbmRDaGlsZCh0ckhlYWRCdWZmZXIpO1xyXG5cclxuXHRjb25maWcuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlclJvdywgcm93Q291bnQpIHtcclxuXHRcdHZhciBpc0xhc3RSb3cgPSBjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXIgPT09IHJvd0NvdW50O1xyXG5cclxuXHRcdHRySGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblx0XHR0ckhlYWQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlclJvdyk7XHJcblx0XHR0ckhlYWQuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XHJcblxyXG5cdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuXHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyQ29sdW1uTGVmdCk7XHJcblxyXG5cdFx0dHJIZWFkLmFwcGVuZENoaWxkKHRkRWxlbWVudCk7XHJcblxyXG5cdFx0Zm9yIChqID0gMDsgaiA8IG1heENvbHVtbk51bWJlcjsgaisrKSB7XHJcblx0XHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuaGVhZGVyQ2VsbCk7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsRWxlbWVudC5jcmVhdGVIZWFkZXJEYXRhKGNvbmZpZywgdGRFbGVtZW50LCBoZWFkZXJSb3dbal0sIGlzTGFzdFJvdykpO1xyXG5cclxuXHRcdFx0aWYgKGlzTGFzdFJvdykge1xyXG5cdFx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuc29ydENlbGwpO1xyXG5cclxuXHRcdFx0XHRpZiAoIWNvbmZpZy5zb3J0LmVuYWJsZWQgfHwgaGVhZGVyUm93W2pdLnNvcnREaXNhYmxlZCkge1xyXG5cdFx0XHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0RGlzYWJsZWQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJIZWFkLmFwcGVuZENoaWxkKHRkRWxlbWVudCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuXHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyQ29sdW1uUmlnaHQpO1xyXG5cclxuXHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xyXG5cclxuXHRcdHZpcnR1YWxUaGVhZC5hcHBlbmRDaGlsZCh0ckhlYWQpO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBHZW5lcmF0ZSB2aXJ0dWFsIGZpbHRlciByb3dcclxuXHRpZiAoY29uZmlnLmZpbHRlci5lbmFibGVkKSB7XHJcblx0XHR0ckhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG5cdFx0dHJIZWFkLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJSb3cpO1xyXG5cdFx0dHJIZWFkLnN0eWxlLmhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxIZWlnaHQgKyAncHgnO1xyXG5cclxuXHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmJ1ZmZlckNvbHVtbkxlZnQpO1xyXG5cclxuXHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPCBtYXhDb2x1bW5OdW1iZXI7IGorKykge1xyXG5cdFx0XHRjZWxsT2JqID0gY29uZmlnVXRpbC5nZXRLZXlIZWFkZXIoY29uZmlnKVtqXTtcclxuXHJcblx0XHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCk7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsRWxlbWVudC5jcmVhdGVGaWx0ZXJEYXRhKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsT2JqLCB7fSkpO1xyXG5cclxuXHRcdFx0aWYgKGNlbGxPYmouZmlsdGVyRGlzYWJsZWQpIHtcclxuXHRcdFx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckRpc2FibGVkKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJIZWFkLmFwcGVuZENoaWxkKHRkRWxlbWVudCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuXHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyQ29sdW1uUmlnaHQpO1xyXG5cclxuXHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xyXG5cclxuXHRcdHZpcnR1YWxUaGVhZC5hcHBlbmRDaGlsZCh0ckhlYWQpO1xyXG5cdH1cclxuXHJcblx0Ly8gR2VuZXJhdGUgdmlydHVhbCBib2R5XHJcblx0Zm9yIChpID0gMDsgaSA8IG1heFJvd051bWJlcjsgaSsrKSB7XHJcblx0XHR0ckJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG5cdFx0dHJCb2R5LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhUm93KTtcclxuXHRcdHRyQm9keS5zdHlsZS5oZWlnaHQgPSBjb25maWcuZGltZW5zaW9ucy5jZWxsSGVpZ2h0ICsgJ3B4JztcclxuXHJcblx0XHR0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG5cdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJDb2x1bW5MZWZ0KTtcclxuXHJcblx0XHR0ckJvZHkuYXBwZW5kQ2hpbGQodGRFbGVtZW50KTtcclxuXHJcblx0XHRmb3IgKGogPSAwOyBqIDwgbWF4Q29sdW1uTnVtYmVyOyBqKyspIHtcclxuXHRcdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuXHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCk7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50KTtcclxuXHJcblx0XHRcdHRyQm9keS5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmJ1ZmZlckNvbHVtblJpZ2h0KTtcclxuXHJcblx0XHR0ckJvZHkuYXBwZW5kQ2hpbGQodGRFbGVtZW50KTtcclxuXHJcblx0XHR2aXJ0dWFsVGJvZHkuYXBwZW5kQ2hpbGQodHJCb2R5KTtcclxuXHR9XHJcblxyXG5cdGJ1ZmZlclJvd0JvdHRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblx0YnVmZmVyUm93Qm90dG9tLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJSb3dCb3R0b20pO1xyXG5cclxuXHR2aXJ0dWFsVGJvZHkuYXBwZW5kQ2hpbGQoYnVmZmVyUm93Qm90dG9tKTtcclxuXHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLnZpcnR1YWxUYWJsZSkuYXBwZW5kQ2hpbGQodmlydHVhbFRoZWFkKTtcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbFRhYmxlKS5hcHBlbmRDaGlsZCh2aXJ0dWFsVGJvZHkpO1xyXG5cclxuXHRjb25maWcuaW5uZXIuYnVmZmVyTGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJDb2x1bW5MZWZ0KTtcclxuXHRjb25maWcuaW5uZXIuYnVmZmVyUmlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyQ29sdW1uUmlnaHQpO1xyXG5cdGNvbmZpZy5pbm5lci5idWZmZXJUb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyUm93VG9wKTtcclxuXHRjb25maWcuaW5uZXIuYnVmZmVyQm90dG9tID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmJ1ZmZlclJvd0JvdHRvbSk7XHJcblxyXG5cdC8vIEdlbmVyYXRlIGZpeGVkIHRhYmxlXHJcblxyXG5cdGlmIChjb25maWcuZml4ZWRIZWFkZXJzLmxlbmd0aCA9PT0gMCB8fCBjb25maWcuZml4ZWRIZWFkZXJzWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkVGFibGUpLnJlbW92ZSgpO1xyXG5cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciBmaXhlZFRoZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGhlYWQnKSxcclxuXHRcdGZpeGVkVGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xyXG5cclxuXHQvLyBHZW5lcmF0ZSBmaXhlZCBoZWFkZXJcclxuXHJcblx0Zm9yIChpID0gMDsgaSA8IGNvbmZpZy5maXhlZEhlYWRlcnMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHRySGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblx0XHR0ckhlYWQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlclJvdyk7XHJcblx0XHR0ckhlYWQuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XHJcblxyXG5cdFx0Zm9yIChqID0gMDsgaiA8IGNvbmZpZy5maXhlZEhlYWRlcnNbaV0ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0dmFyIGlzTGFzdFJvdyA9IGogPT09IGNvbmZpZy5maXhlZEhlYWRlcnNbaV0ubGVuZ3RoIC0gMTtcclxuXHJcblx0XHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuaGVhZGVyQ2VsbCk7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsRWxlbWVudC5jcmVhdGVIZWFkZXJEYXRhKGNvbmZpZywgdGRFbGVtZW50LCBjb25maWcuZml4ZWRIZWFkZXJzW2ldW2pdLCBpc0xhc3RSb3cpKTtcclxuXHJcblx0XHRcdGlmIChpc0xhc3RSb3cpIHtcclxuXHRcdFx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLnNvcnRDZWxsKTtcclxuXHJcblx0XHRcdFx0aWYgKCFjb25maWcuc29ydC5lbmFibGVkIHx8IGNvbmZpZy5maXhlZEhlYWRlcnNbaV1bal0uc29ydERpc2FibGVkKSB7XHJcblx0XHRcdFx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLnNvcnREaXNhYmxlZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ckhlYWQuYXBwZW5kQ2hpbGQodGRFbGVtZW50KTtcclxuXHRcdH1cclxuXHJcblx0XHRmaXhlZFRoZWFkLmFwcGVuZENoaWxkKHRySGVhZCk7XHJcblx0fVxyXG5cclxuXHQvLyBHZW5lcmF0ZSBmaXhlZCBmaWx0ZXIgcm93XHJcblxyXG5cdGlmIChjb25maWcuZmlsdGVyLmVuYWJsZWQgJiZcclxuXHRcdGNvbmZpZy5maXhlZEhlYWRlcnMubGVuZ3RoID4gMCAmJlxyXG5cdFx0Y29uZmlnLmZpeGVkSGVhZGVyc1tjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXJdLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHR0ckhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG5cdFx0dHJIZWFkLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJSb3cpO1xyXG5cdFx0dHJIZWFkLnN0eWxlLmhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxIZWlnaHQgKyAncHgnO1xyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPCBjb25maWcuZml4ZWRIZWFkZXJzW2NvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlcl0ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0Y2VsbE9iaiA9IGNvbmZpZ1V0aWwuZ2V0Rml4ZWRLZXlIZWFkZXIoY29uZmlnKVtqXTtcclxuXHJcblx0XHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCk7XHJcblx0XHRcdHRkRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxXaWR0aCArICdweCc7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsRWxlbWVudC5jcmVhdGVGaWx0ZXJEYXRhKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsT2JqLCB7fSkpO1xyXG5cclxuXHRcdFx0aWYgKGNlbGxPYmouZmlsdGVyRGlzYWJsZWQpIHtcclxuXHRcdFx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckRpc2FibGVkKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJIZWFkLmFwcGVuZENoaWxkKHRkRWxlbWVudCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zml4ZWRUaGVhZC5hcHBlbmRDaGlsZCh0ckhlYWQpO1xyXG5cdH1cclxuXHJcblx0Ly8gR2VuZXJhdGUgZml4ZWQgYm9keVxyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDwgbWF4Um93TnVtYmVyOyBpKyspIHtcclxuXHRcdHRyQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblx0XHR0ckJvZHkuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmRhdGFSb3cpO1xyXG5cdFx0dHJCb2R5LnN0eWxlLmhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxIZWlnaHQgKyAncHgnO1xyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPCBjb25maWcuZml4ZWRIZWFkZXJzW2NvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlcl0ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuXHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCk7XHJcblxyXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50KTtcclxuXHJcblx0XHRcdHRyQm9keS5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZpeGVkVGJvZHkuYXBwZW5kQ2hpbGQodHJCb2R5KTtcclxuXHR9XHJcblxyXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5maXhlZFRhYmxlKS5hcHBlbmRDaGlsZChmaXhlZFRoZWFkKTtcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZml4ZWRUYWJsZSkuYXBwZW5kQ2hpbGQoZml4ZWRUYm9keSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xyXG5cdHJldHVybiBkYXRhVXRpbC5jbG9uZU9iamVjdChjb25maWd1cmF0aW9uLkRFRkFVTFRTKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Z2VuZXJhdGVUYWJsZTogZ2VuZXJhdGVUYWJsZSxcclxuXHRkZXN0cm95VGFibGU6IGRlc3Ryb3lUYWJsZSxcclxuXHRnZXREZWZhdWx0T3B0aW9uczogZ2V0RGVmYXVsdE9wdGlvbnNcclxufTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgY29uZmlnVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24nKSxcclxuXHRkb21Nb2R1bGUgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9kb20nKTtcclxuXHJcbnZhciBERUxBWSA9IDIwMDtcclxuXHJcbnZhciBpc0V2ZW50RGVsYXllZCA9IGZhbHNlO1xyXG5cclxuZnVuY3Rpb24gcmVkcmF3VGFibGUoY29uZmlnKSB7XHJcblx0dmFyIHByZXZSb3dOdW1iZXIgPSBjb25maWcuaW5uZXIudmlzaWJsZVJvd051bWJlcixcclxuXHRcdHByZXZDb2x1bW5OdW1iZXIgPSBjb25maWcuaW5uZXIudmlzaWJsZUNvbHVtbk51bWJlcjtcclxuXHJcblx0Y29uZmlnLmRpbWVuc2lvbnMuY29udGFpbmVySGVpZ2h0ID0gY29uZmlnVXRpbC5jYWxjdWxhdGVWaXJ0dWFsQ29udGFpbmVySGVpZ2h0KGNvbmZpZywgY29uZmlnVXRpbC5nZXREZWZhdWx0Q29udGFpbmVySGVpZ2h0KGNvbmZpZykpO1xyXG5cdGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyID0gY29uZmlnVXRpbC5nZXRWaXNpYmxlUm93TnVtYmVyKGNvbmZpZyk7XHJcblx0Y29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXIgPSBjb25maWdVdGlsLmdldFZpc2libGVDb2x1bW5OdW1iZXIoY29uZmlnKTtcclxuXHRjb25maWcuaW5uZXIudGFibGVPZmZzZXRXaWR0aCA9IGNvbmZpZ1V0aWwuZ2V0VGFibGVPZmZzZXRXaWR0aChjb25maWcpO1xyXG5cdGNvbmZpZy5pbm5lci50YWJsZU9mZnNldEhlaWdodCA9IGNvbmZpZ1V0aWwuZ2V0VGFibGVPZmZzZXRIZWlnaHQoY29uZmlnKTtcclxuXHJcblx0dmFyIGksIGxhc3RSb3csIGxhc3RDb2x1bW5zO1xyXG5cclxuXHRpZiAocHJldlJvd051bWJlciA9PT0gY29uZmlnLmlubmVyLnZpc2libGVSb3dOdW1iZXIgJiZcclxuXHRcdHByZXZDb2x1bW5OdW1iZXIgPT09IGNvbmZpZy5pbm5lci52aXNpYmxlQ29sdW1uTnVtYmVyKSB7XHJcblxyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0aWYgKGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyIDwgMSkge1xyXG5cdFx0Y29uZmlnLmlubmVyLnZpc2libGVSb3dOdW1iZXIgPSAxO1xyXG5cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciB2aXJ0dWFsQ29udGFpbmVyU2VsZWN0b3IgPSAnIycgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkICsgJyAuJyArIGNvbmZpZy5zZWxlY3RvcnMudmlydHVhbENvbnRhaW5lcixcclxuXHRcdGxhc3RGaXhlZFJvd1NlbGVjdG9yID0gJyMnICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy51bmlxdWVJZCArICcgLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkVGFibGUgKyAnIC5kYXRhLXJvdzpsYXN0LW9mLXR5cGUnLFxyXG5cdFx0bGFzdFZpcnR1YWxSb3dTZWxlY3RvciA9ICcjJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMudW5pcXVlSWQgKyAnIC4nICsgY29uZmlnLnNlbGVjdG9ycy52aXJ0dWFsVGFibGUgKyAnIC5kYXRhLXJvdzpudGgtbGFzdC1vZi10eXBlKDIpJyxcclxuXHRcdGxhc3RWaXJ0dWFsQ29sdW1uID0gJyMnICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy51bmlxdWVJZCArICcgLicgKyBjb25maWcuc2VsZWN0b3JzLnZpcnR1YWxUYWJsZSArICcgdGQ6bnRoLWxhc3Qtb2YtdHlwZSgyKSc7XHJcblxyXG5cdHZhciB2aXJ0dWFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih2aXJ0dWFsQ29udGFpbmVyU2VsZWN0b3IpO1xyXG5cclxuXHR2aXJ0dWFsQ29udGFpbmVyLnN0eWxlLm1heEhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNvbnRhaW5lckhlaWdodCArICdweCc7XHJcblx0dmlydHVhbENvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb25maWcuZGltZW5zaW9ucy5jb250YWluZXJIZWlnaHQgKyAncHgnO1xyXG5cclxuXHRpZiAocHJldlJvd051bWJlciA8IGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyKSB7IC8vIEhhIHTDtmJiIHNvciBsZXR0XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgY29uZmlnLmlubmVyLnZpc2libGVSb3dOdW1iZXIgLSBwcmV2Um93TnVtYmVyOyBpKyspIHtcclxuXHRcdFx0bGFzdFJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGFzdEZpeGVkUm93U2VsZWN0b3IpO1xyXG5cclxuXHRcdFx0aWYgKGxhc3RSb3cgIT09IG51bGwpIHtcclxuXHRcdFx0XHRsYXN0Um93LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxhc3RSb3cuY2xvbmVOb2RlKHRydWUpLCBsYXN0Um93KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGFzdFJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGFzdFZpcnR1YWxSb3dTZWxlY3Rvcik7XHJcblx0XHRcdGxhc3RSb3cucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGFzdFJvdy5jbG9uZU5vZGUodHJ1ZSksIGxhc3RSb3cpO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAocHJldlJvd051bWJlciA+IGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyKSB7IC8vIEhhIGtldmVzZWJiIHNvciBsZXR0XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgcHJldlJvd051bWJlciAtIGNvbmZpZy5pbm5lci52aXNpYmxlUm93TnVtYmVyOyBpKyspIHtcclxuXHRcdFx0bGFzdFJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGFzdEZpeGVkUm93U2VsZWN0b3IpO1xyXG5cclxuXHRcdFx0aWYgKGxhc3RSb3cgIT09IG51bGwpIHtcclxuXHRcdFx0XHRsYXN0Um93LnJlbW92ZSgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsYXN0Um93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihsYXN0VmlydHVhbFJvd1NlbGVjdG9yKTtcclxuXHRcdFx0bGFzdFJvdy5yZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmIChwcmV2Q29sdW1uTnVtYmVyIDwgY29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXIpIHsgLy8gSGEgdMO2YmIgb3N6bG9wIGxldHRcclxuXHRcdGZvciAoaSA9IDA7IGkgPCBjb25maWcuaW5uZXIudmlzaWJsZUNvbHVtbk51bWJlciAtIHByZXZDb2x1bW5OdW1iZXI7IGkrKykge1xyXG5cdFx0XHRsYXN0Q29sdW1ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobGFzdFZpcnR1YWxDb2x1bW4pO1xyXG5cdFx0XHRsYXN0Q29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbikge1xyXG5cdFx0XHRcdGNvbHVtbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb2x1bW4uY2xvbmVOb2RlKHRydWUpLCBjb2x1bW4pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKHByZXZDb2x1bW5OdW1iZXIgPiBjb25maWcuaW5uZXIudmlzaWJsZUNvbHVtbk51bWJlcikgeyAvLyBIYSBrZXZlc2ViYiBvc3psb3AgbGV0dFxyXG5cdFx0Zm9yIChpID0gMDsgaSA8IHByZXZDb2x1bW5OdW1iZXIgLSBjb25maWcuaW5uZXIudmlzaWJsZUNvbHVtbk51bWJlcjsgaSsrKSB7XHJcblx0XHRcdGxhc3RDb2x1bW5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChsYXN0VmlydHVhbENvbHVtbik7XHJcblx0XHRcdGxhc3RDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKSB7XHJcblx0XHRcdFx0Y29sdW1uLnJlbW92ZSgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbmZpZy5pbm5lci5idWZmZXJMZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmJ1ZmZlckNvbHVtbkxlZnQpO1xyXG5cdGNvbmZpZy5pbm5lci5idWZmZXJSaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJDb2x1bW5SaWdodCk7XHJcblx0Y29uZmlnLmlubmVyLmJ1ZmZlclRvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJSb3dUb3ApO1xyXG5cdGNvbmZpZy5pbm5lci5idWZmZXJCb3R0b20gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuYnVmZmVyUm93Qm90dG9tKTtcclxuXHJcblx0ZG9tTW9kdWxlLnVwZGF0ZUJ1ZmZlcnMoY29uZmlnKTtcclxuXHRkb21Nb2R1bGUudXBkYXRlVGFibGUoY29uZmlnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzaXplRXZlbnRIYW5kbGVyKGNvbmZpZykge1xyXG5cdGlmICghaXNFdmVudERlbGF5ZWQpIHtcclxuXHRcdGlzRXZlbnREZWxheWVkID0gdHJ1ZTtcclxuXHJcblx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0aXNFdmVudERlbGF5ZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdHJlZHJhd1RhYmxlKGNvbmZpZyk7XHJcblx0XHR9LCBERUxBWSk7XHJcblx0fVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRyZXNpemVFdmVudEhhbmRsZXI6IHJlc2l6ZUV2ZW50SGFuZGxlclxyXG59OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBkb21Nb2R1bGUgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9kb20nKSxcclxuXHRjb25maWdVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlndXJhdGlvbicpLFxyXG5cdGRhdGFVdGlsICAgPSByZXF1aXJlKCcuLi91dGlscy9kYXRhJyk7XHJcblxyXG5mdW5jdGlvbiBzb3J0QnlDb2x1bW4oY29uZmlnLCBjb2x1bW4pIHtcclxuXHR2YXIgYXR0cmlidXRlID0gY29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnKSxcclxuXHRcdGhlYWRlck9iaiA9IGNvbmZpZ1V0aWwuZ2V0SGVhZGVyT2JqZWN0KGNvbmZpZywgYXR0cmlidXRlKSxcclxuXHRcdGRpcmVjdGlvbiA9ICd1cCc7XHJcblxyXG5cdGlmIChjb25maWcuaW5uZXIuc29ydC5hdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZSAmJlxyXG5cdFx0Y29uZmlnLmlubmVyLnNvcnQuZGlyZWN0aW9uID09PSAndXAnKSB7XHJcblxyXG5cdFx0ZGlyZWN0aW9uID0gJ2Rvd24nO1xyXG5cdH1cclxuXHJcblx0Y29uZmlnLmlubmVyLnNvcnQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG5cdGNvbmZpZy5pbm5lci5zb3J0LmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcclxuXHRjb25maWcuaW5uZXIuc29ydC5kYXRhVHlwZSA9IGhlYWRlck9iai5kYXRhVHlwZTtcclxuXHJcblx0c29ydChjb25maWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb3J0KGNvbmZpZywgdXBkYXRlVGFibGUpIHtcclxuXHR1cGRhdGVUYWJsZSA9IHVwZGF0ZVRhYmxlICE9PSBmYWxzZTtcclxuXHJcblx0Y29uZmlnLmRhdGFTb3VyY2Uuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRpZiAoY29uZmlnLnNvcnQuY3VzdG9tU29ydCAhPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gY29uZmlnLnNvcnQuY3VzdG9tU29ydChhLCBiLCB7XHJcblx0XHRcdFx0YXR0cmlidXRlOiBjb25maWcuaW5uZXIuc29ydC5hdHRyaWJ1dGUsXHJcblx0XHRcdFx0ZGlyZWN0aW9uOiBjb25maWcuaW5uZXIuc29ydC5kaXJlY3Rpb24sXHJcblx0XHRcdFx0ZGF0YVR5cGU6IGNvbmZpZy5pbm5lci5zb3J0LmRhdGFUeXBlLFxyXG5cdFx0XHRcdGVkaXRlZFZhbHVlczogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcclxuXHRcdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXlcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGF0dHJpYnV0ZSA9IGNvbmZpZy5pbm5lci5zb3J0LmF0dHJpYnV0ZSB8fCBjb25maWcuc29ydC5kZWZhdWx0LFxyXG5cdFx0XHRkaXJlY3Rpb24gPSBjb25maWcuaW5uZXIuc29ydC5kaXJlY3Rpb24gfHwgJ2Rvd24nLFxyXG5cdFx0XHRkYXRhVHlwZSA9IGNvbmZpZy5pbm5lci5zb3J0LmRhdGFUeXBlIHx8IGdldFNvcnRUeXBlKGNvbmZpZywgY29uZmlnLnNvcnQuZGVmYXVsdCk7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGFVdGlsLmRlZmF1bHRDb21wYXJhdG9yKGEsIGIsIHtcclxuXHRcdFx0YXR0cmlidXRlOiBhdHRyaWJ1dGUsXHJcblx0XHRcdGRpcmVjdGlvbjogZGlyZWN0aW9uLFxyXG5cdFx0XHRkYXRhVHlwZTogZGF0YVR5cGUsXHJcblx0XHRcdGVkaXRlZFZhbHVlczogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcclxuXHRcdFx0dW5pcXVlUm93S2V5OiBjb25maWcudW5pcXVlUm93S2V5LFxyXG5cdFx0XHRuYW1lOiBjb25maWcubG9jYWxlLm5hbWVcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRpZiAodXBkYXRlVGFibGUpIHtcclxuXHRcdGRvbU1vZHVsZS51cGRhdGVUYWJsZShjb25maWcpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRTb3J0KGNvbmZpZykge1xyXG5cdGNvbmZpZy5pbm5lci5zb3J0LmF0dHJpYnV0ZSA9XHJcblx0Y29uZmlnLmlubmVyLnNvcnQuZGlyZWN0aW9uID1cclxuXHRjb25maWcuaW5uZXIuc29ydC5kYXRhVHlwZSA9IHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWRcclxuXHJcblx0Y29uZmlnLmRhdGFTb3VyY2Uuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRpZiAoY29uZmlnLnNvcnQuY3VzdG9tU29ydCAhPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gY29uZmlnLnNvcnQuY3VzdG9tU29ydChhLCBiLCB7XHJcblx0XHRcdFx0YXR0cmlidXRlOiBjb25maWcuc29ydC5kZWZhdWx0LFxyXG5cdFx0XHRcdGRpcmVjdGlvbjogJ2Rvd24nLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiBnZXRTb3J0VHlwZShjb25maWcsIGNvbmZpZy5zb3J0LmRlZmF1bHQpLFxyXG5cdFx0XHRcdGVkaXRlZFZhbHVlczogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcclxuXHRcdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXlcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGFVdGlsLmRlZmF1bHRDb21wYXJhdG9yKGEsIGIsIHtcclxuXHRcdFx0YXR0cmlidXRlOiBjb25maWcuc29ydC5kZWZhdWx0LFxyXG5cdFx0XHRkaXJlY3Rpb246ICdkb3duJyxcclxuXHRcdFx0ZGF0YVR5cGU6IGdldFNvcnRUeXBlKGNvbmZpZywgY29uZmlnLnNvcnQuZGVmYXVsdCksXHJcblx0XHRcdGVkaXRlZFZhbHVlczogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcclxuXHRcdFx0dW5pcXVlUm93S2V5OiBjb25maWcudW5pcXVlUm93S2V5LFxyXG5cdFx0XHRuYW1lOiBjb25maWcubG9jYWxlLm5hbWVcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkb21Nb2R1bGUudXBkYXRlVGFibGUoY29uZmlnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U29ydFR5cGUoY29uZmlnLCBhdHRyaWJ1dGUpIHtcclxuXHR2YXIgaGVhZGVyT2JqID0gY29uZmlnVXRpbC5nZXRIZWFkZXJPYmplY3QoY29uZmlnLCBhdHRyaWJ1dGUpO1xyXG5cclxuXHRyZXR1cm4gdHlwZW9mIGhlYWRlck9iaiA9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgaGVhZGVyT2JqLmRhdGFUeXBlID09ICd1bmRlZmluZWQnID8gJ3N0cmluZycgOiBoZWFkZXJPYmouZGF0YVR5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdHNvcnRCeUNvbHVtbjogc29ydEJ5Q29sdW1uLFxyXG5cdHNvcnQ6IHNvcnQsXHJcblx0cmVzZXRTb3J0OiByZXNldFNvcnRcclxufTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgZG9tVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xyXG5cclxuZnVuY3Rpb24gc2hvdyhjb25maWcsIG9wdGlvbnMpIHtcclxuXHRzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xyXG5cdFx0Y2FzZSAnaW5mbyc6XHJcblx0XHRcdHNob3dJbmZvKGNvbmZpZywgb3B0aW9ucyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnd2Fybic6XHJcblx0XHRcdHNob3dXYXJuKGNvbmZpZywgb3B0aW9ucyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnZXJyb3InOlxyXG5cdFx0XHRzaG93RXJyb3IoY29uZmlnLCBvcHRpb25zKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRjb25maWcubW9kdWxlcy50b29sdGlwLnNob3cob3B0aW9ucyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZShjb25maWcsIGVsZW1lbnQpIHtcclxuXHRjb25maWcubW9kdWxlcy50b29sdGlwLmhpZGUoZWxlbWVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVBbGwoY29uZmlnKSB7XHJcblx0Y29uZmlnLm1vZHVsZXMudG9vbHRpcC5oaWRlQWxsKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dJbmZvKGNvbmZpZywgb3B0aW9ucykge1xyXG5cdGNvbmZpZy5tb2R1bGVzLnRvb2x0aXAuc2hvd0luZm8ob3B0aW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dXYXJuKGNvbmZpZywgb3B0aW9ucykge1xyXG5cdGNvbmZpZy5tb2R1bGVzLnRvb2x0aXAuc2hvd1dhcm4ob3B0aW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dFcnJvcihjb25maWcsIG9wdGlvbnMpIHtcclxuXHRjb25maWcubW9kdWxlcy50b29sdGlwLnNob3dFcnJvcihvcHRpb25zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZShjb25maWcsIGVsZW1lbnQpIHtcclxuXHR2YXIgY2VsbERhdGFDb250YWluZXIgPSBlbGVtZW50ID09PSBudWxsID8gbnVsbCA6IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmNlbGxEYXRhQ29udGFpbmVyKTtcclxuXHJcblx0aWYgKGNlbGxEYXRhQ29udGFpbmVyID09PSBudWxsIHx8XHJcblx0XHQhZG9tVXRpbC5pc0VsbGlwc2lzQWN0aXZlKGNlbGxEYXRhQ29udGFpbmVyKSAmJlxyXG5cdFx0IWRvbVV0aWwuaXNPdmVyZmxvd24oY2VsbERhdGFDb250YWluZXIpKSB7XHJcblxyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0c2hvd0luZm8oY29uZmlnLCB7XHJcblx0XHRlbGVtZW50OiBlbGVtZW50LFxyXG5cdFx0dGV4dDogZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJylcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZShjb25maWcsIGVsZW1lbnQpIHtcclxuXHRoaWRlKGNvbmZpZywgZWxlbWVudCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdHNob3c6IHNob3csXHJcblx0aGlkZTogaGlkZSxcclxuXHRoaWRlQWxsOiBoaWRlQWxsLFxyXG5cdHNob3dJbmZvOiBzaG93SW5mbyxcclxuXHRzaG93V2Fybjogc2hvd1dhcm4sXHJcblx0c2hvd0Vycm9yOiBzaG93RXJyb3IsXHJcblx0b25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZTogb25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZSxcclxuXHRvbk1vdXNlTGVhdmVDZWxsV2l0aFRpdGxlOiBvbk1vdXNlTGVhdmVDZWxsV2l0aFRpdGxlXHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaWYgKHR5cGVvZiBBcnJheS5wcm90b3R5cGUuZmluZCA9PSAndW5kZWZpbmVkJykge1xyXG5cdEFycmF5LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZVxyXG5cdFx0aWYgKHRoaXMgPT09IG51bGwpIHtcclxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmQgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xyXG5cdFx0dmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xyXG5cdFx0dmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XHJcblx0XHR2YXIgdmFsdWU7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YWx1ZSA9IGxpc3RbaV07XHJcblx0XHRcdGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxyXG5cdH07XHJcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcclxuXHRFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID1cclxuXHRcdEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0RWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0RWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0RWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRmdW5jdGlvbihzKSB7XHJcblx0XHRcdHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxyXG5cdFx0XHRcdGkgPSBtYXRjaGVzLmxlbmd0aDtcclxuXHJcblx0XHRcdHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuXHRcdFx0cmV0dXJuIGkgPiAtMTtcclxuXHRcdH07XHJcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5bIEVsZW1lbnQucHJvdG90eXBlLCBDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgRG9jdW1lbnRUeXBlLnByb3RvdHlwZSBdLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG5cdGlmIChpdGVtLmhhc093blByb3BlcnR5KCdyZW1vdmUnKSkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ3JlbW92ZScsIHtcclxuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuXHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHR3cml0YWJsZTogdHJ1ZSxcclxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcblx0XHRcdGlmICh0aGlzLnBhcmVudE5vZGUgIT09IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaWYgKCFOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCkge1xyXG5cdE5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIGFyZ3VtZW50KSB7XHJcblx0XHRhcmd1bWVudCA9IGFyZ3VtZW50IHx8IHdpbmRvdztcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y2FsbGJhY2suY2FsbChhcmd1bWVudCwgdGhpc1tpXSwgaSwgdGhpcyk7XHJcblx0XHR9XHJcblx0fTtcclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPSAnZnVuY3Rpb24nKSB7XHJcblx0Ly8gTXVzdCBiZSB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XHJcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXNzaWduKHRhcmdldCkgeyAvLyAubGVuZ3RoIG9mIGZ1bmN0aW9uIGlzIDJcclxuXHRcdFx0aWYgKHRhcmdldCA9PT0gbnVsbCkgeyAvLyBUeXBlRXJyb3IgaWYgdW5kZWZpbmVkIG9yIG51bGxcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xyXG5cdFx0XHRcdHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcclxuXHJcblx0XHRcdFx0aWYgKG5leHRTb3VyY2UgIT09IG51bGwpIHsgLy8gU2tpcCBvdmVyIGlmIHVuZGVmaW5lZCBvciBudWxsXHJcblx0XHRcdFx0XHRmb3IgKHZhciBuZXh0S2V5IGluIG5leHRTb3VyY2UpIHtcclxuXHRcdFx0XHRcdFx0Ly8gQXZvaWQgYnVncyB3aGVuIGhhc093blByb3BlcnR5IGlzIHNoYWRvd2VkXHJcblx0XHRcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dFNvdXJjZSwgbmV4dEtleSkpIHtcclxuXHRcdFx0XHRcdFx0XHR0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRvO1xyXG5cdFx0fSxcclxuXHRcdHdyaXRhYmxlOiB0cnVlLFxyXG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlXHJcblx0fSk7XHJcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVWaXJ0dWFsQ29udGFpbmVySGVpZ2h0KGNvbmZpZywgaGVpZ2h0KSB7XHJcblx0aWYgKHR5cGVvZiBoZWlnaHQgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdHJldHVybiBoZWlnaHQ7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY29uZmlnLmlubmVyLm1pbkJ1ZmZlckhlaWdodCAqIDIgKyBNYXRoLmZsb29yKGhlaWdodCAvIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxIZWlnaHQpICogY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdENvbnRhaW5lckhlaWdodChjb25maWcpIHtcclxuXHRyZXR1cm4gY2FsY3VsYXRlVmlydHVhbENvbnRhaW5lckhlaWdodChjb25maWcsIHdpbmRvdy5pbm5lckhlaWdodCAtIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnNlbGVjdG9ycy5tYWluQ29udGFpbmVyKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSA2NCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEluZGV4T2ZDZWxsS2V5SGVhZGVyKGNvbmZpZykge1xyXG5cdHJldHVybiBjb25maWcuaGVhZGVycy5sZW5ndGggLSAxO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTb3J0RGVmYXVsdChjb25maWcpIHtcclxuXHRyZXR1cm4gY29uZmlnLnVuaXF1ZVJvd0tleTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TWF4Q29sc3Bhbihjb25maWcpIHtcclxuXHR2YXIgbWF4VmFsID0gMTtcclxuXHJcblx0Y29uZmlnLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XHJcblx0XHRlbGVtZW50LmZvckVhY2goZnVuY3Rpb24oc3ViRWxlbWVudCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIHN1YkVsZW1lbnQuY29sc3BhbiAhPSAndW5kZWZpbmVkJyAmJiBtYXhWYWwgPCBzdWJFbGVtZW50LmNvbHNwYW4pIHtcclxuXHRcdFx0XHRtYXhWYWwgPSBzdWJFbGVtZW50LmNvbHNwYW47XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gbWF4VmFsO1xyXG59XHJcblxyXG4vLyBGaXJlZm94IHVzaW5nIE1vdXNlRXZlbnQuRE9NX0RFTFRBX0xJTkUgfHwgTW91c2VFdmVudC5ET01fREVMVEFfUEFHRSBpbnN0ZWFkIG9mIGV4YWN0IHBpeGVscywgd2hlbiBtZWFzdXJpbmcgc2Nyb2xsIGRlbHRhIHZhbHVlcy5cclxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGdpdmUgdGhlIGV4YWN0IGxpbmUgaGVpZ2h0IGZvciB0aGUgcGl4ZWwgY29udmVyc2lvblxyXG5mdW5jdGlvbiBnZXRTY3JvbGxMaW5lSGVpZ2h0KCkge1xyXG5cdHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuXHJcblx0aWZyYW1lLnNyYyA9ICcjJztcclxuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcblxyXG5cdHZhciBpd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3csXHJcblx0XHRpZG9jID0gaXdpbi5kb2N1bWVudDtcclxuXHJcblx0aWRvYy5vcGVuKCk7XHJcblx0aWRvYy53cml0ZSgnPCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PjxzcGFuPmE8L3NwYW4+PC9ib2R5PjwvaHRtbD4nKTtcclxuXHRpZG9jLmNsb3NlKCk7XHJcblxyXG5cdHZhciBzcGFuID0gaWRvYy5ib2R5LmZpcnN0RWxlbWVudENoaWxkLFxyXG5cdFx0ciA9IHNwYW4ub2Zmc2V0SGVpZ2h0O1xyXG5cclxuXHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XHJcblxyXG5cdHJldHVybiByO1xyXG59XHJcblxyXG4vLyBGaXJlZm94IHVzaW5nIE1vdXNlRXZlbnQuRE9NX0RFTFRBX0xJTkUgfHwgTW91c2VFdmVudC5ET01fREVMVEFfUEFHRSBpbnN0ZWFkIG9mIGV4YWN0IHBpeGVscywgd2hlbiBtZWFzdXJpbmcgc2Nyb2xsIGRlbHRhIHZhbHVlcy5cclxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGdpdmUgdGhlIGV4YWN0IHBhZ2UgaGVpZ2h0IGZvciB0aGUgcGl4ZWwgY29udmVyc2lvblxyXG5mdW5jdGlvbiBnZXRTY3JvbGxQYWdlSGVpZ2h0KCkge1xyXG5cdHJldHVybiB3aW5kb3cuZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFZpc2libGVSb3dOdW1iZXIoY29uZmlnKSB7XHJcblx0dmFyIGhhc0ZpbHRlciA9IGNvbmZpZy5maWx0ZXIuZW5hYmxlZCxcclxuXHRcdGNvbnRhaW5lckhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNvbnRhaW5lckhlaWdodCAtIGNvbmZpZy5pbm5lci5taW5CdWZmZXJIZWlnaHQgKiAyLFxyXG5cdFx0ZGF0YUNlbGxzID0gTWF0aC5mbG9vcihjb250YWluZXJIZWlnaHQgLyBjb25maWcuZGltZW5zaW9ucy5jZWxsSGVpZ2h0KSxcclxuXHRcdGhlYWRlckNlbGxzID0gY29uZmlnLmhlYWRlcnMubGVuZ3RoICsgKGhhc0ZpbHRlciA/IDEgOiAwKTtcclxuXHJcblx0cmV0dXJuIGRhdGFDZWxscyAtIGhlYWRlckNlbGxzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRWaXNpYmxlQ29sdW1uTnVtYmVyKGNvbmZpZykge1xyXG5cdHJldHVybiBNYXRoLmZsb29yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy52aXJ0dWFsQ29udGFpbmVyKS5vZmZzZXRXaWR0aCAvIGdldENlbGxGdWxsV2lkdGgoY29uZmlnKSArXHJcblx0XHQoY29uZmlnLmlubmVyLmNvbHNwYW5PZmZzZXQgPiAyID8gY29uZmlnLmlubmVyLmNvbHNwYW5PZmZzZXQgOiAyKSArIGNvbmZpZy5pbm5lci5jb2xzcGFuT2Zmc2V0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGFibGVPZmZzZXRXaWR0aChjb25maWcpIHtcclxuXHR2YXIgdGFiYmxlT2Zmc2V0Q29sdW1ucyA9IGdldEtleUhlYWRlcihjb25maWcpLmxlbmd0aCA8IGNvbmZpZy5pbm5lci52aXNpYmxlQ29sdW1uTnVtYmVyID8gY29uZmlnLmlubmVyLm1pbkJ1ZmZlcldpZHRoIDogZ2V0S2V5SGVhZGVyKGNvbmZpZykubGVuZ3RoIC0gY29uZmlnLmlubmVyLnZpc2libGVDb2x1bW5OdW1iZXI7XHJcblxyXG5cdHJldHVybiB0YWJibGVPZmZzZXRDb2x1bW5zICogZ2V0Q2VsbEZ1bGxXaWR0aChjb25maWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUYWJsZU9mZnNldEhlaWdodChjb25maWcpIHtcclxuXHR2YXIgdGFibGVPZmZzZXRSb3dzID0gY29uZmlnLmRhdGFTb3VyY2UubGVuZ3RoIDwgY29uZmlnLmlubmVyLnZpc2libGVSb3dOdW1iZXIgPyBjb25maWcuaW5uZXIubWluQnVmZmVySGVpZ2h0IDogY29uZmlnLmRhdGFTb3VyY2UubGVuZ3RoIC0gY29uZmlnLmlubmVyLnZpc2libGVSb3dOdW1iZXIgKyAxO1xyXG5cclxuXHRyZXR1cm4gdGFibGVPZmZzZXRSb3dzICogY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q2VsbEZ1bGxXaWR0aChjb25maWcpIHtcclxuXHRyZXR1cm4gY29uZmlnLmRpbWVuc2lvbnMuY2VsbFBhZGRpbmdIb3Jpem9udGFsICogMiArIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxXaWR0aCArIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxCb3JkZXJXaWR0aDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0S2V5SGVhZGVyKGNvbmZpZykge1xyXG5cdHJldHVybiBjb25maWcuaGVhZGVyc1tjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXJdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGaXhlZEtleUhlYWRlcihjb25maWcpIHtcclxuXHRyZXR1cm4gY29uZmlnLmZpeGVkSGVhZGVyc1tjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXJdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIZWFkZXJPYmplY3QoY29uZmlnLCBhdHRyaWJ1dGUpIHtcclxuXHRyZXR1cm4gZ2V0S2V5SGVhZGVyKGNvbmZpZykuZmluZChmdW5jdGlvbihjb2x1bW4pIHtcclxuXHRcdHJldHVybiBjb2x1bW4ua2V5ID09PSBhdHRyaWJ1dGU7XHJcblx0fSkgfHwgZ2V0Rml4ZWRLZXlIZWFkZXIoY29uZmlnKS5maW5kKGZ1bmN0aW9uKGNvbHVtbikge1xyXG5cdFx0cmV0dXJuIGNvbHVtbi5rZXkgPT09IGF0dHJpYnV0ZTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbmlsKCkge1xyXG5cdHJldHVybiBmdW5jdGlvbigpIHt9O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cmFwcGVyKGYpIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiBmOyB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRjYWxjdWxhdGVWaXJ0dWFsQ29udGFpbmVySGVpZ2h0OiBjYWxjdWxhdGVWaXJ0dWFsQ29udGFpbmVySGVpZ2h0LFxyXG5cdGdldERlZmF1bHRDb250YWluZXJIZWlnaHQ6IGdldERlZmF1bHRDb250YWluZXJIZWlnaHQsXHJcblx0Z2V0SW5kZXhPZkNlbGxLZXlIZWFkZXI6IGdldEluZGV4T2ZDZWxsS2V5SGVhZGVyLFxyXG5cdGdldFNvcnREZWZhdWx0OiBnZXRTb3J0RGVmYXVsdCxcclxuXHRnZXRNYXhDb2xzcGFuOiBnZXRNYXhDb2xzcGFuLFxyXG5cdGdldFNjcm9sbExpbmVIZWlnaHQ6IGdldFNjcm9sbExpbmVIZWlnaHQsXHJcblx0Z2V0U2Nyb2xsUGFnZUhlaWdodDogZ2V0U2Nyb2xsUGFnZUhlaWdodCxcclxuXHRnZXRWaXNpYmxlUm93TnVtYmVyOiBnZXRWaXNpYmxlUm93TnVtYmVyLFxyXG5cdGdldFZpc2libGVDb2x1bW5OdW1iZXI6IGdldFZpc2libGVDb2x1bW5OdW1iZXIsXHJcblx0Z2V0VGFibGVPZmZzZXRXaWR0aDogZ2V0VGFibGVPZmZzZXRXaWR0aCxcclxuXHRnZXRUYWJsZU9mZnNldEhlaWdodDogZ2V0VGFibGVPZmZzZXRIZWlnaHQsXHJcblx0Z2V0Q2VsbEZ1bGxXaWR0aDogZ2V0Q2VsbEZ1bGxXaWR0aCxcclxuXHRnZXRLZXlIZWFkZXI6IGdldEtleUhlYWRlcixcclxuXHRnZXRGaXhlZEtleUhlYWRlcjogZ2V0Rml4ZWRLZXlIZWFkZXIsXHJcblx0Z2V0SGVhZGVyT2JqZWN0OiBnZXRIZWFkZXJPYmplY3QsXHJcblx0bmlsOiBuaWwsXHJcblx0d3JhcHBlcjogd3JhcHBlclxyXG59OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBGSUxURVJfVFlQRVMgPSBbICdlcXVhbHMnLCAnZXF1YWxzQ2FzZUluc2Vuc2l0aXZlJywgJ2xpa2UnLCAnbGlrZUNhc2VJbnNlbnNpdGl2ZScsICdncmVhdGVyVGhhbicsICdncmVhdGVyT3JFcXVhbCcsXHJcblx0J2xlc3NUaGFuJywgJ2xlc3NPckVxdWFsJywgJ2JldHdlZW4nLCAnYmV0d2VlbkluY2x1c2l2ZScsICdjb250YWlucycgXTtcclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJhdG9yKGEsIGIsIG9wdGlvbnMpIHtcclxuXHR2YXIgYXR0ckEgPSBnZXRNZXJnZWRWYWx1ZShhLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSxcclxuXHRcdGF0dHJCID0gZ2V0TWVyZ2VkVmFsdWUoYiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSksXHJcblx0XHRpc0Rvd24gPSBvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2Rvd24nO1xyXG5cclxuXHRpZiAob3B0aW9ucy5kYXRhVHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdHZhciBjb21wYXJlUmVzdWx0ID0gMDtcclxuXHJcblx0XHRpZiAodHlwZW9mIGF0dHJBID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdGNvbXBhcmVSZXN1bHQgPSAtMTtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGF0dHJCID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdGNvbXBhcmVSZXN1bHQgPSAxO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YXR0ckEgKz0gJyc7XHJcblx0XHRcdGF0dHJCICs9ICcnO1xyXG5cclxuXHRcdFx0Y29tcGFyZVJlc3VsdCA9IGF0dHJBLmxvY2FsZUNvbXBhcmUoYXR0ckIsIG9wdGlvbnMubG9jYWxlKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaXNEb3duIHx8IGNvbXBhcmVSZXN1bHQgPT09IDAgPyBjb21wYXJlUmVzdWx0IDogY29tcGFyZVJlc3VsdCAqIC0xO1xyXG5cdH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhVHlwZSA9PT0gJ251bWJlcicpIHtcclxuXHRcdGF0dHJBID0gcGFyc2VGbG9hdChhdHRyQSk7XHJcblx0XHRhdHRyQiA9IHBhcnNlRmxvYXQoYXR0ckIpO1xyXG5cclxuXHRcdGlmIChpc05hTihhdHRyQSkpIHtcclxuXHRcdFx0cmV0dXJuIGlzRG93biA/IC0xIDogMTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaXNOYU4oYXR0ckIpKSB7XHJcblx0XHRcdHJldHVybiBpc0Rvd24gPyAxIDogLTE7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAodHlwZW9mIGF0dHJBID09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBhdHRyQiAhPSAndW5kZWZpbmVkJyB8fCBhdHRyQSA8IGF0dHJCKSB7XHJcblx0XHRyZXR1cm4gaXNEb3duID8gLTEgOiAxO1xyXG5cdH1cclxuXHJcblx0aWYgKHR5cGVvZiBhdHRyQSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYXR0ckIgPT0gJ3VuZGVmaW5lZCcgfHwgYXR0ckEgPiBhdHRyQikge1xyXG5cdFx0cmV0dXJuIGlzRG93biA/IDEgOiAtMTtcclxuXHR9XHJcblxyXG5cdHJldHVybiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaWx0ZXJEYXRhKG9wdGlvbnMpIHtcclxuXHRpZiAoRklMVEVSX1RZUEVTLmluZGV4T2Yob3B0aW9ucy5maWx0ZXJUeXBlKSA9PT0gLTEpIHtcclxuXHRcdHdpbmRvdy5jb25zb2xlLmVycm9yKCdOb3QgYSB2YWxpZCBmaWx0ZXIgdHlwZSEgKCcgKyBvcHRpb25zLmZpbHRlclR5cGUgKyAnKScpO1xyXG5cclxuXHRcdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2U7XHJcblx0fVxyXG5cclxuXHRzd2l0Y2ggKG9wdGlvbnMuZmlsdGVyVHlwZSkge1xyXG5cdFx0Y2FzZSAnZXF1YWxzJzpcclxuXHRcdFx0cmV0dXJuIGVxdWFsc0ZpbHRlcihvcHRpb25zKTtcclxuXHRcdGNhc2UgJ2VxdWFsc0Nhc2VJbnNlbnNpdGl2ZSc6XHJcblx0XHRcdHJldHVybiBlcXVhbHNDYXNlSW5zZW5zaXRpdmVGaWx0ZXIob3B0aW9ucyk7XHJcblx0XHRjYXNlICdsaWtlJzpcclxuXHRcdFx0cmV0dXJuIGxpa2VGaWx0ZXIob3B0aW9ucyk7XHJcblx0XHRjYXNlICdsaWtlQ2FzZUluc2Vuc2l0aXZlJzpcclxuXHRcdFx0cmV0dXJuIGxpa2VDYXNlSW5zZW5zaXRpdmVGaWx0ZXIob3B0aW9ucyk7XHJcblx0XHRjYXNlICdncmVhdGVyVGhhbic6XHJcblx0XHRcdHJldHVybiBncmVhdGVyVGhhbkZpbHRlcihvcHRpb25zKTtcclxuXHRcdGNhc2UgJ2dyZWF0ZXJPckVxdWFsJzpcclxuXHRcdFx0cmV0dXJuIGdyZWF0ZXJPckVxdWFsRmlsdGVyKG9wdGlvbnMpO1xyXG5cdFx0Y2FzZSAnbGVzc1RoYW4nOlxyXG5cdFx0XHRyZXR1cm4gbGVzc1RoYW5GaWx0ZXIob3B0aW9ucyk7XHJcblx0XHRjYXNlICdsZXNzT3JFcXVhbCc6XHJcblx0XHRcdHJldHVybiBsZXNzT3JFcXVhbEZpbHRlcihvcHRpb25zKTtcclxuXHRcdGNhc2UgJ2JldHdlZW4nOlxyXG5cdFx0XHRyZXR1cm4gYmV0d2VlbkZpbHRlcihvcHRpb25zKTtcclxuXHRcdGNhc2UgJ2JldHdlZW5JbmNsdXNpdmUnOlxyXG5cdFx0XHRyZXR1cm4gYmV0d2VlbkluY2x1c2l2ZUZpbHRlcihvcHRpb25zKTtcclxuXHRcdGNhc2UgJ2NvbnRhaW5zJzpcclxuXHRcdFx0cmV0dXJuIGNvbnRhaW5zRmlsdGVyKG9wdGlvbnMpO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVxdWFsc0ZpbHRlcihvcHRpb25zKSB7XHJcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSA9PT0gb3B0aW9ucy52YWx1ZU9uZTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZXF1YWxzQ2FzZUluc2Vuc2l0aXZlRmlsdGVyKG9wdGlvbnMpIHtcclxuXHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlLmZpbHRlcihmdW5jdGlvbihvYmopIHtcclxuXHRcdHJldHVybiBnZXRNZXJnZWRWYWx1ZShvYmosIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpLnRvVXBwZXJDYXNlKCkgPT09IG9wdGlvbnMudmFsdWVPbmUudG9VcHBlckNhc2UoKTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGlrZUZpbHRlcihvcHRpb25zKSB7XHJcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KS5pbmRleE9mKG9wdGlvbnMudmFsdWVPbmUpICE9PSAtMTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGlrZUNhc2VJbnNlbnNpdGl2ZUZpbHRlcihvcHRpb25zKSB7XHJcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KS50b1VwcGVyQ2FzZSgpLmluZGV4T2Yob3B0aW9ucy52YWx1ZU9uZS50b1VwcGVyQ2FzZSgpKSAhPT0gLTE7XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuRmlsdGVyKG9wdGlvbnMpIHtcclxuXHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlLmZpbHRlcihmdW5jdGlvbihvYmopIHtcclxuXHRcdHJldHVybiBnZXRNZXJnZWRWYWx1ZShvYmosIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpID4gb3B0aW9ucy52YWx1ZU9uZTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ3JlYXRlck9yRXF1YWxGaWx0ZXIob3B0aW9ucykge1xyXG5cdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2UuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xyXG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkgPj0gb3B0aW9ucy52YWx1ZU9uZTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGVzc1RoYW5GaWx0ZXIob3B0aW9ucykge1xyXG5cdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2UuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xyXG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkgPCBvcHRpb25zLnZhbHVlT25lO1xyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsZXNzT3JFcXVhbEZpbHRlcihvcHRpb25zKSB7XHJcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSA8PSBvcHRpb25zLnZhbHVlT25lO1xyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBiZXR3ZWVuRmlsdGVyKG9wdGlvbnMpIHtcclxuXHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlLmZpbHRlcihmdW5jdGlvbihvYmopIHtcclxuXHRcdHJldHVybiBnZXRNZXJnZWRWYWx1ZShvYmosIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpID4gb3B0aW9ucy52YWx1ZU9uZSAmJiBvYmpbb3B0aW9ucy5hdHRyaWJ1dGVdIDwgb3B0aW9ucy52YWx1ZVR3bztcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmV0d2VlbkluY2x1c2l2ZUZpbHRlcihvcHRpb25zKSB7XHJcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSA+PSBvcHRpb25zLnZhbHVlT25lICYmIG9ialtvcHRpb25zLmF0dHJpYnV0ZV0gPD0gb3B0aW9ucy52YWx1ZVR3bztcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29udGFpbnNGaWx0ZXIob3B0aW9ucykge1xyXG5cdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2UuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xyXG5cdFx0cmV0dXJuIG9wdGlvbnMudmFsdWVPbmUuaW5kZXhPZihnZXRNZXJnZWRWYWx1ZShvYmosIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpKSAhPT0gLTE7XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFZhbHVlQnlUeXBlKHZhbHVlLCBkYXRhVHlwZSkge1xyXG5cdGlmICh0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdHJldHVybiB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdHN3aXRjaCAoZGF0YVR5cGUpIHtcclxuXHRcdGNhc2UgJ3N0cmluZyc6XHJcblx0XHRcdHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xyXG5cdFx0Y2FzZSAnbnVtYmVyJzpcclxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUocm93LCBhdHRyaWJ1dGUsIGVkaXRlZFZhbHVlcywgdW5pcXVlUm93S2V5KSB7XHJcblx0dmFyIGVkaXRlZFJvdyA9IGVkaXRlZFZhbHVlc1tyb3dbdW5pcXVlUm93S2V5XV07XHJcblxyXG5cdHJldHVybiB0eXBlb2YgZWRpdGVkUm93ID09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBlZGl0ZWRSb3dbYXR0cmlidXRlXSA9PSAndW5kZWZpbmVkJyA/IHJvd1thdHRyaWJ1dGVdIDogZWRpdGVkUm93W2F0dHJpYnV0ZV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb25lT2JqZWN0KG9iaikge1xyXG5cdHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRkZWZhdWx0Q29tcGFyYXRvcjogZGVmYXVsdENvbXBhcmF0b3IsXHJcblx0ZmlsdGVyRGF0YTogZmlsdGVyRGF0YSxcclxuXHRnZXRWYWx1ZUJ5VHlwZTogZ2V0VmFsdWVCeVR5cGUsXHJcblx0Y2xvbmVPYmplY3Q6IGNsb25lT2JqZWN0XHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZnVuY3Rpb24gaW5kZXhPZkVsZW1lbnQoZWxlbWVudCkge1xyXG5cdHZhciBjb2xsZWN0aW9uID0gZWxlbWVudC5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xyXG5cdFx0aWYgKGNvbGxlY3Rpb25baV0gPT09IGVsZW1lbnQpIHtcclxuXHRcdFx0cmV0dXJuIGk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gLTE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRQYXJlbnROb2RlKGNoaWxkLCBzZWxlY3Rvcikge1xyXG5cdGlmIChjaGlsZC5wYXJlbnROb2RlID09PSBudWxsKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9IGVsc2UgaWYgKGNoaWxkLnBhcmVudE5vZGUubWF0Y2hlcyhzZWxlY3RvcikpIHtcclxuXHRcdHJldHVybiBjaGlsZC5wYXJlbnROb2RlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGZpbmRQYXJlbnROb2RlKGNoaWxkLnBhcmVudE5vZGUsIHNlbGVjdG9yKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Um93TnVtYmVyKGNvbmZpZywgY2VsbE5vZGUpIHtcclxuXHRyZXR1cm4gaW5kZXhPZkVsZW1lbnQoY2VsbE5vZGUucGFyZW50Tm9kZSkgKyBjb25maWcuaW5uZXIudG9wQ2VsbE9mZnNldDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29sdW1uTnVtYmVyKGNvbmZpZywgY2VsbE5vZGUpIHtcclxuXHRyZXR1cm4gaW5kZXhPZkVsZW1lbnQoY2VsbE5vZGUpIC0gMSArIGNvbmZpZy5pbm5lci5sZWZ0Q2VsbE9mZnNldDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNFbGxpcHNpc0FjdGl2ZShlbGVtZW50KSB7XHJcblx0cmV0dXJuIGVsZW1lbnQub2Zmc2V0V2lkdGggPCBlbGVtZW50LnNjcm9sbFdpZHRoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc092ZXJmbG93bihlbGVtZW50KSB7XHJcblx0cmV0dXJuIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgZWxlbWVudC5zY3JvbGxXaWR0aCA+IGVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGluZGV4T2ZFbGVtZW50OiBpbmRleE9mRWxlbWVudCxcclxuXHRmaW5kUGFyZW50Tm9kZTogZmluZFBhcmVudE5vZGUsXHJcblx0Z2V0Um93TnVtYmVyOiBnZXRSb3dOdW1iZXIsXHJcblx0Z2V0Q29sdW1uTnVtYmVyOiBnZXRDb2x1bW5OdW1iZXIsXHJcblx0aXNFbGxpcHNpc0FjdGl2ZTogaXNFbGxpcHNpc0FjdGl2ZSxcclxuXHRpc092ZXJmbG93bjogaXNPdmVyZmxvd25cclxufTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgS0VZX0NPREVTID0ge1xyXG5cdEVOVEVSOiAxMyxcclxuXHRFU0NBUEU6IDI3XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRLZXlDb2RlKGV2ZW50KSB7XHJcblx0cmV0dXJuIGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGdldEtleUNvZGU6IGdldEtleUNvZGUsXHJcblx0S0VZX0NPREVTOiBLRVlfQ09ERVNcclxufTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgQ2VsbCAgICAgICA9IHJlcXVpcmUoJy4uL21vZGVscy9kYXRhL2NlbGwnKSxcclxuXHRjb25maWdVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlndXJhdGlvbicpO1xyXG5cclxuZnVuY3Rpb24gZ2V0Q2VsbERhdGEoY29uZmlnLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlcikge1xyXG5cdHZhciBjZWxsRGF0YSA9IG51bGwsXHJcblx0XHRoZWFkZXJPYmogPSBjb25maWdVdGlsLmdldEtleUhlYWRlcihjb25maWcpW2NvbHVtbk51bWJlcl0sXHJcblx0XHR1bmlxdWVSb3dLZXkgPSBudWxsO1xyXG5cclxuXHQvLyBJZiB0aGUgaW5kZXggaXMgaGlnaGVyIHRoYW4gdGhlIGF2YWlsYWJsZSByb3dzIG51bWJlclxyXG5cdGlmIChyb3dOdW1iZXIgPj0gY29uZmlnLmRhdGFTb3VyY2UubGVuZ3RoKSB7XHJcblx0XHRjZWxsRGF0YSA9IG5ldyBDZWxsKHtcclxuXHRcdFx0a2V5OiBoZWFkZXJPYmoua2V5LFxyXG5cdFx0XHR2YWx1ZTogJycsXHJcblx0XHRcdGRhdGFUeXBlOiBoZWFkZXJPYmouZGF0YVR5cGVcclxuXHRcdH0pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR1bmlxdWVSb3dLZXkgPSBjb25maWcuZGF0YVNvdXJjZVtyb3dOdW1iZXJdW2NvbmZpZy51bmlxdWVSb3dLZXldO1xyXG5cdFx0Y2VsbERhdGEgPSBuZXcgQ2VsbCh7XHJcblx0XHRcdGtleTogaGVhZGVyT2JqLmtleSxcclxuXHRcdFx0dmFsdWU6IGNvbmZpZy5kYXRhU291cmNlW3Jvd051bWJlcl1baGVhZGVyT2JqLmtleV0sXHJcblx0XHRcdGRhdGFUeXBlOiBoZWFkZXJPYmouZGF0YVR5cGUsXHJcblx0XHRcdHJvd051bWJlcjogcm93TnVtYmVyLFxyXG5cdFx0XHRjb2x1bW5OdW1iZXI6IGNvbHVtbk51bWJlclxyXG5cdFx0fSk7XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzW3VuaXF1ZVJvd0tleV0gIT0gJ3VuZGVmaW5lZCcgJiZcclxuXHRcdFx0dHlwZW9mIGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XVtoZWFkZXJPYmoua2V5XSAhPSAndW5kZWZpbmVkJykge1xyXG5cclxuXHRcdFx0Y2VsbERhdGEuY2xhc3MgPSBjb25maWcuc2VsZWN0b3JzLmVkaXRlZENlbGw7XHJcblx0XHRcdGNlbGxEYXRhLnVwZGF0ZVZhbHVlKGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XVtoZWFkZXJPYmoua2V5XSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2VsbERhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZpeGVkQ2VsbERhdGEoY29uZmlnLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlcikge1xyXG5cdHZhciBjZWxsRGF0YSA9IG51bGwsXHJcblx0XHRoZWFkZXJPYmogPSBjb25maWdVdGlsLmdldEZpeGVkS2V5SGVhZGVyKGNvbmZpZylbY29sdW1uTnVtYmVyXTtcclxuXHJcblx0Ly8gSWYgdGhlIGluZGV4IGlzIGhpZ2hlciB0aGFuIHRoZSBhdmFpbGFibGUgcm93cyBudW1iZXJcclxuXHRpZiAocm93TnVtYmVyID49IGNvbmZpZy5kYXRhU291cmNlLmxlbmd0aCkge1xyXG5cdFx0Y2VsbERhdGEgPSBuZXcgQ2VsbCh7XHJcblx0XHRcdGtleTogaGVhZGVyT2JqLmtleSxcclxuXHRcdFx0dmFsdWU6ICcnLFxyXG5cdFx0XHRkYXRhVHlwZTogaGVhZGVyT2JqLmRhdGFUeXBlXHJcblx0XHR9KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Y2VsbERhdGEgPSBuZXcgQ2VsbCh7XHJcblx0XHRcdGtleTogaGVhZGVyT2JqLmtleSxcclxuXHRcdFx0dmFsdWU6IGNvbmZpZy5kYXRhU291cmNlW3Jvd051bWJlcl1baGVhZGVyT2JqLmtleV0sXHJcblx0XHRcdGRhdGFUeXBlOiBoZWFkZXJPYmouZGF0YVR5cGUsXHJcblx0XHRcdHJvd051bWJlcjogcm93TnVtYmVyLFxyXG5cdFx0XHRjb2x1bW5OdW1iZXI6IGNvbHVtbk51bWJlclxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2VsbERhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlRWRpdGVkVmFsdWVzSW5Sb3coY29uZmlnLCByb3cpIHtcclxuXHR2YXIgbWVyZ2VkUm93RGF0YSA9IHt9LFxyXG5cdFx0dW5pcXVlUm93S2V5ID0gcm93W2NvbmZpZy51bmlxdWVSb3dLZXldO1xyXG5cclxuXHRpZiAodHlwZW9mIGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XSA9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0cmV0dXJuIHJvdztcclxuXHR9XHJcblxyXG5cdE9iamVjdC5rZXlzKHJvdykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuXHRcdG1lcmdlZFJvd0RhdGFba2V5XSA9IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XVtrZXldIHx8IHJvd1trZXldO1xyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gbWVyZ2VkUm93RGF0YTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VFZGl0ZWRWYWx1ZXNJbkRhdGFTb3VyY2UoY29uZmlnLCBkcykge1xyXG5cdHZhciBtZXJnZWREcyA9IFtdO1xyXG5cclxuXHRkcy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xyXG5cdFx0bWVyZ2VkRHMucHVzaChtZXJnZUVkaXRlZFZhbHVlc0luUm93KGNvbmZpZywgcm93KSk7XHJcblx0fSk7XHJcblxyXG5cdHJldHVybiBtZXJnZWREcztcclxufVxyXG5cclxuZnVuY3Rpb24gc2VwYXJhdGVWYWx1ZXNJbkRhdGFTb3VyY2UoY29uZmlnLCBtZXJnZWREcykge1xyXG5cdHZhciBzZXBhcmF0ZWREcyA9IFtdO1xyXG5cclxuXHRtZXJnZWREcy5mb3JFYWNoKGZ1bmN0aW9uKG1lcmdlZFJvdykge1xyXG5cdFx0dmFyIG9yaWdpbmFsUm93ID0gY29uZmlnLmlubmVyLm9yaWdpbmFsRGF0YVNvdXJjZS5maW5kKGZ1bmN0aW9uKHJvdykge1xyXG5cdFx0XHRyZXR1cm4gcm93W2NvbmZpZy51bmlxdWVSb3dLZXldID09PSBtZXJnZWRSb3dbY29uZmlnLnVuaXF1ZVJvd0tleV07XHJcblx0XHR9KTtcclxuXHJcblx0XHRpZiAodHlwZW9mIG9yaWdpbmFsUm93ICE9ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdHNlcGFyYXRlZERzLnB1c2gob3JpZ2luYWxSb3cpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gc2VwYXJhdGVkRHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3JlVXBkYXRlZENlbGxWYWx1ZShjb25maWcsIGNlbGxEYXRhKSB7XHJcblx0dmFyIHVuaXF1ZVJvd0tleSA9IGNvbmZpZy5kYXRhU291cmNlW2NlbGxEYXRhLnJvd051bWJlcl1bY29uZmlnLnVuaXF1ZVJvd0tleV07XHJcblxyXG5cdGlmICh0eXBlb2YgY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldID09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzW3VuaXF1ZVJvd0tleV0gPSB7fTtcclxuXHR9XHJcblxyXG5cdGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XVtjZWxsRGF0YS5rZXldID0gY2VsbERhdGEuZWRpdGVkVmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBlcnNpc3RSb3dWYWx1ZXMoY29uZmlnLCByb3cpIHtcclxuXHR2YXIgdW5pcXVlUm93S2V5ID0gcm93W2NvbmZpZy51bmlxdWVSb3dLZXldO1xyXG5cclxuXHRpZiAodHlwZW9mIGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XSAhPSAndW5kZWZpbmVkJykge1xyXG5cdFx0T2JqZWN0LmtleXMoY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0XHRyb3dba2V5XSA9IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XVtrZXldO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldID0ge307XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwZXJzaXN0QmF0Y2hWYWx1ZXMoY29uZmlnKSB7XHJcblx0Y29uZmlnLmRhdGFTb3VyY2UuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcclxuXHRcdHBlcnNpc3RSb3dWYWx1ZXMoY29uZmlnLCByb3cpO1xyXG5cdH0pO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRnZXRDZWxsRGF0YTogZ2V0Q2VsbERhdGEsXHJcblx0Z2V0Rml4ZWRDZWxsRGF0YTogZ2V0Rml4ZWRDZWxsRGF0YSxcclxuXHRtZXJnZUVkaXRlZFZhbHVlc0luUm93OiBtZXJnZUVkaXRlZFZhbHVlc0luUm93LFxyXG5cdG1lcmdlRWRpdGVkVmFsdWVzSW5EYXRhU291cmNlOiBtZXJnZUVkaXRlZFZhbHVlc0luRGF0YVNvdXJjZSxcclxuXHRzZXBhcmF0ZVZhbHVlc0luRGF0YVNvdXJjZTogc2VwYXJhdGVWYWx1ZXNJbkRhdGFTb3VyY2UsXHJcblx0c3RvcmVVcGRhdGVkQ2VsbFZhbHVlOiBzdG9yZVVwZGF0ZWRDZWxsVmFsdWUsXHJcblx0cGVyc2lzdFJvd1ZhbHVlczogcGVyc2lzdFJvd1ZhbHVlcyxcclxuXHRwZXJzaXN0QmF0Y2hWYWx1ZXM6IHBlcnNpc3RCYXRjaFZhbHVlc1xyXG59OyIsIiFmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZSgpOnQuQ2xhc3M9ZSgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCgpe312YXIgZT1cImNvbnN0cnVjdG9yXCIsbz1cImV4dGVuZFwiO3JldHVybiB0W29dPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oKXtpW2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgaT1PYmplY3QuY3JlYXRlKHRoaXMucHJvdG90eXBlKTtyZXR1cm4gdC5jYWxsKGksdGhpcy5wcm90b3R5cGUpLG4ucHJvdG90eXBlPWksbltvXT10aGlzW29dLG59LHR9KTsiXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSmhjSEF2WW5KdmQzTmxjaTVxY3lJc0ltRndjQzlrWldaaGRXeDBjeTkwYjI5c2RHbHdMbXB6SWl3aVlYQndMMlZzWlcxbGJuUnpMMk5sYkd3dWFuTWlMQ0poY0hBdmJXOWtaV3h6TDJKaGMyVXVhbk1pTENKaGNIQXZiVzlrWld4ekwyUmhkR0V2WTJWc2JDNXFjeUlzSW1Gd2NDOXRiMlJsYkhNdlpYWmxiblF0WVhKbmRXMWxiblJ6TDJGbWRHVnlMV1ZrYVhRdWFuTWlMQ0poY0hBdmJXOWtaV3h6TDJWMlpXNTBMV0Z5WjNWdFpXNTBjeTloWm5SbGNpMXpZWFpsTG1weklpd2lZWEJ3TDIxdlpHVnNjeTlsZG1WdWRDMWhjbWQxYldWdWRITXZZbVZtYjNKbExXVmthWFF1YW5NaUxDSmhjSEF2Ylc5a1pXeHpMMlYyWlc1MExXRnlaM1Z0Wlc1MGN5OWlaV1p2Y21VdGMyRjJaUzVxY3lJc0ltRndjQzl0YjJSbGJITXZaWFpsYm5RdFlYSm5kVzFsYm5SekwzTmhkbVV0Y205M0xtcHpJaXdpWVhCd0wyMXZaR1ZzY3k5dGIyUjFiR1V2ZG1seWRIVmhiQzFrWVhSaExXZHlhV1F1YW5NaUxDSmhjSEF2Ylc5a2RXeGxjeTlqYjI1bWFXZDFjbUYwYVc5dUxtcHpJaXdpWVhCd0wyMXZaSFZzWlhNdlpHOXRMbXB6SWl3aVlYQndMMjF2WkhWc1pYTXZaV1JwZEM1cWN5SXNJbUZ3Y0M5dGIyUjFiR1Z6TDJWMlpXNTBMV2hoYm1Sc1pYSXVhbk1pTENKaGNIQXZiVzlrZFd4bGN5OW1hV3gwWlhJdWFuTWlMQ0poY0hBdmJXOWtkV3hsY3k5blpXNWxjbUYwYjNJdWFuTWlMQ0poY0hBdmJXOWtkV3hsY3k5eVpYTnBlbVV1YW5NaUxDSmhjSEF2Ylc5a2RXeGxjeTl6YjNKMExtcHpJaXdpWVhCd0wyMXZaSFZzWlhNdmRHOXZiSFJwY0M1cWN5SXNJbUZ3Y0M5d2IyeHNlV1pwYkd4ekwwRnljbUY1TG1acGJtUXVhbk1pTENKaGNIQXZjRzlzYkhsbWFXeHNjeTlGYkdWdFpXNTBMbTFoZEdOb1pYTXVhbk1pTENKaGNIQXZjRzlzYkhsbWFXeHNjeTlGYkdWdFpXNTBMbkpsYlc5MlpTNXFjeUlzSW1Gd2NDOXdiMnhzZVdacGJHeHpMMDV2WkdWTWFYTjBMbVp2Y2tWaFkyZ3Vhbk1pTENKaGNIQXZjRzlzYkhsbWFXeHNjeTlQWW1wbFkzUXVZWE56YVdkdUxtcHpJaXdpWVhCd0wzVjBhV3h6TDJOdmJtWnBaM1Z5WVhScGIyNHVhbk1pTENKaGNIQXZkWFJwYkhNdlpHRjBZUzVxY3lJc0ltRndjQzkxZEdsc2N5OWtiMjB1YW5NaUxDSmhjSEF2ZFhScGJITXZhMlY1WW05aGNtUXVhbk1pTENKaGNIQXZkWFJwYkhNdmRHRmliR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTJ4aGMzTXRNalUyTG1wekwyUnBjM1F2WTJ4aGMzTXVkVzFrTG0xcGJpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTTVSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONFJrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhXUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVreEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGRFdEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkROMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNeFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNM1UwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU14UjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRkRVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU14UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTldRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE4wSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlNVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0V4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU12UTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU0xU1VFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzBwSWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc1Y2NseHVjbVZ4ZFdseVpTZ25MaTl3YjJ4c2VXWnBiR3h6TDBGeWNtRjVMbVpwYm1RdWFuTW5LVHR5WlhGMWFYSmxLQ2N1TDNCdmJHeDVabWxzYkhNdlJXeGxiV1Z1ZEM1dFlYUmphR1Z6TG1wekp5azdjbVZ4ZFdseVpTZ25MaTl3YjJ4c2VXWnBiR3h6TDBWc1pXMWxiblF1Y21WdGIzWmxMbXB6SnlrN2NtVnhkV2x5WlNnbkxpOXdiMnhzZVdacGJHeHpMMDV2WkdWTWFYTjBMbVp2Y2tWaFkyZ3Vhbk1uS1R0eVpYRjFhWEpsS0NjdUwzQnZiR3g1Wm1sc2JITXZUMkpxWldOMExtRnpjMmxuYmk1cWN5Y3BPMXh5WEc1Y2NseHVkbUZ5SUZacGNuUjFZV3hFWVhSaFIzSnBaQ0E5SUhKbGNYVnBjbVVvSnk0dmJXOWtaV3h6TDIxdlpIVnNaUzkyYVhKMGRXRnNMV1JoZEdFdFozSnBaQ2NwTzF4eVhHNWNjbHh1ZDJsdVpHOTNMbFpwY25SMVlXeEVZWFJoUjNKcFpDQTlJRlpwY25SMVlXeEVZWFJoUjNKcFpEc2lMQ0luZFhObElITjBjbWxqZENjN1hISmNibHh5WEc1bWRXNWpkR2x2YmlCcGJuWnZhMlZHYmlodVlXMWxMQ0J3WVhKaGJURXNJSEJoY21GdE1pa2dlMXh5WEc1Y2RHbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0xuUnNhWFJsSUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEhKY2JseDBYSFJ5WlhSMWNtNDdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUjNhVzVrYjNjdWRHeHBkR1ZiYm1GdFpWMG9jR0Z5WVcweExDQndZWEpoYlRJcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJ6YUc5M0tHOXdkR2x2Ym5NcElIdGNjbHh1WEhSemQybDBZMmdnS0c5d2RHbHZibk11ZEhsd1pTa2dlMXh5WEc1Y2RGeDBZMkZ6WlNBbmFXNW1ieWM2WEhKY2JseDBYSFJjZEhOb2IzZEpibVp2S0c5d2RHbHZibk1wTzF4eVhHNWNkRngwWEhSaWNtVmhhenRjY2x4dVhIUmNkR05oYzJVZ0ozZGhjbTRuT2x4eVhHNWNkRngwWEhSemFHOTNWMkZ5YmlodmNIUnBiMjV6S1R0Y2NseHVYSFJjZEZ4MFluSmxZV3M3WEhKY2JseDBYSFJqWVhObElDZGxjbkp2Y2ljNlhISmNibHgwWEhSY2RITm9iM2RGY25KdmNpaHZjSFJwYjI1ektUdGNjbHh1WEhSY2RGeDBZbkpsWVdzN1hISmNibHgwWEhSa1pXWmhkV3gwT2x4eVhHNWNkRngwWEhSemFHOTNTVzVtYnlodmNIUnBiMjV6S1R0Y2NseHVYSFJjZEZ4MFluSmxZV3M3WEhKY2JseDBmVnh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCb2FXUmxLR1ZzWlcxbGJuUXBJSHRjY2x4dVhIUnBiblp2YTJWR2JpZ25hR2xrWlNjc0lHVnNaVzFsYm5RcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJvYVdSbFFXeHNLQ2tnZTF4eVhHNWNkR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTUwYkdsMFpTY3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aV3dwSUh0Y2NseHVYSFJjZEdocFpHVW9aV3d1Y0dGeVpXNTBUbTlrWlNrN1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSE5vYjNkSmJtWnZLRzl3ZEdsdmJuTXBJSHRjY2x4dVhIUjJZWElnYjNKcFpXNTBZWFJwYjI0Z1BTQW5jeWM3WEhKY2JseHlYRzVjZEdsbUlDaHZjSFJwYjI1ekxtVnNaVzFsYm5RdWJXRjBZMmhsY3lnbkxtaGxZV1JsY2kxalpXeHNKeWtwSUh0Y2NseHVYSFJjZEc5eWFXVnVkR0YwYVc5dUlEMGdKMjRuTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwYVc1MmIydGxSbTRvSjNOb2IzY25MQ0J2Y0hScGIyNXpMbVZzWlcxbGJuUXNJSHNnWjNKaGRqb2diM0pwWlc1MFlYUnBiMjRnZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSE5vYjNkWFlYSnVLRzl3ZEdsdmJuTXBJSHRjY2x4dVhIUnBiblp2YTJWR2JpZ25jMmh2ZHljc0lHOXdkR2x2Ym5NdVpXeGxiV1Z1ZENrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSE5vYjNkRmNuSnZjaWh2Y0hScGIyNXpLU0I3WEhKY2JseDBhVzUyYjJ0bFJtNG9KM05vYjNjbkxDQnZjSFJwYjI1ekxtVnNaVzFsYm5RcE8xeHlYRzU5WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjY2x4dVhIUnphRzkzT2lCemFHOTNMRnh5WEc1Y2RHaHBaR1U2SUdocFpHVXNYSEpjYmx4MGFHbGtaVUZzYkRvZ2FHbGtaVUZzYkN4Y2NseHVYSFJ6YUc5M1NXNW1iem9nYzJodmQwbHVabThzWEhKY2JseDBjMmh2ZDFkaGNtNDZJSE5vYjNkWFlYSnVMRnh5WEc1Y2RITm9iM2RGY25KdmNqb2djMmh2ZDBWeWNtOXlYSEpjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRVlYUmhRMjl1ZEdGcGJtVnlLR052Ym1acFp5d2dZMlZzYkU1dlpHVXNJR1JoZEdFcElIdGNibHgwZG1GeUlHUmhkR0ZEYjI1MFlXbHVaWElnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktTeGNibHgwWEhSdFlYaElaV2xuYUhRZ1BTQmpiMjVtYVdjdVpHbHRaVzV6YVc5dWN5NWpaV3hzU0dWcFoyaDBJQzBnWTI5dVptbG5MbVJwYldWdWMybHZibk11WTJWc2JFSnZjbVJsY2xkcFpIUm9JQzBnWTI5dVptbG5MbVJwYldWdWMybHZibk11WTJWc2JGQmhaR1JwYm1kV1pYSjBhV05oYkNBcUlESTdYRzVjYmx4MFpHRjBZVU52Ym5SaGFXNWxjaTVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WTJWc2JFUmhkR0ZEYjI1MFlXbHVaWElwTzF4dVhIUmtZWFJoUTI5dWRHRnBibVZ5TG5OMGVXeGxMbTFwYmxkcFpIUm9JRDBnWTI5dVptbG5MbVJwYldWdWMybHZibk11WTJWc2JGZHBaSFJvSUNzZ0ozQjRKenRjYmx4MFpHRjBZVU52Ym5SaGFXNWxjaTV6ZEhsc1pTNXRZWGhJWldsbmFIUWdQU0J0WVhoSVpXbG5hSFFnS3lBbmNIZ25PMXh1WEhSa1lYUmhRMjl1ZEdGcGJtVnlMbk4wZVd4bExuQmhaR1JwYm1jZ1BTQmpiMjVtYVdjdVpHbHRaVzV6YVc5dWN5NWpaV3hzVUdGa1pHbHVaMVpsY25ScFkyRnNJQ3NnSjNCNElDY2dLeUJqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1VHRmtaR2x1WjBodmNtbDZiMjUwWVd3Z0t5QW5jSGduTzF4dVhHNWNkR05sYkd4T2IyUmxMbUZ3Y0dWdVpFTm9hV3hrS0dSaGRHRkRiMjUwWVdsdVpYSXBPMXh1WEc1Y2RHbG1JQ2gwZVhCbGIyWWdaR0YwWVNBaFBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUmNkSFZ3WkdGMFpVUmhkR0ZEYjI1MFlXbHVaWElvWTI5dVptbG5MQ0JqWld4c1RtOWtaU3dnWkdGMFlTazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdaR0YwWVVOdmJuUmhhVzVsY2p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxTR1ZoWkdWeVJHRjBZU2hqYjI1bWFXY3NJR05sYkd4T2IyUmxMQ0JqWld4c1QySnFMQ0JwYzB4aGMzUlNiM2NwSUh0Y2JseDBkbUZ5SUdsdWJtVnlTRlJOVENBOUlDY25MRnh1WEhSY2RHTnZiSFZ0YmxSbGVIUWdQU0JqWld4c1QySnFMblJsZUhRZ2ZId2dZMlZzYkU5aWFpNXJaWGtnZkh3Z0p5YzdYRzVjYmx4MGFXWWdLR052Ym1acFp5NXpiM0owTG1WdVlXSnNaV1FnSmlZZ0lXTmxiR3hQWW1vdWMyOXlkRVJwYzJGaWJHVmtJQ1ltSUdselRHRnpkRkp2ZHlrZ2UxeHVYSFJjZEhaaGNpQmhkSFJ5YVdKMWRHVWdQU0JqWld4c1QySnFMbXRsZVN4Y2JseDBYSFJjZEdScGNtVmpkR2x2YmlBOUlIUjVjR1Z2WmlCaGRIUnlhV0oxZEdVZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ1kyOXVabWxuTG1sdWJtVnlMbk52Y25RdVlYUjBjbWxpZFhSbElEMDlQU0JoZEhSeWFXSjFkR1VnUHlCamIyNW1hV2N1YVc1dVpYSXVjMjl5ZEM1a2FYSmxZM1JwYjI0Z09pQW5ibTl1WlNjc1hHNWNkRngwWEhScGMxTnZjblJsWkNBOUlHUnBjbVZqZEdsdmJpQWhQVDBnSjI1dmJtVW5MRnh1WEhSY2RGeDBhV052YmtOc1lYTnpJRDBnWkdseVpXTjBhVzl1SUQwOVBTQW5aRzkzYmljZ1B5QmpiMjVtYVdjdWFXNXVaWEl1YVdOdmJuTXVjMjl5ZEM1aGMyTWdPaUJqYjI1bWFXY3VhVzV1WlhJdWFXTnZibk11YzI5eWRDNWtaWE5qTEZ4dVhIUmNkRngwYVdOdmJrVnNaVzFsYm5SRGJHRnpjeUE5SUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVjMjl5ZEVsamIyNGdLeUFvYVhOVGIzSjBaV1FnUHlBbklDY2dLeUJwWTI5dVEyeGhjM01nT2lBbklHaHBaR1JsYmljcE8xeHVYRzVjZEZ4MGFXNXVaWEpJVkUxTUlDczlJQ2M4YVNCamJHRnpjejFjSWljZ0t5QnBZMjl1Uld4bGJXVnVkRU5zWVhOeklDc2dKMXdpSUdGeWFXRXRhR2xrWkdWdVBWd2lkSEoxWlZ3aVBqd3ZhVDRuTzF4dVhHNWNkRngwWTJWc2JFNXZaR1V1YzJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdGMGRISnBZblYwWlNjc0lHRjBkSEpwWW5WMFpTazdYRzVjZEgxY2JseHVYSFJwYm01bGNraFVUVXdnS3owZ1kyOXNkVzF1VkdWNGREdGNibHh1WEhSeVpYUjFjbTRnYVc1dVpYSklWRTFNTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkdhV3gwWlhKRVlYUmhLR052Ym1acFp5d2dZMlZzYkU1dlpHVXNJR05sYkd4UFltb3NJR1pwYkhSbGNrOWlhaWtnZTF4dVhIUjJZWElnYVc1dVpYSklWRTFNSUQwZ0p5Y3NYRzVjZEZ4MGFXTnZia05zWVhOeklEMGdZMjl1Wm1sbkxtbHVibVZ5TG1samIyNXpMbVpwYkhSbGNpNXpaV0Z5WTJnc1hHNWNkRngwYVdOdmJrVnNaVzFsYm5SRGJHRnpjeUE5SUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVUyVmhjbU5vU1dOdmJpQXJJQ2NnSnlBcklHbGpiMjVEYkdGemN5eGNibHgwWEhSamJHVmhja2xqYjI1RGJHRnpjeUE5SUdOdmJtWnBaeTVwYm01bGNpNXBZMjl1Y3k1bWFXeDBaWEl1WTJ4bFlYSXNYRzVjZEZ4MFkyeGxZWEpKWTI5dVJXeGxiV1Z1ZEVOc1lYTnpJRDBnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKRGJHVmhja2xqYjI0Z0t5QW5JQ2NnS3lCamJHVmhja2xqYjI1RGJHRnpjenRjYmx4dVhIUnBaaUFvSVdObGJHeFBZbW91Wm1sc2RHVnlSR2x6WVdKc1pXUXBJSHRjYmx4MFhIUnBibTVsY2toVVRVd2dLejBnSnp4cElHTnNZWE56UFZ3aUp5QXJJR2xqYjI1RmJHVnRaVzUwUTJ4aGMzTWdLeUFuWENJZ1lYSnBZUzFvYVdSa1pXNDlYQ0owY25WbFhDSStQQzlwUGljN1hHNWNkRngwYVc1dVpYSklWRTFNSUNzOUlHWnBiSFJsY2s5aWFpNTJZV3gxWlNCOGZDQW5KenRjYmx4dVhIUmNkR2xtSUNoMGVYQmxiMllnWm1sc2RHVnlUMkpxTG5aaGJIVmxJQ0U5SUNkMWJtUmxabWx1WldRbklDWW1JR1pwYkhSbGNrOWlhaTUyWVd4MVpTQWhQVDBnSnljcElIdGNibHgwWEhSY2RHbHVibVZ5U0ZSTlRDQXJQU0FuUEdrZ1kyeGhjM005WENJbklDc2dZMnhsWVhKSlkyOXVSV3hsYldWdWRFTnNZWE56SUNzZ0oxd2lJR0Z5YVdFdGFHbGtaR1Z1UFZ3aWRISjFaVndpUGp3dmFUNG5PMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQnBibTVsY2toVVRVdzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVndaR0YwWlVSaGRHRkRiMjUwWVdsdVpYSW9ZMjl1Wm1sbkxDQmpaV3hzVG05a1pTd2daR0YwWVNrZ2UxeHVYSFIyWVhJZ1pHRjBZVU52Ym5SaGFXNWxjaUE5SUdObGJHeE9iMlJsTG5GMVpYSjVVMlZzWldOMGIzSW9KeTRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVqWld4c1JHRjBZVU52Ym5SaGFXNWxjaWs3WEc1Y2JseDBhV1lnS0hSNWNHVnZaaUJrWVhSaElEMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElHUmhkR0VnUFQwOUlHNTFiR3dwSUh0Y2JseDBYSFJrWVhSaFEyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRDQTlJQ2NuTzF4dVhIUmNkR05sYkd4T2IyUmxMblJwZEd4bElEMGdKeWM3WEc1Y2RIMGdaV3h6WlNCcFppQW9aR0YwWVM1dWIyUmxWSGx3WlNrZ2V5QXZMeUJKWmlCcGRITWdZVzRnUld4bGJXVnVkQ0J2WW1wbFkzUmNibHgwWEhSa1lYUmhRMjl1ZEdGcGJtVnlMbWx1Ym1WeVNGUk5UQ0E5SUNjbk8xeHVYSFJjZEdSaGRHRkRiMjUwWVdsdVpYSXVZWEJ3Wlc1a1EyaHBiR1FvWkdGMFlTazdYRzVjZEZ4MFkyVnNiRTV2WkdVdWRHbDBiR1VnUFNCa1lYUmhMblJsZUhSRGIyNTBaVzUwTzF4dVhIUjlJR1ZzYzJVZ2V5QXZMeUJsYkhObElHcDFjM1FnWVdSa0lIUnZJSFJvWlNCamIyNTBZV2x1WlhKeklHbHVibVZ5U0ZSTlRGeHVYSFJjZEdSaGRHRkRiMjUwWVdsdVpYSXVhVzV1WlhKSVZFMU1JRDBnWkdGMFlUdGNibHgwWEhSalpXeHNUbTlrWlM1MGFYUnNaU0E5SUdSaGRHRkRiMjUwWVdsdVpYSXVkR1Y0ZEVOdmJuUmxiblE3WEc1Y2RIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsUTJWc2JDaGpiMjVtYVdjc0lHTmxiR3hPYjJSbExDQmpaV3hzUkdGMFlTa2dlMXh1WEhSMWNHUmhkR1ZFWVhSaFEyOXVkR0ZwYm1WeUtHTnZibVpwWnl3Z1kyVnNiRTV2WkdVc0lHTmxiR3hFWVhSaExtZGxkRlpoYkhWbEtDa3BPMXh1WEc1Y2RHTmxiR3hPYjJSbExtTnNZWE56VG1GdFpTQTlJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVpHRjBZVU5sYkd3Z0t5QW5JQ2NnS3lBb1kyVnNiRVJoZEdFdVkyeGhjM01nZkh3Z0p5Y3BPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNibHgwWTNKbFlYUmxSR0YwWVVOdmJuUmhhVzVsY2pvZ1kzSmxZWFJsUkdGMFlVTnZiblJoYVc1bGNpeGNibHgwWTNKbFlYUmxTR1ZoWkdWeVJHRjBZVG9nWTNKbFlYUmxTR1ZoWkdWeVJHRjBZU3hjYmx4MFkzSmxZWFJsUm1sc2RHVnlSR0YwWVRvZ1kzSmxZWFJsUm1sc2RHVnlSR0YwWVN4Y2JseDBkWEJrWVhSbFJHRjBZVU52Ym5SaGFXNWxjam9nZFhCa1lYUmxSR0YwWVVOdmJuUmhhVzVsY2l4Y2JseDBkWEJrWVhSbFEyVnNiRG9nZFhCa1lYUmxRMlZzYkZ4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hISmNibHh5WEc1MllYSWdRMnhoYzNNZ1BTQnlaWEYxYVhKbEtDZGpiR0Z6Y3kweU5UWXVhbk1uS1R0Y2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUTJ4aGMzTXVaWGgwWlc1a0tHWjFibU4wYVc5dUtDa2dlMXh5WEc1Y2RIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2NseHVYSEpjYmx4MGMyVnNaaTVqYjI1emRISjFZM1J2Y2lBOUlHWjFibU4wYVc5dUtHRjBkSEpwWW5WMFpYTXNJSEJoY21GdGN5a2dlMXh5WEc1Y2RGeDBhV1lnS0hSNWNHVnZaaUJoZEhSeWFXSjFkR1Z6SUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEhKY2JseDBYSFJjZEhKbGRIVnlianRjY2x4dVhIUmNkSDFjY2x4dVhISmNibHgwWEhSaGRIUnlhV0oxZEdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1lYUjBjaWtnZTF4eVhHNWNkRngwWEhSelpXeG1XMkYwZEhKZElEMGdkSGx3Wlc5bUlIQmhjbUZ0Y3lBOVBTQW5kVzVrWldacGJtVmtKeUI4ZkNCMGVYQmxiMllnY0dGeVlXMXpXMkYwZEhKZElEMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2JuVnNiQ0E2SUhCaGNtRnRjMXRoZEhSeVhUdGNjbHh1WEhSY2RIMHBPMXh5WEc1Y2RIMDdYSEpjYmx4eVhHNWNkSFJvYVhNdWRYQmtZWFJsUVhSMGNtbGlkWFJsY3lBOUlHWjFibU4wYVc5dUtHRjBkSEp6S1NCN1hISmNibHgwWEhSUFltcGxZM1F1YTJWNWN5aGhkSFJ5Y3lrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlocktTQjdYSEpjYmx4MFhIUmNkR2xtSUNoMGVYQmxiMllnWVhSMGNuTmJhMTBnSVQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JSE5sYkdaYmExMGdJVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNjbHh1WEhSY2RGeDBYSFJ6Wld4bVcydGRJRDBnWVhSMGNuTmJhMTA3WEhKY2JseDBYSFJjZEgxY2NseHVYSFJjZEgwcE8xeHlYRzVjZEgwN1hISmNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dVhISmNibVoxYm1OMGFXOXVJRU5sYkd4UFltcGxZM1FvY0NrZ2UxeHlYRzVjZEhaaGNpQnpaV3htSUQwZ2RHaHBjenRjY2x4dVhISmNibHgwYVc1cGRFRjBkSElvSjJ0bGVTY3BPMXh5WEc1Y2RHbHVhWFJCZEhSeUtDZDJZV3gxWlNjcE8xeHlYRzVjZEdsdWFYUkJkSFJ5S0Nka1lYUmhWSGx3WlNjcE8xeHlYRzVjZEdsdWFYUkJkSFJ5S0NkbFpHbDBaV1JXWVd4MVpTY3BPMXh5WEc1Y2RHbHVhWFJCZEhSeUtDZGpiR0Z6Y3ljcE8xeHlYRzVjZEdsdWFYUkJkSFJ5S0NkeWIzZE9kVzFpWlhJbktUdGNjbHh1WEhScGJtbDBRWFIwY2lnblkyOXNkVzF1VG5WdFltVnlKeWs3WEhKY2JseHlYRzVjZEdaMWJtTjBhVzl1SUdsdWFYUkJkSFJ5S0c1aGJXVXBJSHRjY2x4dVhIUmNkSE5sYkdaYmJtRnRaVjBnUFNCMGVYQmxiMllnY0NBOVBTQW5kVzVrWldacGJtVmtKeUI4ZkNCMGVYQmxiMllnY0Z0dVlXMWxYU0E5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzUxYkd3Z09pQndXMjVoYldWZE8xeHlYRzVjZEgxY2NseHVYSEpjYmx4MGRHaHBjeTUxY0dSaGRHVkJkSFJ5YVdKMWRHVnpJRDBnWm5WdVkzUnBiMjRvWVhSMGNuTXBJSHRjY2x4dVhIUmNkRTlpYW1WamRDNXJaWGx6S0dGMGRISnpLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR3NwSUh0Y2NseHVYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQmhkSFJ5YzF0clhTQWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ2MyVnNabHRyWFNBaFBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwWEhSY2RITmxiR1piYTEwZ1BTQmhkSFJ5YzF0clhUdGNjbHh1WEhSY2RGeDBmVnh5WEc1Y2RGeDBmU2s3WEhKY2JseDBmVHRjY2x4dVhISmNibHgwZEdocGN5NW5aWFJXWVd4MVpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNWNkRngwY21WMGRYSnVJSE5sYkdZdVkyVnNiRU5vWVc1blpXUWdQeUJ6Wld4bUxtVmthWFJsWkZaaGJIVmxJRG9nYzJWc1ppNTJZV3gxWlR0Y2NseHVYSFI5TzF4eVhHNWNjbHh1WEhSMGFHbHpMblZ3WkdGMFpWWmhiSFZsSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2NseHVYSFJjZEdsbUlDaHpaV3htTG1SaGRHRlVlWEJsSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh5WEc1Y2RGeDBYSFIyWVd4MVpTQTlJR2x6VG1GT0tIQmhjbk5sUm14dllYUW9kbUZzZFdVcEtTQS9JREFnT2lCd1lYSnpaVVpzYjJGMEtIWmhiSFZsS1R0Y2NseHVYSFJjZEgxY2NseHVYSEpjYmx4MFhIUnBaaUFvYzJWc1ppNTJZV3gxWlNBOVBUMGdkbUZzZFdVZ2ZId2djMlZzWmk1MllXeDFaU0E5UFQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnZG1Gc2RXVWdQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNjbHh1WEhSY2RGeDBjMlZzWmk1bFpHbDBaV1JXWVd4MVpTQTlJRzUxYkd3N1hISmNibHgwWEhSY2RITmxiR1l1WTJWc2JFTm9ZVzVuWldRZ1BTQm1ZV3h6WlR0Y2NseHVYSFJjZEgwZ1pXeHpaU0I3WEhKY2JseDBYSFJjZEhObGJHWXVaV1JwZEdWa1ZtRnNkV1VnUFNCMllXeDFaVHRjY2x4dVhIUmNkRngwYzJWc1ppNWpaV3hzUTJoaGJtZGxaQ0E5SUhSeWRXVTdYSEpjYmx4MFhIUjlYSEpjYmx4MGZUdGNjbHh1WEhKY2JseDBkR2hwY3k1a2FYTmpZWEprUTJoaGJtZGxaRlpoYkhWbElEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JseDBYSFJ6Wld4bUxtVmthWFJsWkZaaGJIVmxJRDBnYm5Wc2JEdGNjbHh1WEhSOU8xeHlYRzVjY2x4dVhIUjBhR2x6TG1selEyVnNiRU5vWVc1blpXUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVYSFJjZEhKbGRIVnliaUJ6Wld4bUxtTmxiR3hEYUdGdVoyVmtPMXh5WEc1Y2RIMDdYSEpjYm4xY2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUTJWc2JFOWlhbVZqZERzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEhKY2JseHlYRzUyWVhJZ1FtRnpaVU5zWVhOeklEMGdjbVZ4ZFdseVpTZ25MaTR2WW1GelpTY3BPMXh5WEc1Y2NseHVkbUZ5SUVGVVZGSkpRbFZVUlZNZ1BTQmJYSEpjYmx4MEoyTmxiR3hPYjJSbEp5eGNjbHh1WEhRblkyVnNiRVJoZEdFblhISmNibDA3WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUpoYzJWRGJHRnpjeTVsZUhSbGJtUW9ablZ1WTNScGIyNG9jR0Z5Wlc1MEtTQjdYSEpjYmx4MGRtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4eVhHNWNjbHh1WEhSelpXeG1MbU52Ym5OMGNuVmpkRzl5SUQwZ1puVnVZM1JwYjI0b2NHRnlZVzF6S1NCN1hISmNibHgwWEhSd1lYSmxiblF1WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2h6Wld4bUxDQkJWRlJTU1VKVlZFVlRMQ0J3WVhKaGJYTXBPMXh5WEc1Y2RIMDdYSEpjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2NseHVYSEpjYm5aaGNpQkNZWE5sUTJ4aGMzTWdQU0J5WlhGMWFYSmxLQ2N1TGk5aVlYTmxKeWs3WEhKY2JseHlYRzUyWVhJZ1FWUlVVa2xDVlZSRlV5QTlJRnRjY2x4dVhIUW5jMkYyWldSU2IzZHpKMXh5WEc1ZE8xeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCQ1lYTmxRMnhoYzNNdVpYaDBaVzVrS0daMWJtTjBhVzl1S0hCaGNtVnVkQ2tnZTF4eVhHNWNkSFpoY2lCelpXeG1JRDBnZEdocGN6dGNjbHh1WEhKY2JseDBjMlZzWmk1amIyNXpkSEoxWTNSdmNpQTlJR1oxYm1OMGFXOXVLSEJoY21GdGN5a2dlMXh5WEc1Y2RGeDBjR0Z5Wlc1MExtTnZibk4wY25WamRHOXlMbU5oYkd3b2MyVnNaaXdnUVZSVVVrbENWVlJGVXl3Z2NHRnlZVzF6S1R0Y2NseHVYSFI5TzF4eVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYSEpjYmx4eVhHNTJZWElnUW1GelpVTnNZWE56SUQwZ2NtVnhkV2x5WlNnbkxpNHZZbUZ6WlNjcE8xeHlYRzVjY2x4dWRtRnlJRUZVVkZKSlFsVlVSVk1nUFNCYlhISmNibHgwSjJObGJHeE9iMlJsSnl4Y2NseHVYSFFuWTJWc2JFUmhkR0VuTEZ4eVhHNWNkQ2RqWVc1alpXeEZkbVZ1ZENkY2NseHVYVHRjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRbUZ6WlVOc1lYTnpMbVY0ZEdWdVpDaG1kVzVqZEdsdmJpaHdZWEpsYm5RcElIdGNjbHh1WEhSMllYSWdjMlZzWmlBOUlIUm9hWE03WEhKY2JseHlYRzVjZEhObGJHWXVZMjl1YzNSeWRXTjBiM0lnUFNCbWRXNWpkR2x2Ymlod1lYSmhiWE1wSUh0Y2NseHVYSFJjZEhCaGNtVnVkQzVqYjI1emRISjFZM1J2Y2k1allXeHNLSE5sYkdZc0lFRlVWRkpKUWxWVVJWTXNJSEJoY21GdGN5azdYSEpjYmx4MGZUdGNjbHh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWNjbHh1ZG1GeUlFSmhjMlZEYkdGemN5QTlJSEpsY1hWcGNtVW9KeTR1TDJKaGMyVW5LVHRjY2x4dVhISmNiblpoY2lCQlZGUlNTVUpWVkVWVElEMGdXMXh5WEc1Y2RDZGxaR2wwWldSU2IzZHpKeXhjY2x4dVhIUW5ZMkZ1WTJWc1JYWmxiblFuWEhKY2JsMDdYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFSmhjMlZEYkdGemN5NWxlSFJsYm1Rb1puVnVZM1JwYjI0b2NHRnlaVzUwS1NCN1hISmNibHgwZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh5WEc1Y2NseHVYSFJ6Wld4bUxtTnZibk4wY25WamRHOXlJRDBnWm5WdVkzUnBiMjRvY0dGeVlXMXpLU0I3WEhKY2JseDBYSFJ3WVhKbGJuUXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaHpaV3htTENCQlZGUlNTVUpWVkVWVExDQndZWEpoYlhNcE8xeHlYRzVjZEgwN1hISmNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dVhISmNiblpoY2lCQ1lYTmxRMnhoYzNNZ1BTQnlaWEYxYVhKbEtDY3VMaTlpWVhObEp5azdYSEpjYmx4eVhHNTJZWElnUVZSVVVrbENWVlJGVXlBOUlGdGNjbHh1WEhRblpXUnBkR1ZrVW05M0p5eGNjbHh1WEhRblkyRnVZMlZzUlhabGJuUW5YSEpjYmwwN1hISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVKaGMyVkRiR0Z6Y3k1bGVIUmxibVFvWm5WdVkzUnBiMjRvY0dGeVpXNTBLU0I3WEhKY2JseDBkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHlYRzVjY2x4dVhIUnpaV3htTG1OdmJuTjBjblZqZEc5eUlEMGdablZ1WTNScGIyNG9jR0Z5WVcxektTQjdYSEpjYmx4MFhIUndZWEpsYm5RdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoelpXeG1MQ0JCVkZSU1NVSlZWRVZUTENCd1lYSmhiWE1wTzF4eVhHNWNkSDA3WEhKY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1WEhKY2JuWmhjaUJuWlc1bGNtRjBiM0lnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMmRsYm1WeVlYUnZjaWNwTzF4eVhHNWNjbHh1ZG1GeUlIVnVhWEYxWlVsa1UyVnhkV1Z1WTJVZ1BTQXhPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdWbWx5ZEhWaGJFUmhkR0ZIY21sa0tDa2dlMXh5WEc1Y2RIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2NseHVYSEpjYmx4MGMyVnNaaTVqYjI1bWFXZDFjbUYwYVc5dUlEMGdlMzA3WEhKY2JseDBjMlZzWmk1MWJtbHhkV1ZKWkNBOUlIVnVhWEYxWlVsa1UyVnhkV1Z1WTJVckt6dGNjbHh1WEhSelpXeG1Ma1JGUmtGVlRGUmZUMUJVU1U5T1V5QTlJR2RsYm1WeVlYUnZjaTVuWlhSRVpXWmhkV3gwVDNCMGFXOXVjeWdwTzF4eVhHNWNkSE5sYkdZdVoyVnVaWEpoZEdWVVlXSnNaU0E5SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wSUh0Y2NseHVYSFJjZEc5d2RHbHZibk11ZFc1cGNYVmxTV1FnUFNCelpXeG1MblZ1YVhGMVpVbGtPMXh5WEc1Y2NseHVYSFJjZEdkbGJtVnlZWFJ2Y2k1blpXNWxjbUYwWlZSaFlteGxLSE5sYkdZdVkyOXVabWxuZFhKaGRHbHZiaXdnYjNCMGFXOXVjeWs3WEhKY2JseDBmVHRjY2x4dVhIUnpaV3htTG1SbGMzUnliM2xVWVdKc1pTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNWNkRngwWjJWdVpYSmhkRzl5TG1SbGMzUnliM2xVWVdKc1pTaHpaV3htTG1OdmJtWnBaM1Z5WVhScGIyNHBPMXh5WEc1Y2RIMDdYSEpjYmx4MGMyVnNaaTVuWlhSSlpDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNWNkRngwY21WMGRYSnVJSE5sYkdZdWRXNXBjWFZsU1dRN1hISmNibHgwZlR0Y2NseHVmVnh5WEc1Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQldhWEowZFdGc1JHRjBZVWR5YVdRN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWNjbHh1ZG1GeUlHTnZibVpwWjFWMGFXd2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdlkyOXVabWxuZFhKaGRHbHZiaWNwTEZ4eVhHNWNkR1JoZEdGVmRHbHNJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZaR0YwWVNjcExGeHlYRzVjZEhSdmIyeDBhWEJFWldaaGRXeDBJRDBnY21WeGRXbHlaU2duTGk0dlpHVm1ZWFZzZEhNdmRHOXZiSFJwY0NjcE8xeHlYRzVjY2x4dWRtRnlJRVJGUmtGVlRGUlRJRDBnZTF4eVhHNWNkSE5sYkdWamRHOXljem9nZTF4eVhHNWNkRngwYldGcGJrTnZiblJoYVc1bGNqb2dKeTVrWVhSaExXTnZiblJoYVc1bGNpY3NYSEpjYmx4MFhIUm1hWGhsWkVOdmJuUmhhVzVsY2pvZ0oyWnBlR1ZrTFdOdmJuUmhhVzVsY2ljc1hISmNibHgwWEhSbWFYaGxaRlJoWW14bE9pQW5abWw0WldRdGRHRmliR1VuTEZ4eVhHNWNkRngwZG1seWRIVmhiRU52Ym5SaGFXNWxjam9nSjNacGNuUjFZV3d0WTI5dWRHRnBibVZ5Snl4Y2NseHVYSFJjZEhacGNuUjFZV3hVWVdKc1pUb2dKM1pwY25SMVlXd3RkR0ZpYkdVbkxGeHlYRzVjZEZ4MFpXUnBkR2x1WjBObGJHdzZJQ2RsWkdsMGFXNW5MV05sYkd3bkxGeHlYRzVjZEZ4MFpXUnBkR1ZrUTJWc2JEb2dKMlZrYVhSbFpDMWpaV3hzSnl4Y2NseHVYSFJjZEhOaGRtVkNkWFIwYjI0NklHNTFiR3hjY2x4dVhIUjlMRnh5WEc1Y2RHUnBiV1Z1YzJsdmJuTTZJSHRjY2x4dVhIUmNkR05sYkd4WGFXUjBhRG9nTVRVd0xGeHlYRzVjZEZ4MFkyVnNiRWhsYVdkb2REb2dOVEFzWEhKY2JseDBYSFJqWld4c1VHRmtaR2x1WjFabGNuUnBZMkZzT2lBMExGeHlYRzVjZEZ4MFkyVnNiRkJoWkdScGJtZEliM0pwZW05dWRHRnNPaUE0TEZ4eVhHNWNkRngwWTJWc2JFSnZjbVJsY2xkcFpIUm9PaUF4TEZ4eVhHNWNkRngwWTI5dWRHRnBibVZ5U0dWcFoyaDBPaUJqYjI1bWFXZFZkR2xzTG1kbGRFUmxabUYxYkhSRGIyNTBZV2x1WlhKSVpXbG5hSFJjY2x4dVhIUjlMRnh5WEc1Y2RHVmthWFE2SUh0Y2NseHVYSFJjZEdWdVlXSnNaV1E2SUdaaGJITmxMRnh5WEc1Y2RGeDBiVzlrWlRvZ0oySmhkR05vSjF4eVhHNWNkSDBzWEhKY2JseDBabWxzZEdWeU9pQjdYSEpjYmx4MFhIUmxibUZpYkdWa09pQm1ZV3h6WlN4Y2NseHVYSFJjZEdOMWMzUnZiVVpwYkhSbGNqb2diblZzYkZ4eVhHNWNkSDBzWEhKY2JseDBjMjl5ZERvZ2UxeHlYRzVjZEZ4MFpXNWhZbXhsWkRvZ1ptRnNjMlVzWEhKY2JseDBYSFJrWldaaGRXeDBPaUJqYjI1bWFXZFZkR2xzTG1kbGRGTnZjblJFWldaaGRXeDBMRnh5WEc1Y2RGeDBZM1Z6ZEc5dFUyOXlkRG9nYm5Wc2JGeHlYRzVjZEgwc1hISmNibHgwWlhabGJuUklZVzVrYkdWeWN6b2dlMXh5WEc1Y2RGeDBiMjVDWldadmNtVkZaR2wwT2lCamIyNW1hV2RWZEdsc0xtNXBiQ3hjY2x4dVhIUmNkRzl1Vm1Gc2FXUmhkR2x2YmpvZ1kyOXVabWxuVlhScGJDNXVhV3dzWEhKY2JseDBYSFJ2YmtGbWRHVnlSV1JwZERvZ1kyOXVabWxuVlhScGJDNXVhV3dzWEhKY2JseDBYSFJ2YmtKbFptOXlaVk5oZG1VNklHTnZibVpwWjFWMGFXd3VibWxzTEZ4eVhHNWNkRngwYjI1VFlYWmxVbTkzT2lCamIyNW1hV2RWZEdsc0xtNXBiQ3hjY2x4dVhIUmNkRzl1VTJGMlpVSmhkR05vT2lCamIyNW1hV2RWZEdsc0xtNXBiQ3hjY2x4dVhIUmNkRzl1UVdaMFpYSlRZWFpsT2lCamIyNW1hV2RWZEdsc0xtNXBiRnh5WEc1Y2RIMHNYSEpjYmx4MGJHOWpZV3hsT2lCN1hISmNibHgwWEhSdVlXMWxPaUFuWlc0blhISmNibHgwZlN4Y2NseHVYSFJrWVhSaFUyOTFjbU5sT2lCYklGMHNYSEpjYmx4MGFHVmhaR1Z5Y3pvZ1d5QmJJRjBnWFN4Y2NseHVYSFJtYVhobFpFaGxZV1JsY25NNklGc2dXeUJkSUYwc1hISmNibHgwZFc1cGNYVmxVbTkzUzJWNU9pQW5YMTkxYm1seGRXVlNiM2RMWlhrbkxGeHlYRzVjZEdGMWRHOVNaWE5wZW1VNklIUnlkV1VzWEhKY2JseDBaR1ZpZFdjNklHWmhiSE5sTEZ4eVhHNWNkSFZ1YVhGMVpVbGtPaUF3TEZ4eVhHNWNkRzF2WkhWc1pYTTZJSHRjY2x4dVhIUmNkSFJ2YjJ4MGFYQTZJSHRjY2x4dVhIUmNkRngwWlc1aFlteGxaRG9nZEhKMVpTeGNjbHh1WEhSY2RGeDBjMmh2ZHpvZ1kyOXVabWxuVlhScGJDNTNjbUZ3Y0dWeUtIUnZiMngwYVhCRVpXWmhkV3gwTG5Ob2IzY3BMRnh5WEc1Y2RGeDBYSFJvYVdSbE9pQmpiMjVtYVdkVmRHbHNMbmR5WVhCd1pYSW9kRzl2YkhScGNFUmxabUYxYkhRdWFHbGtaU2tzWEhKY2JseDBYSFJjZEdocFpHVkJiR3c2SUdOdmJtWnBaMVYwYVd3dWQzSmhjSEJsY2loMGIyOXNkR2x3UkdWbVlYVnNkQzVvYVdSbFFXeHNLU3hjY2x4dVhIUmNkRngwYzJodmQwbHVabTg2SUdOdmJtWnBaMVYwYVd3dWQzSmhjSEJsY2loMGIyOXNkR2x3UkdWbVlYVnNkQzV6YUc5M1NXNW1ieWtzWEhKY2JseDBYSFJjZEhOb2IzZFhZWEp1T2lCamIyNW1hV2RWZEdsc0xuZHlZWEJ3WlhJb2RHOXZiSFJwY0VSbFptRjFiSFF1YzJodmQxZGhjbTRwTEZ4eVhHNWNkRngwWEhSemFHOTNSWEp5YjNJNklHTnZibVpwWjFWMGFXd3VkM0poY0hCbGNpaDBiMjlzZEdsd1JHVm1ZWFZzZEM1emFHOTNSWEp5YjNJcFhISmNibHgwWEhSOVhISmNibHgwZlN4Y2NseHVYSFJwYm01bGNqb2dlMzFjY2x4dWZUdGNjbHh1WEhKY2JuWmhjaUJJUlVGRVJWSmZSRVZHUVZWTVZGTWdQU0I3WEhKY2JseDBaR0YwWVZSNWNHVTZJQ2QwWlhoMEp5eGNjbHh1WEhSbWFXeDBaWEpVZVhCbE9pQW5aWEYxWVd4ekp5eGNjbHh1WEhSbWFXeDBaWEpFYVhOaFlteGxaRG9nWm1Gc2MyVXNYSEpjYmx4MGMyOXlkRVJwYzJGaWJHVmtPaUJtWVd4elpWeHlYRzU5TzF4eVhHNWNjbHh1ZG1GeUlGTlVRVlJKUTE5SlRrNUZVbDlCVkZSU1V5QTlJSHRjY2x4dVhIUnpaV3hsWTNSdmNuTTZJSHRjY2x4dVhIUmNkSFZ1YVhGMVpVbGtVSEpsWm1sNE9pQW5kbWx5ZEhWaGJDMWtZWFJoTFdkeWFXUXRKeXhjY2x4dVhIUmNkR0oxWm1abGNsSnZkMVJ2Y0RvZ0oySjFabVpsY2kxeWIzY3RkRzl3Snl4Y2NseHVYSFJjZEdKMVptWmxjbEp2ZDBKdmRIUnZiVG9nSjJKMVptWmxjaTF5YjNjdFltOTBkRzl0Snl4Y2NseHVYSFJjZEdKMVptWmxja052YkhWdGJreGxablE2SUNkaWRXWm1aWEl0WTI5c2RXMXVMV3hsWm5RbkxGeHlYRzVjZEZ4MFluVm1abVZ5UTI5c2RXMXVVbWxuYUhRNklDZGlkV1ptWlhJdFkyOXNkVzF1TFhKcFoyaDBKeXhjY2x4dVhIUmNkR2hsWVdSbGNsSnZkem9nSjJobFlXUmxjaTF5YjNjbkxGeHlYRzVjZEZ4MGFHVmhaR1Z5UTJWc2JEb2dKMmhsWVdSbGNpMWpaV3hzSnl4Y2NseHVYSFJjZEhOdmNuUkRaV3hzT2lBbmMyOXlkQzFqWld4c0p5eGNjbHh1WEhSY2RITnZjblJKWTI5dU9pQW5jMjl5ZEMxcFkyOXVKeXhjY2x4dVhIUmNkSE52Y25SRWFYTmhZbXhsWkRvZ0ozTnZjblF0WkdsellXSnNaV1FuTEZ4eVhHNWNkRngwWm1sc2RHVnlVbTkzT2lBblptbHNkR1Z5TFhKdmR5Y3NYSEpjYmx4MFhIUm1hV3gwWlhKRFpXeHNPaUFuWm1sc2RHVnlMV05sYkd3bkxGeHlYRzVjZEZ4MFptbHNkR1Z5UkdsellXSnNaV1E2SUNkbWFXeDBaWEl0WkdsellXSnNaV1FuTEZ4eVhHNWNkRngwWm1sc2RHVnlRMjl1ZEdGcGJtVnlPaUFuWm1sc2RHVnlMV052Ym5SaGFXNWxjaWNzWEhKY2JseDBYSFJtYVd4MFpYSlRaV0Z5WTJoSlkyOXVPaUFuWm1sc2RHVnlMWE5sWVhKamFDMXBZMjl1Snl4Y2NseHVYSFJjZEdacGJIUmxja05zWldGeVNXTnZiam9nSjJacGJIUmxjaTFqYkdWaGNpMXBZMjl1Snl4Y2NseHVYSFJjZEdSaGRHRlNiM2M2SUNka1lYUmhMWEp2ZHljc1hISmNibHgwWEhSa1lYUmhRMlZzYkRvZ0oyUmhkR0V0WTJWc2JDY3NYSEpjYmx4MFhIUmpaV3hzUkdGMFlVTnZiblJoYVc1bGNqb2dKMk5sYkd3dFpHRjBZUzFqYjI1MFlXbHVaWEluWEhKY2JseDBmU3hjY2x4dVhIUmthVzFsYm5OcGIyNXpPaUI3ZlN4Y2NseHVYSFJwWTI5dWN6b2dlMXh5WEc1Y2RGeDBjMjl5ZERvZ2UxeHlYRzVjZEZ4MFhIUmhjMk02SUNkbVlTQm1ZUzFoY25KdmR5MWtiM2R1Snl4Y2NseHVYSFJjZEZ4MFpHVnpZem9nSjJaaElHWmhMV0Z5Y205M0xYVndKMXh5WEc1Y2RGeDBmU3hjY2x4dVhIUmNkR1pwYkhSbGNqb2dlMXh5WEc1Y2RGeDBYSFJ6WldGeVkyZzZJQ2RtWVNCbVlTMXpaV0Z5WTJnbkxGeHlYRzVjZEZ4MFhIUmpiR1ZoY2pvZ0oyWmhJR1poTFhScGJXVnpKMXh5WEc1Y2RGeDBmVnh5WEc1Y2RIMHNYSEpjYmx4MFpXUnBkR1ZrVm1Gc2RXVnpPaUI3ZlN4Y2NseHVYSFJ6YjNKME9pQjdJSDBzWEhKY2JseDBabWxzZEdWeWN6b2dleUI5TEZ4eVhHNWNkRzFwYmtKMVptWmxjbGRwWkhSb09pQXlMRnh5WEc1Y2RHMXBia0oxWm1abGNraGxhV2RvZERvZ01UZ3NJQzh2SUVGNnc2bHlkQ0IyWVc0Z2NzT2hJSE42dzd4cmM4T3BaeXdnYldWeWRDQm9ZU0J1YVc1amN5QnRaV2RoWkhaaExDQmhhMnR2Y2lCMVozSnBheUJsWjNsbGRIUWdZU0J6WTNKdmJHd2dhR0VnWVNCMnc2bG53Nmx5WlNCMllXZDVJR0Y2SUdWc1pXckRxWEpsSU1PcGNuVER2RzVySUdFZ2RNT2hZbXpEb1hwaGRHSmhibHh5WEc1Y2RHeGxablJEWld4c1QyWm1jMlYwT2lBd0xGeHlYRzVjZEhSdmNFTmxiR3hQWm1aelpYUTZJREJjY2x4dWZUdGNjbHh1WEhKY2JtWjFibU4wYVc5dUlHbHVhWFFvWTI5dVptbG5MQ0J2Y0hScGIyNXpLU0I3WEhKY2JseDBhVzVwZEVOdmJtWnBaMDlpYW1WamRDaGpiMjVtYVdjcE8xeHlYRzVjY2x4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2R6Wld4bFkzUnZjbk11YldGcGJrTnZiblJoYVc1bGNpY3BPMXh5WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKM05sYkdWamRHOXljeTVtYVhobFpFTnZiblJoYVc1bGNpY3BPMXh5WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKM05sYkdWamRHOXljeTVtYVhobFpGUmhZbXhsSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBbmMyVnNaV04wYjNKekxuWnBjblIxWVd4RGIyNTBZV2x1WlhJbktUdGNjbHh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHpaV3hsWTNSdmNuTXVkbWx5ZEhWaGJGUmhZbXhsSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBbmMyVnNaV04wYjNKekxtVmthWFJwYm1kRFpXeHNKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYzJWc1pXTjBiM0p6TG1Wa2FYUmxaRU5sYkd3bktUdGNjbHh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHpaV3hsWTNSdmNuTXVjMkYyWlVKMWRIUnZiaWNwTzF4eVhHNWNkSFZ3WkdGMFpWWmhiSFZsS0dOdmJtWnBaeXdnYjNCMGFXOXVjeXdnSjJScGJXVnVjMmx2Ym5NdVkyVnNiRmRwWkhSb0p5azdYSEpjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5aR2x0Wlc1emFXOXVjeTVqWld4c1NHVnBaMmgwSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpHbHRaVzV6YVc5dWN5NWpaV3hzVUdGa1pHbHVaMVpsY25ScFkyRnNKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuWkdsdFpXNXphVzl1Y3k1alpXeHNVR0ZrWkdsdVowaHZjbWw2YjI1MFlXd25LVHRjY2x4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2RrYVcxbGJuTnBiMjV6TG1ObGJHeENiM0prWlhKWGFXUjBhQ2NwTzF4eVhHNWNkSFZ3WkdGMFpWWmhiSFZsS0dOdmJtWnBaeXdnYjNCMGFXOXVjeXdnSjNWdWFYRjFaVWxrSnlrN1hISmNibHh5WEc1Y2RHTmhiR04xYkdGMFpWVnVhWEYxWlVsa1UyVnNaV04wYjNJb1kyOXVabWxuS1R0Y2NseHVYSFJqWVd4amRXeGhkR1ZXYVhKMGRXRnNRMjl1ZEdGcGJtVnlTR1ZwWjJoMEtHTnZibVpwWnl3Z2IzQjBhVzl1Y3lrN1hISmNibHh5WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKMnh2WTJGc1pTNXVZVzFsSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpHRjBZVk52ZFhKalpTY3BPMXh5WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKMmhsWVdSbGNuTW5LVHRjY2x4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2RtYVhobFpFaGxZV1JsY25NbktUdGNjbHh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZDFibWx4ZFdWU2IzZExaWGtuS1R0Y2NseHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkaGRYUnZVbVZ6YVhwbEp5azdYSEpjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5aV1JwZEM1bGJtRmliR1ZrSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpXUnBkQzV0YjJSbEp5azdYSEpjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5abWxzZEdWeUxtVnVZV0pzWldRbktUdGNjbHh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZG1hV3gwWlhJdVkzVnpkRzl0Um1sc2RHVnlKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYzI5eWRDNWxibUZpYkdWa0p5azdYSEpjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5jMjl5ZEM1a1pXWmhkV3gwSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBbmMyOXlkQzVqZFhOMGIyMVRiM0owSnlrN1hISmNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpHVmlkV2NuS1R0Y2NseHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkbGRtVnVkRWhoYm1Sc1pYSnpMbTl1UW1WbWIzSmxSV1JwZENjcE8xeHlYRzVjZEhWd1pHRjBaVlpoYkhWbEtHTnZibVpwWnl3Z2IzQjBhVzl1Y3l3Z0oyVjJaVzUwU0dGdVpHeGxjbk11YjI1V1lXeHBaR0YwYVc5dUp5azdYSEpjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5aWFpsYm5SSVlXNWtiR1Z5Y3k1dmJrRm1kR1Z5UldScGRDY3BPMXh5WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKMlYyWlc1MFNHRnVaR3hsY25NdWIyNUNaV1p2Y21WVFlYWmxKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuWlhabGJuUklZVzVrYkdWeWN5NXZibE5oZG1WU2IzY25LVHRjY2x4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2RsZG1WdWRFaGhibVJzWlhKekxtOXVVMkYyWlVKaGRHTm9KeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuWlhabGJuUklZVzVrYkdWeWN5NXZia0ZtZEdWeVUyRjJaU2NwTzF4eVhHNWNjbHh1WEhRdkx5QlViMjlzZEdsd0lHMXZaSFZzWlZ4eVhHNWNkSFZ3WkdGMFpWWmhiSFZsS0dOdmJtWnBaeXdnYjNCMGFXOXVjeXdnSjIxdlpIVnNaWE11ZEc5dmJIUnBjQzVsYm1GaWJHVmtKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYlc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNjbktUdGNjbHh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHRiMlIxYkdWekxuUnZiMngwYVhBdWFHbGtaU2NwTzF4eVhHNWNkSFZ3WkdGMFpWWmhiSFZsS0dOdmJtWnBaeXdnYjNCMGFXOXVjeXdnSjIxdlpIVnNaWE11ZEc5dmJIUnBjQzVvYVdSbFFXeHNKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYlc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNkSmJtWnZKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYlc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNkWFlYSnVKeWs3WEhKY2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYlc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNkRmNuSnZjaWNwTzF4eVhHNWNjbHh1WEhScGJtbDBTR1ZoWkdWeVJHRjBZU2hqYjI1bWFXY3BPMXh5WEc1Y2RHbHVhWFJFWVhSaFUyOTFjbU5sS0dOdmJtWnBaeXdnYjNCMGFXOXVjeTUxYm1seGRXVlNiM2RMWlhrcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJwYm1sMFEyOXVabWxuVDJKcVpXTjBLR052Ym1acFp5a2dlMXh5WEc1Y2RHTnZibVpwWnk1elpXeGxZM1J2Y25NZ1BTQjdmVHRjY2x4dVhIUmpiMjVtYVdjdVpYWmxiblJJWVc1a2JHVnljeUE5SUh0OU8xeHlYRzVjZEdOdmJtWnBaeTVzYjJOaGJHVWdQU0I3ZlR0Y2NseHVYSFJqYjI1bWFXY3VhVzV1WlhJZ1BTQmtZWFJoVlhScGJDNWpiRzl1WlU5aWFtVmpkQ2hUVkVGVVNVTmZTVTVPUlZKZlFWUlVVbE1wTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQmpZV3hqZFd4aGRHVlZibWx4ZFdWSlpGTmxiR1ZqZEc5eUtHTnZibVpwWnlrZ2UxeHlYRzVjZEdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVkVzVwY1hWbFNXUWdQU0JqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxuVnVhWEYxWlVsa1VISmxabWw0SUNzZ1kyOXVabWxuTG5WdWFYRjFaVWxrTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQmpZV3hqZFd4aGRHVldhWEowZFdGc1EyOXVkR0ZwYm1WeVNHVnBaMmgwS0dOdmJtWnBaeXdnYjNCMGFXOXVjeWtnZTF4eVhHNWNkSFpoY2lCamIyNTBZV2x1WlhKSVpXbG5hSFFnUFNCblpYUkpibTVsY2xaaGJIVmxLRzl3ZEdsdmJuTXNJQ2RrYVcxbGJuTnBiMjV6TG1OdmJuUmhhVzVsY2tobGFXZG9kQ2NwTzF4eVhHNWNjbHh1WEhScFppQW9kSGx3Wlc5bUlHTnZiblJoYVc1bGNraGxhV2RvZENBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwWTI5dWRHRnBibVZ5U0dWcFoyaDBJRDBnWTI5dVptbG5WWFJwYkM1blpYUkVaV1poZFd4MFEyOXVkR0ZwYm1WeVNHVnBaMmgwS0dOdmJtWnBaeWs3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFJqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqYjI1MFlXbHVaWEpJWldsbmFIUWdQU0JqYjI1bWFXZFZkR2xzTG1OaGJHTjFiR0YwWlZacGNuUjFZV3hEYjI1MFlXbHVaWEpJWldsbmFIUW9ZMjl1Wm1sbkxDQmpiMjUwWVdsdVpYSklaV2xuYUhRcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJwYm1sMFEyRnNZM1ZzWVhSbFpGWmhiSFZsY3loamIyNW1hV2NwSUh0Y2NseHVYSFF2THlCQmJtNWhheUJoSUdobFlXUmxjaUJ6YjNKdVlXc2dZWG9nYVc1a1pYaGxMQ0JoYldrZ1lTQmpaV3hzWVNCcmRXeGpjMjlyWVhRZ2FYTWdiV1ZuYUdGMHc2RnliM3A2WVM0Z1RXbDJaV3dnWlhvZ2JXbHVaR2xuSUdGNklIVjBiMnh6dzdNZ2JHVnplaXdnWlhyRHFYSjBJRlJQUkU4NklFdHBjM3BsWkc1cEw4T2hkR0ZzWVd2RHJYUmhibWxjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1YVc1a1pYaFBaa05sYkd4TFpYbElaV0ZrWlhJZ1BTQmpiMjVtYVdkVmRHbHNMbWRsZEVsdVpHVjRUMlpEWld4c1MyVjVTR1ZoWkdWeUtHTnZibVpwWnlrN1hISmNibHgwWTI5dVptbG5MbWx1Ym1WeUxtTnZiSE53WVc1UFptWnpaWFFnUFNCamIyNW1hV2RWZEdsc0xtZGxkRTFoZUVOdmJITndZVzRvWTI5dVptbG5LVHRjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1ZG1semFXSnNaVkp2ZDA1MWJXSmxjaUE5SUdOdmJtWnBaMVYwYVd3dVoyVjBWbWx6YVdKc1pWSnZkMDUxYldKbGNpaGpiMjVtYVdjcE8xeHlYRzVjZEdOdmJtWnBaeTVwYm01bGNpNTJhWE5wWW14bFEyOXNkVzF1VG5WdFltVnlJRDBnWTI5dVptbG5WWFJwYkM1blpYUldhWE5wWW14bFEyOXNkVzF1VG5WdFltVnlLR052Ym1acFp5azdYSEpjYmx4MFkyOXVabWxuTG1sdWJtVnlMblJoWW14bFQyWm1jMlYwVjJsa2RHZ2dQU0JqYjI1bWFXZFZkR2xzTG1kbGRGUmhZbXhsVDJabWMyVjBWMmxrZEdnb1kyOXVabWxuS1R0Y2NseHVYSFJqYjI1bWFXY3VhVzV1WlhJdWRHRmliR1ZQWm1aelpYUklaV2xuYUhRZ1BTQmpiMjVtYVdkVmRHbHNMbWRsZEZSaFlteGxUMlptYzJWMFNHVnBaMmgwS0dOdmJtWnBaeWs3WEhKY2JseDBZMjl1Wm1sbkxtbHVibVZ5TG05eWFXZHBibUZzUkdGMFlWTnZkWEpqWlNBOUlGdGRMbU52Ym1OaGRDaGpiMjVtYVdjdVpHRjBZVk52ZFhKalpTazdYSEpjYmx4MFkyOXVabWxuTG1sdWJtVnlMbVJwYldWdWMybHZibk11YzJOeWIyeHNUR2x1WlVobGFXZG9kQ0E5SUdOdmJtWnBaMVYwYVd3dVoyVjBVMk55YjJ4c1RHbHVaVWhsYVdkb2RDZ3BPMXh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVrYVcxbGJuTnBiMjV6TG5OamNtOXNiRkJoWjJWSVpXbG5hSFFnUFNCamIyNW1hV2RWZEdsc0xtZGxkRk5qY205c2JGQmhaMlZJWldsbmFIUW9LVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2FXNXBkRWhsWVdSbGNrUmhkR0VvWTI5dVptbG5LU0I3WEhKY2JseDBkbUZ5SUhCeWIyTmxjM05sWkVobFlXUmxjbk1nUFNCYlhTeGNjbHh1WEhSY2RIQnliMk5sYzNObFpFWnBlR1ZrU0dWaFpHVnljeUE5SUZ0ZE8xeHlYRzVjY2x4dVhIUmpiMjVtYVdjdWFHVmhaR1Z5Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dobFlXUmxjbEp2ZHlrZ2UxeHlYRzVjZEZ4MGRtRnlJR2hTYjNjZ1BTQmJYVHRjY2x4dVhISmNibHgwWEhSb1pXRmtaWEpTYjNjdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymlob1pXRmtaWEpEWld4c0tTQjdYSEpjYmx4MFhIUmNkR2xtSUNoMGVYQmxiMllnYUdWaFpHVnlRMlZzYkM1a1lYUmhWSGx3WlNBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwWEhSY2RHaGxZV1JsY2tObGJHd3VaR0YwWVZSNWNHVWdQU0JJUlVGRVJWSmZSRVZHUVZWTVZGTXVaR0YwWVZSNWNHVTdYSEpjYmx4MFhIUmNkSDFjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2gwZVhCbGIyWWdhR1ZoWkdWeVEyVnNiQzVtYVd4MFpYSlVlWEJsSUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEhKY2JseDBYSFJjZEZ4MGFHVmhaR1Z5UTJWc2JDNW1hV3gwWlhKVWVYQmxJRDBnU0VWQlJFVlNYMFJGUmtGVlRGUlRMbVpwYkhSbGNsUjVjR1U3WEhKY2JseDBYSFJjZEgxY2NseHVYSEpjYmx4MFhIUmNkR2xtSUNoMGVYQmxiMllnYUdWaFpHVnlRMlZzYkM1bWFXeDBaWEpFYVhOaFlteGxaQ0E5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh5WEc1Y2RGeDBYSFJjZEdobFlXUmxja05sYkd3dVptbHNkR1Z5UkdsellXSnNaV1FnUFNCSVJVRkVSVkpmUkVWR1FWVk1WRk11Wm1sc2RHVnlSR2x6WVdKc1pXUTdYSEpjYmx4MFhIUmNkSDFjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2gwZVhCbGIyWWdhR1ZoWkdWeVEyVnNiQzV6YjNKMFJHbHpZV0pzWldRZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVYSFJjZEZ4MFhIUm9aV0ZrWlhKRFpXeHNMbk52Y25SRWFYTmhZbXhsWkNBOUlFaEZRVVJGVWw5RVJVWkJWVXhVVXk1emIzSjBSR2x6WVdKc1pXUTdYSEpjYmx4MFhIUmNkSDFjY2x4dVhISmNibHgwWEhSY2RHaFNiM2N1Y0hWemFDaG9aV0ZrWlhKRFpXeHNLVHRjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2gwZVhCbGIyWWdhR1ZoWkdWeVEyVnNiQzVqYjJ4emNHRnVJQ0U5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmx4MFhIUmNkRngwWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCb1pXRmtaWEpEWld4c0xtTnZiSE53WVc0N0lHa3JLeWtnZTF4eVhHNWNkRngwWEhSY2RGeDBhRkp2ZHk1d2RYTm9LSHQ5S1R0Y2NseHVYSFJjZEZ4MFhIUjlYSEpjYmx4MFhIUmNkSDFjY2x4dVhIUmNkSDBwTzF4eVhHNWNjbHh1WEhSY2RIQnliMk5sYzNObFpFaGxZV1JsY25NdWNIVnphQ2hvVW05M0tUdGNjbHh1WEhSOUtUdGNjbHh1WEhKY2JseDBZMjl1Wm1sbkxtWnBlR1ZrU0dWaFpHVnljeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR2hsWVdSbGNsSnZkeWtnZTF4eVhHNWNkRngwZG1GeUlHaFNiM2NnUFNCYlhUdGNjbHh1WEhKY2JseDBYSFJvWldGa1pYSlNiM2N1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhvWldGa1pYSkRaV3hzS1NCN1hISmNibHgwWEhSY2RHbG1JQ2gwZVhCbGIyWWdhR1ZoWkdWeVEyVnNiQzVrWVhSaFZIbHdaU0E5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh5WEc1Y2RGeDBYSFJjZEdobFlXUmxja05sYkd3dVpHRjBZVlI1Y0dVZ1BTQklSVUZFUlZKZlJFVkdRVlZNVkZNdVpHRjBZVlI1Y0dVN1hISmNibHgwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2FHVmhaR1Z5UTJWc2JDNW1hV3gwWlhKVWVYQmxJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmx4MFhIUmNkRngwYUdWaFpHVnlRMlZzYkM1bWFXeDBaWEpVZVhCbElEMGdTRVZCUkVWU1gwUkZSa0ZWVEZSVExtWnBiSFJsY2xSNWNHVTdYSEpjYmx4MFhIUmNkSDFjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2gwZVhCbGIyWWdhR1ZoWkdWeVEyVnNiQzVtYVd4MFpYSkVhWE5oWW14bFpDQTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHlYRzVjZEZ4MFhIUmNkR2hsWVdSbGNrTmxiR3d1Wm1sc2RHVnlSR2x6WVdKc1pXUWdQU0JJUlVGRVJWSmZSRVZHUVZWTVZGTXVabWxzZEdWeVJHbHpZV0pzWldRN1hISmNibHgwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2FHVmhaR1Z5UTJWc2JDNXpiM0owUkdsellXSnNaV1FnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjY2x4dVhIUmNkRngwWEhSb1pXRmtaWEpEWld4c0xuTnZjblJFYVhOaFlteGxaQ0E5SUVoRlFVUkZVbDlFUlVaQlZVeFVVeTV6YjNKMFJHbHpZV0pzWldRN1hISmNibHgwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEdoU2IzY3VjSFZ6YUNob1pXRmtaWEpEWld4c0tUdGNjbHh1WEhKY2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2FHVmhaR1Z5UTJWc2JDNWpiMnh6Y0dGdUlDRTlJQ2QxYm1SbFptbHVaV1FuS1NCN1hISmNibHgwWEhSY2RGeDBabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JvWldGa1pYSkRaV3hzTG1OdmJITndZVzQ3SUdrckt5a2dlMXh5WEc1Y2RGeDBYSFJjZEZ4MGFGSnZkeTV3ZFhOb0tIdDlLVHRjY2x4dVhIUmNkRngwWEhSOVhISmNibHgwWEhSY2RIMWNjbHh1WEhSY2RIMHBPMXh5WEc1Y2NseHVYSFJjZEhCeWIyTmxjM05sWkVacGVHVmtTR1ZoWkdWeWN5NXdkWE5vS0doU2IzY3BPMXh5WEc1Y2RIMHBPMXh5WEc1Y2NseHVYSFJqYjI1bWFXY3VhR1ZoWkdWeWN5QTlJSEJ5YjJObGMzTmxaRWhsWVdSbGNuTTdYSEpjYmx4MFkyOXVabWxuTG1acGVHVmtTR1ZoWkdWeWN5QTlJSEJ5YjJObGMzTmxaRVpwZUdWa1NHVmhaR1Z5Y3p0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdhVzVwZEVSaGRHRlRiM1Z5WTJVb1kyOXVabWxuTENCMWJtbHhkV1ZTYjNkTFpYa3BJSHRjY2x4dVhIUnBaaUFvZEhsd1pXOW1JSFZ1YVhGMVpWSnZkMHRsZVNBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCamIyNW1hV2N1WkdGMFlWTnZkWEpqWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc1Y2RGeDBYSFJqYjI1bWFXY3VaR0YwWVZOdmRYSmpaVnRwWFZ0amIyNW1hV2N1ZFc1cGNYVmxVbTkzUzJWNVhTQTlJR2s3WEhKY2JseDBYSFI5WEhKY2JseDBmVnh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lHdGxlU2tnZTF4eVhHNWNkSFpoY2lCMFlYSm5aWFFnUFNCblpYUkpibTVsY2s5aWFtVmpkQ2hqYjI1bWFXY3NJR3RsZVNrc0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNjbHh1WEhSY2RIWmhiSFZsSUQwZ1oyVjBTVzV1WlhKV1lXeDFaU2h2Y0hScGIyNXpMQ0JyWlhrcExGeHlYRzVjZEZ4MGEyVjVjeUE5SUd0bGVTNXpjR3hwZENnbkxpY3BMRnh5WEc1Y2RGeDBiR0Z6ZEV0bGVTQTlJR3RsZVhOYmEyVjVjeTVzWlc1bmRHZ2dMU0F4WFR0Y2NseHVYSEpjYmx4MGFXWWdLSFI1Y0dWdlppQjJZV3gxWlNBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwZEdGeVoyVjBXMnhoYzNSTFpYbGRJRDBnZEhsd1pXOW1JR2RsZEVsdWJtVnlWbUZzZFdVb1JFVkdRVlZNVkZNc0lHdGxlU2tnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR2RsZEVsdWJtVnlWbUZzZFdVb1JFVkdRVlZNVkZNc0lHdGxlU2tvWTI5dVptbG5LU0E2SUdkbGRFbHVibVZ5Vm1Gc2RXVW9SRVZHUVZWTVZGTXNJR3RsZVNrN1hISmNibHgwZlNCbGJITmxJSHRjY2x4dVhIUmNkSFJoY21kbGRGdHNZWE4wUzJWNVhTQTlJSFpoYkhWbE8xeHlYRzVjZEgxY2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdaMlYwU1c1dVpYSlBZbXBsWTNRb2IySnFaV04wTENCclpYa3BJSHRjY2x4dVhIUnBaaUFvYTJWNUxtbHVaR1Y0VDJZb0p5NG5LU0E5UFQwZ0xURXBJSHRjY2x4dVhIUmNkSEpsZEhWeWJpQnZZbXBsWTNRN1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSMllYSWdjM1ZpUzJWNUlEMGdhMlY1TG5Od2JHbDBLQ2N1SnlsYk1GMHNYSEpjYmx4MFhIUnpkV0pQWW1wbFkzUWdQU0J2WW1wbFkzUmJjM1ZpUzJWNVhUdGNjbHh1WEhKY2JseDBhV1lnS0hSNWNHVnZaaUJ6ZFdKUFltcGxZM1FnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjY2x4dVhIUmNkRzlpYW1WamRGdHpkV0pMWlhsZElEMGdlMzA3WEhKY2JseDBYSFJ6ZFdKUFltcGxZM1FnUFNCdlltcGxZM1JiYzNWaVMyVjVYVHRjY2x4dVhIUjlYSEpjYmx4eVhHNWNkSEpsZEhWeWJpQm5aWFJKYm01bGNrOWlhbVZqZENoemRXSlBZbXBsWTNRc0lHdGxlUzV6ZFdKemRISnBibWNvYTJWNUxtbHVaR1Y0VDJZb0p5NG5LU0FySURFcEtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWjJWMFNXNXVaWEpXWVd4MVpTaHZZbXBsWTNRc0lHdGxlU2tnZTF4eVhHNWNkR2xtSUNoclpYa3VhVzVrWlhoUFppZ25MaWNwSUQwOVBTQXRNU2tnZTF4eVhHNWNkRngwY21WMGRYSnVJRzlpYW1WamRGdHJaWGxkTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwZG1GeUlITjFZa3RsZVNBOUlHdGxlUzV6Y0d4cGRDZ25MaWNwV3pCZExGeHlYRzVjZEZ4MGMzVmlUMkpxWldOMElEMGdiMkpxWldOMFczTjFZa3RsZVYwN1hISmNibHh5WEc1Y2RHbG1JQ2gwZVhCbGIyWWdjM1ZpVDJKcVpXTjBJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmx4MFhIUnlaWFIxY200Z2MzVmlUMkpxWldOME8xeHlYRzVjZEgxY2NseHVYSEpjYmx4MGNtVjBkWEp1SUdkbGRFbHVibVZ5Vm1Gc2RXVW9jM1ZpVDJKcVpXTjBMQ0JyWlhrdWMzVmljM1J5YVc1bktHdGxlUzVwYm1SbGVFOW1LQ2N1SnlrZ0t5QXhLU2s3WEhKY2JuMWNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHlYRzVjZEdsdWFYUTZJR2x1YVhRc1hISmNibHgwYVc1cGRFTmhiR04xYkdGMFpXUldZV3gxWlhNNklHbHVhWFJEWVd4amRXeGhkR1ZrVm1Gc2RXVnpMRnh5WEc1Y2RFUkZSa0ZWVEZSVE9pQkVSVVpCVlV4VVUxeHlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dVhISmNiblpoY2lCMFlXSnNaVlYwYVd3Z0lDQTlJSEpsY1hWcGNtVW9KeTR1TDNWMGFXeHpMM1JoWW14bEp5a3NYSEpjYmx4MFkyOXVabWxuVlhScGJDQWdQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNjeTlqYjI1bWFXZDFjbUYwYVc5dUp5a3NYSEpjYmx4MFkyVnNiRVZzWlcxbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TGk5bGJHVnRaVzUwY3k5alpXeHNKeWs3WEhKY2JseHlYRzVtZFc1amRHbHZiaUIxY0dSaGRHVlVZV0pzWlNoamIyNW1hV2NzSUdadmNtTmxWWEJrWVhSbEtTQjdYSEpjYmx4MGRtRnlJR052YkhOd1lXNGdQU0F4TzF4eVhHNWNjbHh1WEhScFppQW9ZMjl1Wm1sbkxtbHVibVZ5TG5CeVpYWnBiM1Z6VEdWbWRFTmxiR3hQWm1aelpYUWdQVDA5SUdOdmJtWnBaeTVwYm01bGNpNXNaV1owUTJWc2JFOW1abk5sZENBbUpseHlYRzVjZEZ4MFkyOXVabWxuTG1sdWJtVnlMbkJ5WlhacGIzVnpWRzl3UTJWc2JFOW1abk5sZENBOVBUMGdZMjl1Wm1sbkxtbHVibVZ5TG5SdmNFTmxiR3hQWm1aelpYUWdKaVpjY2x4dVhIUmNkR1p2Y21ObFZYQmtZWFJsSUQwOVBTQm1ZV3h6WlNrZ2UxeHlYRzVjY2x4dVhIUmNkSEpsZEhWeWJqdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTV3Y21WMmFXOTFjMHhsWm5SRFpXeHNUMlptYzJWMElEMGdZMjl1Wm1sbkxtbHVibVZ5TG14bFpuUkRaV3hzVDJabWMyVjBPMXh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTV3Y21WMmFXOTFjMVJ2Y0VObGJHeFBabVp6WlhRZ1BTQmpiMjVtYVdjdWFXNXVaWEl1ZEc5d1EyVnNiRTltWm5ObGREdGNjbHh1WEhKY2JseDBMeThnU0dWaFpHVnlJR05sYkd3Z2RYQmtZWFJsWEhKY2JseDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MaWNnS3lCamIyNW1hV2N1YzJWc1pXTjBiM0p6TG5acGNuUjFZV3hVWVdKc1pTQXJJQ2NnZEhJdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWFHVmhaR1Z5VW05M0tTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtISnZkeXdnY205M1EyOTFiblFwSUh0Y2NseHVYSFJjZEhKdmR5NXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZDBaQzRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVvWldGa1pYSkRaV3hzS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dObGJHd3NJR05sYkd4RGIzVnVkQ2tnZTF4eVhHNWNkRngwWEhSMllYSWdZMlZzYkU5aWFpQTlJR052Ym1acFp5NW9aV0ZrWlhKelczSnZkME52ZFc1MFhWdGpiMjVtYVdjdWFXNXVaWEl1YkdWbWRFTmxiR3hQWm1aelpYUWdLeUJqWld4c1EyOTFiblJkTEZ4eVhHNWNkRngwWEhSY2RHbHpUR0Z6ZEZKdmR5QTlJR052Ym1acFp5NXBibTVsY2k1cGJtUmxlRTltUTJWc2JFdGxlVWhsWVdSbGNpQTlQVDBnY205M1EyOTFiblE3WEhKY2JseHlYRzVjZEZ4MFhIUnBaaUFvWTI5c2MzQmhiaUErSURFcElIdGNjbHh1WEhSY2RGeDBYSFJqWld4c0xuTjBlV3hsTG1ScGMzQnNZWGtnUFNBbmJtOXVaU2M3WEhKY2JseDBYSFJjZEZ4MFkyOXNjM0JoYmkwdE8xeHlYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHlYRzVjZEZ4MFhIUmNkR05sYkd4RmJHVnRaVzUwTG5Wd1pHRjBaVVJoZEdGRGIyNTBZV2x1WlhJb1kyOXVabWxuTENCalpXeHNMQ0JqWld4c1JXeGxiV1Z1ZEM1amNtVmhkR1ZJWldGa1pYSkVZWFJoS0dOdmJtWnBaeXdnWTJWc2JDd2dZMlZzYkU5aWFpd2dhWE5NWVhOMFVtOTNLU2s3WEhKY2JseHlYRzVjZEZ4MFhIUmNkR05sYkd3dWMzUjViR1V1WkdsemNHeGhlU0E5SUNkMFlXSnNaUzFqWld4c0p6dGNjbHh1WEhSY2RGeDBmVnh5WEc1Y2NseHVYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQmpaV3hzVDJKcUxtTnZiSE53WVc0Z1BUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVYSFJjZEZ4MFhIUmpaV3hzTG5KbGJXOTJaVUYwZEhKcFluVjBaU2duWTI5c2MzQmhiaWNwTzF4eVhHNWNkRngwWEhSOUlHVnNjMlVnZTF4eVhHNWNkRngwWEhSY2RIWmhjaUJqWVd4amRXeGhkR1ZrUTI5c2MzQmhiaUE5SUdOdmJtWnBaeTVwYm01bGNpNTJhWE5wWW14bFEyOXNkVzF1VG5WdFltVnlJRHc5SUdObGJHeERiM1Z1ZENBcklHTmxiR3hQWW1vdVkyOXNjM0JoYmlBL0lHTnZibVpwWnk1cGJtNWxjaTUyYVhOcFlteGxRMjlzZFcxdVRuVnRZbVZ5SUMwZ1kyVnNiRU52ZFc1MElEb2dZMlZzYkU5aWFpNWpiMnh6Y0dGdU8xeHlYRzVjY2x4dVhIUmNkRngwWEhSalpXeHNMbk5sZEVGMGRISnBZblYwWlNnblkyOXNjM0JoYmljc0lHTmhiR04xYkdGMFpXUkRiMnh6Y0dGdUtUdGNjbHh1WEhSY2RGeDBYSFJqYjJ4emNHRnVJRDBnWTJGc1kzVnNZWFJsWkVOdmJITndZVzQ3WEhKY2JseDBYSFJjZEgxY2NseHVYSFJjZEgwcE8xeHlYRzVjZEZ4MFkyOXNjM0JoYmlBOUlERTdYSEpjYmx4MGZTazdYSEpjYmx4eVhHNWNkQzh2SUVacGVHVmtJR2hsWVdSbGNpQmpaV3hzSUhWd1pHRjBaVnh5WEc1Y2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5NG5JQ3NnWTI5dVptbG5Mbk5sYkdWamRHOXljeTVtYVhobFpGUmhZbXhsSUNzZ0p5QjBjaTRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVvWldGa1pYSlNiM2NwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvY205M0xDQnliM2REYjNWdWRDa2dlMXh5WEc1Y2RGeDBjbTkzTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjNSa0xpY2dLeUJqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtaGxZV1JsY2tObGJHd3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9ZMlZzYkN3Z1kyVnNiRU52ZFc1MEtTQjdYSEpjYmx4MFhIUmNkSFpoY2lCalpXeHNUMkpxSUQwZ1kyOXVabWxuTG1acGVHVmtTR1ZoWkdWeWMxdHliM2REYjNWdWRGMWJZMlZzYkVOdmRXNTBYU3hjY2x4dVhIUmNkRngwWEhScGMweGhjM1JTYjNjZ1BTQmpiMjVtYVdjdWFXNXVaWEl1YVc1a1pYaFBaa05sYkd4TFpYbElaV0ZrWlhJZ1BUMDlJSEp2ZDBOdmRXNTBPMXh5WEc1Y2NseHVYSFJjZEZ4MFkyVnNiRVZzWlcxbGJuUXVkWEJrWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJR05sYkd3c0lHTmxiR3hGYkdWdFpXNTBMbU55WldGMFpVaGxZV1JsY2tSaGRHRW9ZMjl1Wm1sbkxDQmpaV3hzTENCalpXeHNUMkpxTENCcGMweGhjM1JTYjNjcEtUdGNjbHh1WEhSY2RIMHBPMXh5WEc1Y2RIMHBPMXh5WEc1Y2NseHVYSFF2THlCR2FXeDBaWElnY205M0lIVndaR0YwWlZ4eVhHNWNkR2xtSUNoamIyNW1hV2N1Wm1sc2RHVnlMbVZ1WVdKc1pXUXBJSHRjY2x4dVhIUmNkR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTRuSUNzZ1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1MmFYSjBkV0ZzVkdGaWJHVWdLeUFuSUhSa0xpY2dLeUJqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tObGJHd3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9ZMlZzYkN3Z1kyVnNiRU52ZFc1MEtTQjdYSEpjYmx4MFhIUmNkSFpoY2lCalpXeHNUMkpxSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJMWlhsSVpXRmtaWElvWTI5dVptbG5LVnRqYjI1bWFXY3VhVzV1WlhJdWJHVm1kRU5sYkd4UFptWnpaWFFnS3lCalpXeHNRMjkxYm5SZExGeHlYRzVjZEZ4MFhIUmNkR1pwYkhSbGNrOWlhaUE5SUdOdmJtWnBaeTVwYm01bGNpNW1hV3gwWlhKelcyTmxiR3hQWW1vdWEyVjVYU0I4ZkNCN2ZTeGNjbHh1WEhSY2RGeDBYSFJqZFhKeVpXNTBSbWxzZEdWeVFYUjBjaUE5SUdObGJHd3VaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV0YwZEhKcFluVjBaU2NwTzF4eVhHNWNjbHh1WEhSY2RGeDBhV1lnS0dObGJHeFBZbW91YTJWNUlEMDlQU0JqZFhKeVpXNTBSbWxzZEdWeVFYUjBjaWtnZTF4eVhHNWNkRngwWEhSY2RISmxkSFZ5Ymp0Y2NseHVYSFJjZEZ4MGZWeHlYRzVjY2x4dVhIUmNkRngwWTJWc2JDNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRZWFIwY21saWRYUmxKeXdnWTJWc2JFOWlhaTVyWlhrcE8xeHlYRzVjZEZ4MFhIUmpaV3hzTG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKRWFYTmhZbXhsWkN3Z1kyVnNiRTlpYWk1bWFXeDBaWEpFYVhOaFlteGxaQ2s3WEhKY2JseHlYRzVjZEZ4MFhIUmpaV3hzUld4bGJXVnVkQzUxY0dSaGRHVkVZWFJoUTI5dWRHRnBibVZ5S0dOdmJtWnBaeXdnWTJWc2JDd2dZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSbWxzZEdWeVJHRjBZU2hqYjI1bWFXY3NJR05sYkd3c0lHTmxiR3hQWW1vc0lHWnBiSFJsY2s5aWFpa3BPMXh5WEc1Y2RGeDBmU2s3WEhKY2JseHlYRzVjZEZ4MFpHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbkxpY2dLeUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMbVpwZUdWa1ZHRmliR1VnS3lBbklIUmtMaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbVpwYkhSbGNrTmxiR3dwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWTJWc2JDd2dZMlZzYkVOdmRXNTBLU0I3WEhKY2JseDBYSFJjZEhaaGNpQmpaV3hzVDJKcUlEMGdZMjl1Wm1sbkxtWnBlR1ZrU0dWaFpHVnljMXRqYjI1bWFXY3VhVzV1WlhJdWFXNWtaWGhQWmtObGJHeExaWGxJWldGa1pYSmRXMk5sYkd4RGIzVnVkRjBzWEhKY2JseDBYSFJjZEZ4MFptbHNkR1Z5VDJKcUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG1acGJIUmxjbk5iWTJWc2JFOWlhaTVyWlhsZElIeDhJSHQ5TEZ4eVhHNWNkRngwWEhSY2RHTjFjbkpsYm5SR2FXeDBaWEpCZEhSeUlEMGdZMlZzYkM1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFlYUjBjbWxpZFhSbEp5azdYSEpjYmx4eVhHNWNkRngwWEhScFppQW9ZMlZzYkU5aWFpNXJaWGtnUFQwOUlHTjFjbkpsYm5SR2FXeDBaWEpCZEhSeUtTQjdYSEpjYmx4MFhIUmNkRngwY21WMGRYSnVPMXh5WEc1Y2RGeDBYSFI5WEhKY2JseHlYRzVjZEZ4MFhIUmpaV3hzTG5ObGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxaGRIUnlhV0oxZEdVbkxDQmpaV3hzVDJKcUxtdGxlU2s3WEhKY2JseDBYSFJjZEdObGJHd3VZMnhoYzNOTWFYTjBMblJ2WjJkc1pTaGpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1acGJIUmxja1JwYzJGaWJHVmtMQ0JqWld4c1QySnFMbVpwYkhSbGNrUnBjMkZpYkdWa0tUdGNjbHh1WEhKY2JseDBYSFJjZEdObGJHeEZiR1Z0Wlc1MExuVndaR0YwWlVSaGRHRkRiMjUwWVdsdVpYSW9ZMjl1Wm1sbkxDQmpaV3hzTENCalpXeHNSV3hsYldWdWRDNWpjbVZoZEdWR2FXeDBaWEpFWVhSaEtHTnZibVpwWnl3Z1kyVnNiQ3dnWTJWc2JFOWlhaXdnWm1sc2RHVnlUMkpxS1NrN1hISmNibHgwWEhSOUtUdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RDOHZJRU5sYkd3Z1pHRjBZU0J5YjNjZ2RYQmtZWFJsWEhKY2JseDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MaWNnS3lCamIyNW1hV2N1YzJWc1pXTjBiM0p6TG5acGNuUjFZV3hVWVdKc1pTQXJJQ2NnZEhJdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVpHRjBZVkp2ZHlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloeWIzY3NJSEp2ZDA1MWJXSmxjaWtnZTF4eVhHNWNkRngwY205M0xuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0ozUmtMaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbVJoZEdGRFpXeHNLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR05sYkd3c0lHTmxiR3hPZFcxaVpYSXBJSHRjY2x4dVhIUmNkRngwZG1GeUlHTmxiR3hFWVhSaElEMGdkR0ZpYkdWVmRHbHNMbWRsZEVObGJHeEVZWFJoS0dOdmJtWnBaeXdnWTI5dVptbG5MbWx1Ym1WeUxuUnZjRU5sYkd4UFptWnpaWFFnS3lCeWIzZE9kVzFpWlhJc0lHTnZibVpwWnk1cGJtNWxjaTVzWldaMFEyVnNiRTltWm5ObGRDQXJJR05sYkd4T2RXMWlaWElwTzF4eVhHNWNjbHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1ZFhCa1lYUmxRMlZzYkNoamIyNW1hV2NzSUdObGJHd3NJR05sYkd4RVlYUmhLVHRjY2x4dVhIUmNkSDBwTzF4eVhHNWNkSDBwTzF4eVhHNWNjbHh1WEhRdkx5QkdhWGhsWkNCalpXeHNJR1JoZEdFZ2NtOTNJSFZ3WkdGMFpWeHlYRzVjZEdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk0bklDc2dZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NW1hWGhsWkZSaFlteGxJQ3NnSnlCMGNpNG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NWtZWFJoVW05M0tTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtISnZkeXdnY205M1RuVnRZbVZ5S1NCN1hISmNibHgwWEhSeWIzY3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25kR1F1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WkdGMFlVTmxiR3dwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWTJWc2JDd2dZMlZzYkU1MWJXSmxjaWtnZTF4eVhHNWNkRngwWEhSMllYSWdabWw0WldSRFpXeHNSR0YwWVNBOUlIUmhZbXhsVlhScGJDNW5aWFJHYVhobFpFTmxiR3hFWVhSaEtHTnZibVpwWnl3Z1kyOXVabWxuTG1sdWJtVnlMblJ2Y0VObGJHeFBabVp6WlhRZ0t5QnliM2RPZFcxaVpYSXNJR05sYkd4T2RXMWlaWElwTzF4eVhHNWNjbHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1ZFhCa1lYUmxRMlZzYkNoamIyNW1hV2NzSUdObGJHd3NJR1pwZUdWa1EyVnNiRVJoZEdFcE8xeHlYRzVjZEZ4MGZTazdYSEpjYmx4MGZTazdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVUoxWm1abGNuTW9ZMjl1Wm1sbktTQjdYSEpjYmx4MGRtRnlJSFpwY25SMVlXeERiMjUwWVdsdVpYSWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VKeUFySUdOdmJtWnBaeTV6Wld4bFkzUnZjbk11ZG1seWRIVmhiRU52Ym5SaGFXNWxjaWtzWEhKY2JseDBYSFJqWld4c1JuVnNiRmRwWkhSb0lEMGdZMjl1Wm1sblZYUnBiQzVuWlhSRFpXeHNSblZzYkZkcFpIUm9LR052Ym1acFp5a3NYSEpjYmx4MFhIUnNaV1owSUQwZ2RtbHlkSFZoYkVOdmJuUmhhVzVsY2k1elkzSnZiR3hNWldaMElDMGdkbWx5ZEhWaGJFTnZiblJoYVc1bGNpNXpZM0p2Ykd4TVpXWjBJQ1VnWTJWc2JFWjFiR3hYYVdSMGFDQXRJR052Ym1acFp5NXBibTVsY2k1amIyeHpjR0Z1VDJabWMyVjBJQ29nWTJWc2JFWjFiR3hYYVdSMGFDeGNjbHh1WEhSY2RISnBaMmgwSUQwZ1kyOXVabWxuTG1sdWJtVnlMblJoWW14bFQyWm1jMlYwVjJsa2RHZ2dMU0JzWldaMExGeHlYRzVjZEZ4MGRHOXdJRDBnZG1seWRIVmhiRU52Ym5SaGFXNWxjaTV6WTNKdmJHeFViM0FzWEhKY2JseDBYSFJpYjNSMGIyMGdQU0JqYjI1bWFXY3VhVzV1WlhJdWRHRmliR1ZQWm1aelpYUklaV2xuYUhRZ0xTQjBiM0E3WEhKY2JseHlYRzVjZEd4bFpuUWdQU0JzWldaMElENGdZMjl1Wm1sbkxtbHVibVZ5TG5SaFlteGxUMlptYzJWMFYybGtkR2dnUHlCamIyNW1hV2N1YVc1dVpYSXVkR0ZpYkdWUFptWnpaWFJYYVdSMGFDQTZJR3hsWm5RN1hISmNibHgwYkdWbWRDQTlJR3hsWm5RZ1BDQmpiMjVtYVdjdWFXNXVaWEl1YldsdVFuVm1abVZ5VjJsa2RHZ2dQeUJqYjI1bWFXY3VhVzV1WlhJdWJXbHVRblZtWm1WeVYybGtkR2dnT2lCc1pXWjBPMXh5WEc1Y2RISnBaMmgwSUQwZ1kyOXVabWxuTG1sdWJtVnlMblJoWW14bFQyWm1jMlYwVjJsa2RHZ2dMU0JzWldaME8xeHlYRzVjZEhSdmNDQTlJSFJ2Y0NBcklHTnZibVpwWnk1cGJtNWxjaTV0YVc1Q2RXWm1aWEpJWldsbmFIUWdQaUJqYjI1bWFXY3VhVzV1WlhJdWRHRmliR1ZQWm1aelpYUklaV2xuYUhRZ1B5QmpiMjVtYVdjdWFXNXVaWEl1ZEdGaWJHVlBabVp6WlhSSVpXbG5hSFFnTFNCamIyNW1hV2N1YVc1dVpYSXViV2x1UW5WbVptVnlTR1ZwWjJoMElEb2dkRzl3SUNzZ1kyOXVabWxuTG1sdWJtVnlMbTFwYmtKMVptWmxja2hsYVdkb2REdGNjbHh1WEhSaWIzUjBiMjBnUFNCamIyNW1hV2N1YVc1dVpYSXVkR0ZpYkdWUFptWnpaWFJJWldsbmFIUWdQaUIwYjNBZ1B5QmpiMjVtYVdjdWFXNXVaWEl1ZEdGaWJHVlBabVp6WlhSSVpXbG5hSFFnTFNCMGIzQWdPaUJqYjI1bWFXY3VhVzV1WlhJdWJXbHVRblZtWm1WeVNHVnBaMmgwTzF4eVhHNWNjbHh1WEhSamIyNW1hV2N1YVc1dVpYSXViR1ZtZEVObGJHeFBabVp6WlhRZ1BTQk5ZWFJvTG1ac2IyOXlLR3hsWm5RZ0x5QmpaV3hzUm5Wc2JGZHBaSFJvS1R0Y2NseHVYSFJqYjI1bWFXY3VhVzV1WlhJdWRHOXdRMlZzYkU5bVpuTmxkQ0E5SUUxaGRHZ3VabXh2YjNJb0tIUnZjQ0F0SUhSdmNDQWxJR052Ym1acFp5NWthVzFsYm5OcGIyNXpMbU5sYkd4SVpXbG5hSFFwSUM4Z1kyOXVabWxuTG1ScGJXVnVjMmx2Ym5NdVkyVnNiRWhsYVdkb2RDazdYSEpjYmx4eVhHNWNkR052Ym1acFp5NXBibTVsY2k1aWRXWm1aWEpNWldaMExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXd3BJSHRjY2x4dVhIUmNkR1ZzTG5OMGVXeGxMbTFwYmxkcFpIUm9JRDBnYkdWbWRDQXJJQ2R3ZUNjN1hISmNibHgwZlNrN1hISmNibHgwWTI5dVptbG5MbWx1Ym1WeUxtSjFabVpsY2xKcFoyaDBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aV3dwSUh0Y2NseHVYSFJjZEdWc0xuTjBlV3hsTG0xcGJsZHBaSFJvSUQwZ2NtbG5hSFFnS3lBbmNIZ25PMXh5WEc1Y2RIMHBPMXh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVpZFdabVpYSlViM0F1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYkNrZ2UxeHlYRzVjZEZ4MFpXd3VjM1I1YkdVdWFHVnBaMmgwSUQwZ2RHOXdJQ3NnSjNCNEp6dGNjbHh1WEhSOUtUdGNjbHh1WEhSamIyNW1hV2N1YVc1dVpYSXVZblZtWm1WeVFtOTBkRzl0TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWld3cElIdGNjbHh1WEhSY2RHVnNMbk4wZVd4bExtaGxhV2RvZENBOUlHSnZkSFJ2YlNBcklDZHdlQ2M3WEhKY2JseDBmU2s3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlISmxZMkZzWTNWc1lYUmxSR2x0Wlc1emFXOXVjeWhqYjI1bWFXY3BJSHRjY2x4dVhIUjJZWElnYzIxaGJHeGxjbFJoWW14bElEMGdZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVXViR1Z1WjNSb0lEd2dZMjl1Wm1sbkxtbHVibVZ5TG5acGMybGliR1ZTYjNkT2RXMWlaWElzWEhKY2JseDBYSFIyYVhKMGRXRnNRMjl1ZEdGcGJtVnlJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MaWNnS3lCamIyNW1hV2N1YzJWc1pXTjBiM0p6TG5acGNuUjFZV3hEYjI1MFlXbHVaWElwTzF4eVhHNWNjbHh1WEhSMmFYSjBkV0ZzUTI5dWRHRnBibVZ5TG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvSjI1dkxYWmxjblJwWTJGc0xYTmpjbTlzYkNjc0lITnRZV3hzWlhKVVlXSnNaU2s3WEhKY2JseHlYRzVjZEdsbUlDaHpiV0ZzYkdWeVZHRmliR1VwSUh0Y2NseHVYSFJjZEhacGNuUjFZV3hEYjI1MFlXbHVaWEl1YzJOeWIyeHNWRzl3SUQwZ01EdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTUwWVdKc1pVOW1abk5sZEZkcFpIUm9JRDBnWTI5dVptbG5WWFJwYkM1blpYUlVZV0pzWlU5bVpuTmxkRmRwWkhSb0tHTnZibVpwWnlrN1hISmNibHgwWTI5dVptbG5MbWx1Ym1WeUxuUmhZbXhsVDJabWMyVjBTR1ZwWjJoMElEMGdZMjl1Wm1sblZYUnBiQzVuWlhSVVlXSnNaVTltWm5ObGRFaGxhV2RvZENoamIyNW1hV2NwTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnlaWE5sZEVWa2FYUnBibWREWld4c0tHTnZibVpwWnl3Z1pYWmxiblJJWVc1a2JHVnljeWtnZTF4eVhHNWNkR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTRuSUNzZ1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1MmFYSjBkV0ZzVkdGaWJHVWdLeUFuSUhSa0xpY2dLeUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMbVZrYVhScGJtZERaV3hzS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dWa2FYUnBibWREWld4c0tTQjdYSEpjYmx4MFhIUjJZWElnYVc1d2RYUWdQU0JsWkdsMGFXNW5RMlZzYkM1eGRXVnllVk5sYkdWamRHOXlLQ2RwYm5CMWRDY3BPMXh5WEc1Y2NseHVYSFJjZEdsdWNIVjBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjJKc2RYSW5MQ0JsZG1WdWRFaGhibVJzWlhKekxtOXVTVzV3ZFhSQ2JIVnlSWFpsYm5SSVlXNWtiR1Z5S1R0Y2NseHVYSFJjZEdsdWNIVjBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjJ0bGVYVndKeXdnWlhabGJuUklZVzVrYkdWeWN5NXZia2x1Y0hWMFMyVjVWWEJGZG1WdWRFaGhibVJzWlhJcE8xeHlYRzVjY2x4dVhIUmNkR05sYkd4RmJHVnRaVzUwTG5Wd1pHRjBaVVJoZEdGRGIyNTBZV2x1WlhJb1kyOXVabWxuTENCbFpHbDBhVzVuUTJWc2JDd2dhVzV3ZFhRdWRtRnNkV1VwTzF4eVhHNWNjbHh1WEhSY2RHVmthWFJwYm1kRFpXeHNMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9ZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NWxaR2wwYVc1blEyVnNiQ2s3WEhKY2JseDBmU2s3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlISmxjMlYwUldScGRHVmtRMlZzYkhNb1kyOXVabWxuS1NCN1hISmNibHgwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxuWnBjblIxWVd4VVlXSnNaU0FySUNjZ2RHUXVKeUFySUdOdmJtWnBaeTV6Wld4bFkzUnZjbk11WldScGRHbHVaME5sYkd3cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXUnBkR1ZrUTJWc2JDa2dlMXh5WEc1Y2RGeDBaV1JwZEdWa1EyVnNiQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLR052Ym1acFp5NXpaV3hsWTNSdmNuTXVaV1JwZEdWa1EyVnNiQ2s3WEhKY2JseDBmU2s3WEhKY2JseHlYRzVjZEhWd1pHRjBaVlJoWW14bEtHTnZibVpwWnlrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR1JsYzNSeWIzbFVZV0pzWlNoamIyNW1hV2NwSUh0Y2NseHVYSFJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHTnZibVpwWnk1elpXeGxZM1J2Y25NdWJXRnBia052Ym5SaGFXNWxjaWt1YVc1dVpYSklWRTFNSUQwZ0p5YzdYSEpjYm4xY2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4eVhHNWNkSFZ3WkdGMFpWUmhZbXhsT2lCMWNHUmhkR1ZVWVdKc1pTeGNjbHh1WEhSMWNHUmhkR1ZDZFdabVpYSnpPaUIxY0dSaGRHVkNkV1ptWlhKekxGeHlYRzVjZEhKbFkyRnNZM1ZzWVhSbFJHbHRaVzV6YVc5dWN6b2djbVZqWVd4amRXeGhkR1ZFYVcxbGJuTnBiMjV6TEZ4eVhHNWNkSEpsYzJWMFJXUnBkR2x1WjBObGJHdzZJSEpsYzJWMFJXUnBkR2x1WjBObGJHd3NYSEpjYmx4MGNtVnpaWFJGWkdsMFpXUkRaV3hzY3pvZ2NtVnpaWFJGWkdsMFpXUkRaV3hzY3l4Y2NseHVYSFJrWlhOMGNtOTVWR0ZpYkdVNklHUmxjM1J5YjNsVVlXSnNaVnh5WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2NseHVYSEpjYm5aaGNpQkNaV1p2Y21WRlpHbDBRWEpuY3lBOUlISmxjWFZwY21Vb0p5NHVMMjF2WkdWc2N5OWxkbVZ1ZEMxaGNtZDFiV1Z1ZEhNdlltVm1iM0psTFdWa2FYUW5LU3hjY2x4dVhIUkNaV1p2Y21WVFlYWmxRWEpuY3lBOUlISmxjWFZwY21Vb0p5NHVMMjF2WkdWc2N5OWxkbVZ1ZEMxaGNtZDFiV1Z1ZEhNdlltVm1iM0psTFhOaGRtVW5LU3hjY2x4dVhIUldZV3hwWkdGMGFXOXVRWEpuY3lBOUlISmxjWFZwY21Vb0p5NHVMMjF2WkdWc2N5OWxkbVZ1ZEMxaGNtZDFiV1Z1ZEhNdmRtRnNhV1JoZEdsdmJpY3BMRnh5WEc1Y2RGTmhkbVZTYjNkQmNtZHpJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpNHZiVzlrWld4ekwyVjJaVzUwTFdGeVozVnRaVzUwY3k5ellYWmxMWEp2ZHljcExGeHlYRzVjZEZOaGRtVkNZWFJqYUVGeVozTWdJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtaV3h6TDJWMlpXNTBMV0Z5WjNWdFpXNTBjeTl6WVhabExXSmhkR05vSnlrc1hISmNibHgwUVdaMFpYSkZaR2wwUVhKbmN5QWdQU0J5WlhGMWFYSmxLQ2N1TGk5dGIyUmxiSE12WlhabGJuUXRZWEpuZFcxbGJuUnpMMkZtZEdWeUxXVmthWFFuS1N4Y2NseHVYSFJCWm5SbGNsTmhkbVZCY21keklDQTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpHVnNjeTlsZG1WdWRDMWhjbWQxYldWdWRITXZZV1owWlhJdGMyRjJaU2NwTEZ4eVhHNWNkR05sYkd4RmJHVnRaVzUwSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Wld4bGJXVnVkSE12WTJWc2JDY3BMRnh5WEc1Y2RIUmhZbXhsVlhScGJDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdmRHRmliR1VuS1N4Y2NseHVYSFJrYjIxVmRHbHNJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR1TDNWMGFXeHpMMlJ2YlNjcExGeHlYRzVjZEdSdmJVMXZaSFZzWlNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5a2IyMG5LU3hjY2x4dVhIUm1hV3gwWlhKTmIyUjFiR1VnSUNBOUlISmxjWFZwY21Vb0p5NHVMMjF2WkhWc1pYTXZabWxzZEdWeUp5azdYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnpkR0Z5ZEVWa2FYUnBibWREWld4c0tHTnZibVpwWnl3Z1kyVnNiRTV2WkdVc0lHbHVjM1JoYm1ObGN5d2daWFpsYm5SSVlXNWtiR1Z5Y3lrZ2UxeHlYRzVjZEdsbUlDZ2hZMjl1Wm1sbkxtVmthWFF1Wlc1aFlteGxaQ2tnZTF4eVhHNWNkRngwY21WMGRYSnVPMXh5WEc1Y2RIMWNjbHh1WEhKY2JseDBkbUZ5SUhKdmQwNTFiV0psY2lBOUlHUnZiVlYwYVd3dVoyVjBVbTkzVG5WdFltVnlLR052Ym1acFp5d2dZMlZzYkU1dlpHVXBMRnh5WEc1Y2RGeDBZMjlzZFcxdVRuVnRZbVZ5SUQwZ1pHOXRWWFJwYkM1blpYUkRiMngxYlc1T2RXMWlaWElvWTI5dVptbG5MQ0JqWld4c1RtOWtaU2s3WEhKY2JseHlYRzVjZEdsbUlDaHliM2RPZFcxaVpYSWdQajBnWTI5dVptbG5MbVJoZEdGVGIzVnlZMlV1YkdWdVozUm9LU0I3WEhKY2JseDBYSFJ5WlhSMWNtNDdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUjJZWElnWTJWc2JFUmhkR0VnUFNCMFlXSnNaVlYwYVd3dVoyVjBRMlZzYkVSaGRHRW9ZMjl1Wm1sbkxDQnliM2RPZFcxaVpYSXNJR052YkhWdGJrNTFiV0psY2lrc1hISmNibHgwWEhScGJuQjFkRVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHBibkIxZENjcE8xeHlYRzVjY2x4dVhIUjJZWElnWW1WbWIzSmxSV1JwZEVGeVozTWdQU0J1WlhjZ1FtVm1iM0psUldScGRFRnlaM01vZTF4eVhHNWNkRngwWTJWc2JFNXZaR1U2SUdObGJHeE9iMlJsTEZ4eVhHNWNkRngwWTJWc2JFUmhkR0U2SUdObGJHeEVZWFJoTEZ4eVhHNWNkRngwWTJGdVkyVnNSWFpsYm5RNklHWmhiSE5sWEhKY2JseDBmU2s3WEhKY2JseHlYRzVjZEdOdmJtWnBaeTVsZG1WdWRFaGhibVJzWlhKekxtOXVRbVZtYjNKbFJXUnBkQ2hpWldadmNtVkZaR2wwUVhKbmN5azdYSEpjYmx4eVhHNWNkR2xtSUNnaFltVm1iM0psUldScGRFRnlaM011WTJGdVkyVnNSWFpsYm5RcElIdGNjbHh1WEhSY2RHTmxiR3hPYjJSbExtTnNZWE56VEdsemRDNWhaR1FvWTI5dVptbG5Mbk5sYkdWamRHOXljeTVsWkdsMGFXNW5RMlZzYkNrN1hISmNibHgwWEhSalpXeHNUbTlrWlM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0dOdmJtWnBaeTV6Wld4bFkzUnZjbk11WldScGRHVmtRMlZzYkNrN1hISmNibHh5WEc1Y2RGeDBZMlZzYkVWc1pXMWxiblF1ZFhCa1lYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUdObGJHeE9iMlJsTENCcGJuQjFkRVZzWlcxbGJuUXBPMXh5WEc1Y2NseHVYSFJjZEdsdWMzUmhibU5sY3k1dmJrbHVjSFYwUW14MWNrVjJaVzUwU0dGdVpHeGxjaUE5SUdaMWJtTjBhVzl1S0dWMktTQjdJR1YyWlc1MFNHRnVaR3hsY25NdWIyNUpibkIxZEVKc2RYSkZkbVZ1ZEVoaGJtUnNaWElvWlhZc0lHTnZibVpwWnlrN0lIMDdYSEpjYmx4MFhIUnBibk4wWVc1alpYTXViMjVKYm5CMWRFdGxlVlZ3UlhabGJuUklZVzVrYkdWeUlEMGdablZ1WTNScGIyNG9aWFlwSUhzZ1pYWmxiblJJWVc1a2JHVnljeTV2YmtsdWNIVjBTMlY1VlhCRmRtVnVkRWhoYm1Sc1pYSW9aWFlzSUdOdmJtWnBaeWs3SUgwN1hISmNibHh5WEc1Y2RGeDBhVzV3ZFhSRmJHVnRaVzUwTG1adlkzVnpLQ2s3WEhKY2JseDBYSFJwYm5CMWRFVnNaVzFsYm5RdWRtRnNkV1VnUFNCalpXeHNSR0YwWVM1blpYUldZV3gxWlNncE8xeHlYRzVjZEZ4MGFXNXdkWFJGYkdWdFpXNTBMbk4wZVd4bExtMXBibGRwWkhSb0lEMGdKekV3Y0hnbk95QXZMeUJVVDBSUE9pQkxhWE42WlhKMlpYcHVhU0J2YzNwMHc2RnNlV0poWEhKY2JseDBYSFJwYm5CMWRFVnNaVzFsYm5RdWMzUjViR1V1ZDJsa2RHZ2dQU0FuT0RBbEp6c2dMeThnVkU5RVR6b2dTMmx6ZW1WeWRtVjZibWtnYjNONmRNT2hiSGxpWVZ4eVhHNWNkRngwYVc1d2RYUkZiR1Z0Wlc1MExuTmxkRUYwZEhKcFluVjBaU2duZEhsd1pTY3NJR05sYkd4RVlYUmhMbVJoZEdGVWVYQmxLVHRjY2x4dVhIUmNkR2x1Y0hWMFJXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaWJIVnlKeXdnYVc1emRHRnVZMlZ6TG05dVNXNXdkWFJDYkhWeVJYWmxiblJJWVc1a2JHVnlLVHRjY2x4dVhIUmNkR2x1Y0hWMFJXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbDFjQ2NzSUdsdWMzUmhibU5sY3k1dmJrbHVjSFYwUzJWNVZYQkZkbVZ1ZEVoaGJtUnNaWElwTzF4eVhHNWNkSDFjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z1ptbHVhWE5vUldScGRHbHVaME5sYkd3b1kyOXVabWxuTENCcGJuQjFkRVZzWlcxbGJuUXNJR1YyWlc1MFNHRnVaR3hsY25NcElIdGNjbHh1WEhSMllYSWdZMlZzYkU1dlpHVWdQU0JwYm5CMWRFVnNaVzFsYm5RdWNHRnlaVzUwVG05a1pTNXdZWEpsYm5ST2IyUmxMRnh5WEc1Y2RGeDBjbTkzVG5WdFltVnlJRDBnWkc5dFZYUnBiQzVuWlhSU2IzZE9kVzFpWlhJb1kyOXVabWxuTENCalpXeHNUbTlrWlNrc1hISmNibHgwWEhSamIyeDFiVzVPZFcxaVpYSWdQU0JrYjIxVmRHbHNMbWRsZEVOdmJIVnRiazUxYldKbGNpaGpiMjVtYVdjc0lHTmxiR3hPYjJSbEtTeGNjbHh1WEhSY2RHTmxiR3hFWVhSaElEMGdkR0ZpYkdWVmRHbHNMbWRsZEVObGJHeEVZWFJoS0dOdmJtWnBaeXdnY205M1RuVnRZbVZ5TENCamIyeDFiVzVPZFcxaVpYSXBMRnh5WEc1Y2RGeDBkWEJrWVhSbFpGWmhiSFZsSUQwZ2FXNXdkWFJGYkdWdFpXNTBMblpoYkhWbE8xeHlYRzVjY2x4dVhIUmpaV3hzUkdGMFlTNTFjR1JoZEdWQmRIUnlhV0oxZEdWektIc2dZMnhoYzNNNklHTnZibVpwWnk1elpXeGxZM1J2Y25NdVpXUnBkR1ZrUTJWc2JDQjlLVHRjY2x4dVhIUmpaV3hzUkdGMFlTNTFjR1JoZEdWV1lXeDFaU2gxY0dSaGRHVmtWbUZzZFdVcE8xeHlYRzVjY2x4dVhIUnBaaUFvSVdObGJHeEVZWFJoTG1selEyVnNiRU5vWVc1blpXUW9LU2tnZTF4eVhHNWNkRngwWkc5dFRXOWtkV3hsTG5KbGMyVjBSV1JwZEdsdVowTmxiR3dvWTI5dVptbG5MQ0JsZG1WdWRFaGhibVJzWlhKektUdGNjbHh1WEhKY2JseDBYSFJ5WlhSMWNtNDdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUjJZWElnZG1Gc2FXUmhkR2x2YmtGeVozTWdQU0J1WlhjZ1ZtRnNhV1JoZEdsdmJrRnlaM01vZTF4eVhHNWNkRngwWTJWc2JFNXZaR1U2SUdObGJHeE9iMlJsTEZ4eVhHNWNkRngwWTJWc2JFUmhkR0U2SUdObGJHeEVZWFJoTEZ4eVhHNWNkRngwWTJGdVkyVnNSWFpsYm5RNklHWmhiSE5sWEhKY2JseDBmU2s3WEhKY2JseHlYRzVjZEdOdmJtWnBaeTVsZG1WdWRFaGhibVJzWlhKekxtOXVWbUZzYVdSaGRHbHZiaWgyWVd4cFpHRjBhVzl1UVhKbmN5azdYSEpjYmx4eVhHNWNkR2xtSUNoMllXeHBaR0YwYVc5dVFYSm5jeTVqWVc1alpXeEZaR2wwSUNFOVBTQjBjblZsS1NCN1hISmNibHgwWEhSMFlXSnNaVlYwYVd3dWMzUnZjbVZWY0dSaGRHVmtRMlZzYkZaaGJIVmxLR052Ym1acFp5d2dZMlZzYkVSaGRHRXBPMXh5WEc1Y2RGeDBZMlZzYkVWc1pXMWxiblF1ZFhCa1lYUmxRMlZzYkNoamIyNW1hV2NzSUdObGJHeE9iMlJsTENCalpXeHNSR0YwWVNrN1hISmNibHh5WEc1Y2RGeDBkbUZ5SUdGbWRHVnlSV1JwZEVGeVozTWdQU0J1WlhjZ1FXWjBaWEpGWkdsMFFYSm5jeWg3WEhKY2JseDBYSFJjZEdObGJHeE9iMlJsT2lCalpXeHNUbTlrWlN4Y2NseHVYSFJjZEZ4MFkyVnNiRVJoZEdFNklHTmxiR3hFWVhSaFhISmNibHgwWEhSOUtUdGNjbHh1WEhKY2JseDBYSFJqYjI1bWFXY3VaWFpsYm5SSVlXNWtiR1Z5Y3k1dmJrRm1kR1Z5UldScGRDaGhablJsY2tWa2FYUkJjbWR6S1R0Y2NseHVYSEpjYmx4MFhIUm1hV3gwWlhKTmIyUjFiR1V1Wm1sc2RHVnlLR052Ym1acFp5azdYSEpjYmx4MGZWeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJqWVc1alpXeEZaR2wwYVc1blEyVnNiQ2hqYjI1bWFXY3BJSHRjY2x4dVhIUnlaWFIxY200Z0p5YzdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUhOaGRtVkRaV3hzY3loamIyNW1hV2NwSUh0Y2NseHVYSFJwWmlBb0lXTnZibVpwWnk1bFpHbDBMbVZ1WVdKc1pXUXBJSHRjY2x4dVhIUmNkSEpsZEhWeWJqdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RIWmhjaUJpWldadmNtVlRZWFpsUVhKbmN5QTlJRzVsZHlCQ1pXWnZjbVZUWVhabFFYSm5jeWg3WEhKY2JseDBYSFJsWkdsMFpXUlNiM2R6T2lCamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6TEZ4eVhHNWNkRngwWTJGdVkyVnNSWFpsYm5RNklHWmhiSE5sWEhKY2JseDBmU2s3WEhKY2JseHlYRzVjZEdOdmJtWnBaeTVsZG1WdWRFaGhibVJzWlhKekxtOXVRbVZtYjNKbFUyRjJaU2hpWldadmNtVlRZWFpsUVhKbmN5azdYSEpjYmx4eVhHNWNkR2xtSUNoaVpXWnZjbVZUWVhabFFYSm5jeTVqWVc1alpXeEZkbVZ1ZENrZ2UxeHlYRzVjZEZ4MGNtVjBkWEp1TzF4eVhHNWNkSDFjY2x4dVhISmNibHgwYVdZZ0tHTnZibVpwWnk1bFpHbDBMbTF2WkdVZ1BUMDlJQ2R5YjNjbktTQjdJQzh2SUZKdmR5QnRiMlJsWEhKY2JseDBYSFIyWVhJZ2MyRjJaVkp2ZDBGeVozTWdQU0J1WlhjZ1UyRjJaVkp2ZDBGeVozTW9leUJqWVc1alpXeEZkbVZ1ZERvZ1ptRnNjMlVnZlNrN1hISmNibHh5WEc1Y2RGeDBZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVXVabTl5UldGamFDaG1kVzVqZEdsdmJpaHliM2NwSUh0Y2NseHVYSFJjZEZ4MGMyRjJaVkp2ZDBGeVozTWdQU0J1WlhjZ1UyRjJaVkp2ZDBGeVozTW9lMXh5WEc1Y2RGeDBYSFJjZEdWa2FYUmxaRkp2ZHpvZ1kyOXVabWxuTG1sdWJtVnlMbVZrYVhSbFpGWmhiSFZsY3l4Y2NseHVYSFJjZEZ4MFhIUmpZVzVqWld4RmRtVnVkRG9nWm1Gc2MyVmNjbHh1WEhSY2RGeDBmU2s3WEhKY2JseHlYRzVjZEZ4MFhIUnBaaUFvSVhOaGRtVlNiM2RCY21kekxtTmhibU5sYkVWMlpXNTBLU0I3WEhKY2JseDBYSFJjZEZ4MFkyOXVabWxuTG1WMlpXNTBTR0Z1Wkd4bGNuTXViMjVUWVhacGJtZFNiM2NvYzJGMlpWSnZkMEZ5WjNNcE8xeHlYRzVjZEZ4MFhIUjlYSEpjYmx4eVhHNWNkRngwWEhScFppQW9JWE5oZG1WU2IzZEJjbWR6TG1OaGJtTmxiRVYyWlc1MEtTQjdYSEpjYmx4MFhIUmNkRngwZEdGaWJHVlZkR2xzTG5CbGNuTnBjM1JTYjNkV1lXeDFaWE1vWTI5dVptbG5MQ0J5YjNjcE8xeHlYRzVjZEZ4MFhIUjlYSEpjYmx4MFhIUjlLVHRjY2x4dVhISmNibHgwWEhScFppQW9JWE5oZG1WU2IzZEJjbWR6TG1OaGJtTmxiRVYyWlc1MEtTQjdYSEpjYmx4MFhIUmNkSEpsZEhWeWJqdGNjbHh1WEhSY2RIMWNjbHh1WEhSOUlHVnNjMlVnYVdZZ0tHTnZibVpwWnk1bFpHbDBMbTF2WkdVZ1BUMDlJQ2RpWVhSamFDY3BJSHNnTHk4Z1FtRjBZMmdnYlc5a1pWeHlYRzVjZEZ4MGRtRnlJSE5oZG1WQ1lYUmphRUZ5WjNNZ1BTQnVaWGNnVTJGMlpVSmhkR05vUVhKbmN5aDdYSEpjYmx4MFhIUmNkR1ZrYVhSbFpGSnZkM002SUdOdmJtWnBaeTVwYm01bGNpNWxaR2wwWldSV1lXeDFaWE1zWEhKY2JseDBYSFJjZEdOaGJtTmxiRVYyWlc1ME9pQm1ZV3h6WlZ4eVhHNWNkRngwZlNrN1hISmNibHh5WEc1Y2RGeDBZMjl1Wm1sbkxtVjJaVzUwU0dGdVpHeGxjbk11YjI1VFlYWnBibWRDWVhSamFDaHpZWFpsUW1GMFkyaEJjbWR6S1R0Y2NseHVYSEpjYmx4MFhIUnBaaUFvYzJGMlpVSmhkR05vUVhKbmN5NWpZVzVqWld4RmRtVnVkQ2tnZTF4eVhHNWNkRngwWEhSeVpYUjFjbTQ3WEhKY2JseDBYSFI5WEhKY2JseHlYRzVjZEZ4MGRHRmliR1ZWZEdsc0xuQmxjbk5wYzNSQ1lYUmphRlpoYkhWbGN5aGpiMjVtYVdjcE8xeHlYRzVjZEgxY2NseHVYSEpjYmx4MGRtRnlJR0ZtZEdWeVUyRjJaVUZ5WjNNZ1BTQnVaWGNnUVdaMFpYSlRZWFpsUVhKbmN5aDdYSEpjYmx4MFhIUnpZWFpsWkZKdmQzTTZJR052Ym1acFp5NXBibTVsY2k1bFpHbDBaV1JXWVd4MVpYTmNjbHh1WEhSOUtUdGNjbHh1WEhKY2JseDBaRzl0VFc5a2RXeGxMbkpsYzJWMFJXUnBkR1ZrUTJWc2JITW9ZMjl1Wm1sbktUdGNjbHh1WEhKY2JseDBZMjl1Wm1sbkxtVjJaVzUwU0dGdVpHeGxjbk11YjI1QlpuUmxjbE5oZG1Vb1lXWjBaWEpUWVhabFFYSm5jeWs3WEhKY2JuMWNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHlYRzVjZEhOMFlYSjBSV1JwZEdsdVowTmxiR3c2SUhOMFlYSjBSV1JwZEdsdVowTmxiR3dzWEhKY2JseDBabWx1YVhOb1JXUnBkR2x1WjBObGJHdzZJR1pwYm1semFFVmthWFJwYm1kRFpXeHNMRnh5WEc1Y2RHTmhibU5sYkVWa2FYUnBibWREWld4c09pQmpZVzVqWld4RlpHbDBhVzVuUTJWc2JDeGNjbHh1WEhSellYWmxRMlZzYkhNNklITmhkbVZEWld4c2MxeHlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dVhISmNiblpoY2lCa2IyMVZkR2xzSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE12Wkc5dEp5a3NYSEpjYmx4MGEyVjVZbTloY21SVmRHbHNJQ0E5SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDJ0bGVXSnZZWEprSnlrc1hISmNibHgwYzI5eWRFMXZaSFZzWlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12YzI5eWRDY3BMRnh5WEc1Y2RHVmthWFJOYjJSMWJHVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyVmthWFFuS1N4Y2NseHVYSFJrYjIxTmIyUjFiR1VnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTlrYjIwbktTeGNjbHh1WEhSbWFXeDBaWEpOYjJSMWJHVWdJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5bWFXeDBaWEluS1N4Y2NseHVYSFJ5WlhOcGVtVk5iMlIxYkdVZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTl5WlhOcGVtVW5LU3hjY2x4dVhIUjBiMjlzZEdsd1RXOWtkV3hsSUQwZ2NtVnhkV2x5WlNnbkxpNHZiVzlrZFd4bGN5OTBiMjlzZEdsd0p5azdYSEpjYmx4eVhHNTJZWElnWTI5dWRHRnBibVZ5TzF4eVhHNWNjbHh1ZG1GeUlHbHVjM1JoYm1ObGN5QTlJSHRjY2x4dVhIUnZibE5qY205c2JFVjJaVzUwU0dGdVpHeGxjam9nWm5WdVkzUnBiMjRvS1NCN2ZTeGNjbHh1WEhSdmJsZG9aV1ZzUlhabGJuUklZVzVrYkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHQ5TEZ4eVhHNWNkRzl1U1c1d2RYUkNiSFZ5UlhabGJuUklZVzVrYkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHQ5TEZ4eVhHNWNkRzl1UTJ4cFkydERaV3hzUlhabGJuUklZVzVrYkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHQ5TEZ4eVhHNWNkRzl1UTJ4cFkydFRZWFpsUW5WMGRHOXVSWFpsYm5SSVlXNWtiR1Z5T2lCbWRXNWpkR2x2YmlncElIdDlMRnh5WEc1Y2RHOXVRMnhwWTJ0VGIzSjBTR1ZoWkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHQ5TEZ4eVhHNWNkRzl1UTJ4cFkydEdhV3gwWlhKSVpXRmtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UzMHNYSEpjYmx4MGIyNVhhVzVrYjNkU1pYTnBlbVU2SUdaMWJtTjBhVzl1S0NrZ2UzMHNYSEpjYmx4MGIyNU5iM1Z6WlVWdWRHVnlRMlZzYkZkcGRHaFVhWFJzWlRvZ1puVnVZM1JwYjI0b0tTQjdmU3hjY2x4dVhIUnZiazF2ZFhObFRHVmhkbVZEWld4c1YybDBhRlJwZEd4bE9pQm1kVzVqZEdsdmJpZ3BJSHQ5TEZ4eVhHNTlPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdiMjVYYUdWbGJFVjJaVzUwU0dGdVpHeGxjaWhsZG1WdWRDd2dZMjl1Wm1sbktTQjdYSEpjYmx4MFpYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjY2x4dVhISmNibHgwYVdZZ0tHVjJaVzUwTG1SbGJIUmhUVzlrWlNBOVBUMGdWMmhsWld4RmRtVnVkQzVFVDAxZlJFVk1WRUZmVUVsWVJVd3BJSHRjY2x4dVhIUmNkR052Ym5SaGFXNWxjaTV6WTNKdmJHeFViM0FnS3owZ1pYWmxiblF1WkdWc2RHRlpPMXh5WEc1Y2RGeDBZMjl1ZEdGcGJtVnlMbk5qY205c2JFeGxablFnS3owZ1pYWmxiblF1WkdWc2RHRllPMXh5WEc1Y2RIMGdaV3h6WlNCcFppQW9aWFpsYm5RdVpHVnNkR0ZOYjJSbElEMDlQU0JYYUdWbGJFVjJaVzUwTGtSUFRWOUVSVXhVUVY5TVNVNUZLU0I3WEhKY2JseDBYSFJqYjI1MFlXbHVaWEl1YzJOeWIyeHNWRzl3SUNzOUlHVjJaVzUwTG1SbGJIUmhXU0FxSUdOdmJtWnBaeTVwYm01bGNpNWthVzFsYm5OcGIyNXpMbk5qY205c2JFeHBibVZJWldsbmFIUTdYSEpjYmx4MFhIUmpiMjUwWVdsdVpYSXVjMk55YjJ4c1RHVm1kQ0FyUFNCbGRtVnVkQzVrWld4MFlWZ2dLaUJqYjI1bWFXY3VhVzV1WlhJdVpHbHRaVzV6YVc5dWN5NXpZM0p2Ykd4TWFXNWxTR1ZwWjJoME8xeHlYRzVjZEgwZ1pXeHpaU0JwWmlBb1pYWmxiblF1WkdWc2RHRk5iMlJsSUQwOVBTQlhhR1ZsYkVWMlpXNTBMa1JQVFY5RVJVeFVRVjlRUVVkRktTQjdYSEpjYmx4MFhIUmpiMjUwWVdsdVpYSXVjMk55YjJ4c1ZHOXdJQ3M5SUdWMlpXNTBMbVJsYkhSaFdTQXFJR052Ym1acFp5NXBibTVsY2k1a2FXMWxibk5wYjI1ekxuTmpjbTlzYkZCaFoyVklaV2xuYUhRN1hISmNibHgwWEhSamIyNTBZV2x1WlhJdWMyTnliMnhzVEdWbWRDQXJQU0JsZG1WdWRDNWtaV3gwWVZnZ0tpQmpiMjVtYVdjdWFXNXVaWEl1WkdsdFpXNXphVzl1Y3k1elkzSnZiR3hRWVdkbFNHVnBaMmgwTzF4eVhHNWNkSDFjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2IyNVRZM0p2Ykd4RmRtVnVkRWhoYm1Sc1pYSW9aWFpsYm5Rc0lHTnZibVpwWnlrZ2UxeHlYRzVjZEhSdmIyeDBhWEJOYjJSMWJHVXVhR2xrWlVGc2JDaGpiMjVtYVdjcE8xeHlYRzVjY2x4dVhIUmtiMjFOYjJSMWJHVXVjbVZ6WlhSRlpHbDBhVzVuUTJWc2JDaGpiMjVtYVdjc0lHbHVjM1JoYm1ObGN5NXZia2x1Y0hWMFFteDFja1YyWlc1MFNHRnVaR3hsY2lrN1hISmNibHgwWkc5dFRXOWtkV3hsTG5Wd1pHRjBaVUoxWm1abGNuTW9ZMjl1Wm1sbktUdGNjbHh1WEhSa2IyMU5iMlIxYkdVdWRYQmtZWFJsVkdGaWJHVW9ZMjl1Wm1sbkxDQm1ZV3h6WlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJRzl1UTJ4cFkydERaV3hzUlhabGJuUklZVzVrYkdWeUtHVjJaVzUwTENCamIyNW1hV2NwSUh0Y2NseHVYSFJwWmlBb0lXVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLQ2N1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WTJWc2JFUmhkR0ZEYjI1MFlXbHVaWElwS1NCN1hISmNibHgwWEhSeVpYUjFjbTQ3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFJsWkdsMFRXOWtkV3hsTG5OMFlYSjBSV1JwZEdsdVowTmxiR3dvWTI5dVptbG5MQ0JsZG1WdWRDNTBZWEpuWlhRdWNHRnlaVzUwVG05a1pTd2dhVzV6ZEdGdVkyVnpMQ0I3WEhKY2JseDBYSFJ2YmtsdWNIVjBRbXgxY2tWMlpXNTBTR0Z1Wkd4bGNqb2diMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJc1hISmNibHgwWEhSdmJrbHVjSFYwUzJWNVZYQkZkbVZ1ZEVoaGJtUnNaWEk2SUc5dVNXNXdkWFJMWlhsVmNFVjJaVzUwU0dGdVpHeGxjbHh5WEc1Y2RIMHBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCdmJrbHVjSFYwUW14MWNrVjJaVzUwU0dGdVpHeGxjaWhsZG1WdWRDd2dZMjl1Wm1sbktTQjdYSEpjYmx4MFpXUnBkRTF2WkhWc1pTNW1hVzVwYzJoRlpHbDBhVzVuUTJWc2JDaGpiMjVtYVdjc0lHVjJaVzUwTG5SaGNtZGxkQ3dnZTF4eVhHNWNkRngwYjI1SmJuQjFkRUpzZFhKRmRtVnVkRWhoYm1Sc1pYSTZJRzl1U1c1d2RYUkNiSFZ5UlhabGJuUklZVzVrYkdWeUxGeHlYRzVjZEZ4MGIyNUpibkIxZEV0bGVWVndSWFpsYm5SSVlXNWtiR1Z5T2lCdmJrbHVjSFYwUzJWNVZYQkZkbVZ1ZEVoaGJtUnNaWEpjY2x4dVhIUjlLVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2IyNUpibkIxZEV0bGVWVndSWFpsYm5SSVlXNWtiR1Z5S0dWMlpXNTBMQ0JqYjI1bWFXY3BJSHRjY2x4dVhIUjJZWElnYTJWNVEyOWtaU0E5SUd0bGVXSnZZWEprVlhScGJDNW5aWFJMWlhsRGIyUmxLR1YyWlc1MEtUdGNjbHh1WEhKY2JseDBjM2RwZEdOb0lDaHJaWGxEYjJSbEtTQjdYSEpjYmx4MFhIUmpZWE5sSUd0bGVXSnZZWEprVlhScGJDNUxSVmxmUTA5RVJWTXVSVTVVUlZJNlhISmNibHgwWEhSY2RHVjJaVzUwTG5SaGNtZGxkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaWJIVnlKeXdnYVc1emRHRnVZMlZ6TG05dVNXNXdkWFJDYkhWeVJYWmxiblJJWVc1a2JHVnlLVHRjY2x4dVhIUmNkRngwWldScGRFMXZaSFZzWlM1bWFXNXBjMmhGWkdsMGFXNW5RMlZzYkNoamIyNW1hV2NzSUdWMlpXNTBMblJoY21kbGRDd2dlMXh5WEc1Y2RGeDBYSFJjZEc5dVNXNXdkWFJDYkhWeVJYWmxiblJJWVc1a2JHVnlPaUJ2YmtsdWNIVjBRbXgxY2tWMlpXNTBTR0Z1Wkd4bGNpeGNjbHh1WEhSY2RGeDBYSFJ2YmtsdWNIVjBTMlY1VlhCRmRtVnVkRWhoYm1Sc1pYSTZJRzl1U1c1d2RYUkxaWGxWY0VWMlpXNTBTR0Z1Wkd4bGNseHlYRzVjZEZ4MFhIUjlLVHRjY2x4dVhIUmNkRngwWW5KbFlXczdYSEpjYmx4MFhIUmpZWE5sSUd0bGVXSnZZWEprVlhScGJDNUxSVmxmUTA5RVJWTXVSVk5EUVZCRk9seHlYRzVjZEZ4MFhIUmxaR2wwVFc5a2RXeGxMbU5oYm1ObGJFVmthWFJwYm1kRFpXeHNLR052Ym1acFp5d2daWFpsYm5RdWRHRnlaMlYwTENCN1hISmNibHgwWEhSY2RGeDBiMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJNklHOXVTVzV3ZFhSQ2JIVnlSWFpsYm5SSVlXNWtiR1Z5TEZ4eVhHNWNkRngwWEhSY2RHOXVTVzV3ZFhSTFpYbFZjRVYyWlc1MFNHRnVaR3hsY2pvZ2IyNUpibkIxZEV0bGVWVndSWFpsYm5SSVlXNWtiR1Z5WEhKY2JseDBYSFJjZEgwcE8xeHlYRzVjZEZ4MFhIUmljbVZoYXp0Y2NseHVYSFJjZEdSbFptRjFiSFE2WEhKY2JseDBYSFJjZEdKeVpXRnJPMXh5WEc1Y2RIMWNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYjI1RGJHbGphMU5oZG1WQ2RYUjBiMjVGZG1WdWRFaGhibVJzWlhJb1pYWmxiblFzSUdOdmJtWnBaeWtnZTF4eVhHNWNkR1ZrYVhSTmIyUjFiR1V1YzJGMlpVTmxiR3h6S0dOdmJtWnBaeWs3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHOXVRMnhwWTJ0VGIzSjBTR1ZoWkdWeUtHVjJaVzUwTENCamIyNW1hV2NwSUh0Y2NseHVYSFIyWVhJZ2MyOXlkRU5sYkd4VFpXeGxZM1J2Y2lBOUlDY3VKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVjMjl5ZEVObGJHd3NYSEpjYmx4MFhIUnpiM0owUTI5dWRHRnBibVZ5VTJWc1pXTjBiM0lnUFNCemIzSjBRMlZzYkZObGJHVmpkRzl5SUNzZ0p5QXVKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVZMlZzYkVSaGRHRkRiMjUwWVdsdVpYSXNYSEpjYmx4MFhIUnpiM0owUkdsellXSnNaV1JUWld4bFkzUnZjaUE5SUNjdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWMyOXlkRVJwYzJGaWJHVmtMRnh5WEc1Y2RGeDBjMjl5ZEVsamIyNVRaV3hsWTNSdmNpQTlJSE52Y25SRFpXeHNVMlZzWldOMGIzSWdLeUFuSUM0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1emIzSjBTV052Ymp0Y2NseHVYSEpjYmx4MGFXWWdLQ0ZsZG1WdWRDNTBZWEpuWlhRdWJXRjBZMmhsY3loemIzSjBRMjl1ZEdGcGJtVnlVMlZzWldOMGIzSXBJQ1ltWEhKY2JseDBYSFFoWlhabGJuUXVkR0Z5WjJWMExtMWhkR05vWlhNb2MyOXlkRWxqYjI1VFpXeGxZM1J2Y2lrZ2ZIeGNjbHh1WEhSY2RHVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLSE52Y25SRWFYTmhZbXhsWkZObGJHVmpkRzl5S1NrZ2UxeHlYRzVjZEZ4MGNtVjBkWEp1TzF4eVhHNWNkSDFjY2x4dVhISmNibHgwYVdZZ0tHVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLSE52Y25SSlkyOXVVMlZzWldOMGIzSXBLU0I3WEhKY2JseDBYSFJ6YjNKMFRXOWtkV3hsTG5KbGMyVjBVMjl5ZENoamIyNW1hV2NwTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwYVdZZ0tHVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLSE52Y25SRGIyNTBZV2x1WlhKVFpXeGxZM1J2Y2lrcElIdGNjbHh1WEhSY2RITnZjblJOYjJSMWJHVXVjMjl5ZEVKNVEyOXNkVzF1S0dOdmJtWnBaeXdnWkc5dFZYUnBiQzVtYVc1a1VHRnlaVzUwVG05a1pTaGxkbVZ1ZEM1MFlYSm5aWFFzSUhOdmNuUkRaV3hzVTJWc1pXTjBiM0lwS1R0Y2NseHVYSFI5WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHOXVRMnhwWTJ0R2FXeDBaWEpJWldGa1pYSW9aWFpsYm5Rc0lHTnZibVpwWnlrZ2UxeHlYRzVjZEhaaGNpQm1hV3gwWlhKRFpXeHNVMlZzWldOMGIzSWdQU0FuTGljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1acGJIUmxja05sYkd3c1hISmNibHgwWEhSbWFXeDBaWEpEYjI1MFlXbHVaWEpUWld4bFkzUnZjaUE5SUdacGJIUmxja05sYkd4VFpXeGxZM1J2Y2lBcklDY2dMaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbU5sYkd4RVlYUmhRMjl1ZEdGcGJtVnlMRnh5WEc1Y2RGeDBabWxzZEdWeVJHbHpZV0pzWldSVFpXeGxZM1J2Y2lBOUlDY3VKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVJHbHpZV0pzWldRc1hISmNibHgwWEhSbWFXeDBaWEpUWldGeVkyaEpZMjl1VTJWc1pXTjBiM0lnUFNCbWFXeDBaWEpEWld4c1UyVnNaV04wYjNJZ0t5QW5JQzRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVtYVd4MFpYSlRaV0Z5WTJoSlkyOXVMRnh5WEc1Y2RGeDBabWxzZEdWeVEyeGxZWEpKWTI5dVUyVnNaV04wYjNJZ1BTQm1hV3gwWlhKRFpXeHNVMlZzWldOMGIzSWdLeUFuSUM0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1bWFXeDBaWEpEYkdWaGNrbGpiMjQ3WEhKY2JseHlYRzVjZEdsbUlDZ2haWFpsYm5RdWRHRnlaMlYwTG0xaGRHTm9aWE1vWm1sc2RHVnlRMjl1ZEdGcGJtVnlVMlZzWldOMGIzSXBJQ1ltWEhKY2JseDBYSFFoWlhabGJuUXVkR0Z5WjJWMExtMWhkR05vWlhNb1ptbHNkR1Z5VTJWaGNtTm9TV052YmxObGJHVmpkRzl5S1NBbUpseHlYRzVjZEZ4MElXVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLR1pwYkhSbGNrTnNaV0Z5U1dOdmJsTmxiR1ZqZEc5eUtTQjhmRnh5WEc1Y2RGeDBaWFpsYm5RdWRHRnlaMlYwTG0xaGRHTm9aWE1vWm1sc2RHVnlSR2x6WVdKc1pXUlRaV3hsWTNSdmNpa3BJSHRjY2x4dVhISmNibHgwWEhSeVpYUjFjbTQ3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFIyWVhJZ1kyVnNiRTV2WkdVZ1BTQmtiMjFWZEdsc0xtWnBibVJRWVhKbGJuUk9iMlJsS0dWMlpXNTBMblJoY21kbGRDd2dabWxzZEdWeVEyVnNiRk5sYkdWamRHOXlLVHRjY2x4dVhISmNibHgwYVdZZ0tHVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLR1pwYkhSbGNrTnNaV0Z5U1dOdmJsTmxiR1ZqZEc5eUtTa2dlMXh5WEc1Y2RGeDBabWxzZEdWeVRXOWtkV3hsTG1Oc1pXRnlSbWxzZEdWeUtHTnZibVpwWnl3Z1kyVnNiRTV2WkdVcE8xeHlYRzVjY2x4dVhIUmNkSEpsZEhWeWJqdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHWnBiSFJsY2sxdlpIVnNaUzV6ZEdGeWRFVmthWFJwYm1kR2FXeDBaWElvWTI5dVptbG5MQ0JqWld4c1RtOWtaU2s3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHOXVWMmx1Wkc5M1VtVnphWHBsS0dWMlpXNTBMQ0JqYjI1bWFXY3BJSHRjY2x4dVhIUnBaaUFvWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25JeWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMblZ1YVhGMVpVbGtLU0E5UFQwZ2JuVnNiQ2tnZTF4eVhHNWNkRngwY21WMGRYSnVPMXh5WEc1Y2RIMWNjbHh1WEhKY2JseDBjbVZ6YVhwbFRXOWtkV3hsTG5KbGMybDZaVVYyWlc1MFNHRnVaR3hsY2loamIyNW1hV2NwTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnZiazF2ZFhObFJXNTBaWEpEWld4c1YybDBhRlJwZEd4bEtHVjJaVzUwTENCamIyNW1hV2NwSUh0Y2NseHVYSFIwYjI5c2RHbHdUVzlrZFd4bExtOXVUVzkxYzJWRmJuUmxja05sYkd4WGFYUm9WR2wwYkdVb1kyOXVabWxuTENCbGRtVnVkQzUwWVhKblpYUXBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCdmJrMXZkWE5sVEdWaGRtVkRaV3hzVjJsMGFGUnBkR3hsS0dWMlpXNTBMQ0JqYjI1bWFXY3BJSHRjY2x4dVhIUjBiMjlzZEdsd1RXOWtkV3hsTG05dVRXOTFjMlZNWldGMlpVTmxiR3hYYVhSb1ZHbDBiR1VvWTI5dVptbG5MQ0JsZG1WdWRDNTBZWEpuWlhRcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJoWkdSRmRtVnVkSE1vWTI5dVptbG5LU0I3WEhKY2JseDBZMjl1ZEdGcGJtVnlJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MaWNnS3lCamIyNW1hV2N1YzJWc1pXTjBiM0p6TG5acGNuUjFZV3hEYjI1MFlXbHVaWElwTzF4eVhHNWNjbHh1WEhScGJuTjBZVzVqWlhNdWIyNVRZM0p2Ykd4RmRtVnVkRWhoYm1Sc1pYSWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDa2dleUJ2YmxOamNtOXNiRVYyWlc1MFNHRnVaR3hsY2lobGRtVnVkQ3dnWTI5dVptbG5LVHNnZlR0Y2NseHVYSFJwYm5OMFlXNWpaWE11YjI1WGFHVmxiRVYyWlc1MFNHRnVaR3hsY2lBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1NCN0lHOXVWMmhsWld4RmRtVnVkRWhoYm1Sc1pYSW9aWFpsYm5Rc0lHTnZibVpwWnlrN0lIMDdYSEpjYmx4MGFXNXpkR0Z1WTJWekxtOXVRMnhwWTJ0RFpXeHNSWFpsYm5SSVlXNWtiR1Z5SUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUhzZ2IyNURiR2xqYTBObGJHeEZkbVZ1ZEVoaGJtUnNaWElvWlhabGJuUXNJR052Ym1acFp5azdJSDA3WEhKY2JseDBhVzV6ZEdGdVkyVnpMbTl1UTJ4cFkydFRZWFpsUW5WMGRHOXVSWFpsYm5SSVlXNWtiR1Z5SUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUhzZ2IyNURiR2xqYTFOaGRtVkNkWFIwYjI1RmRtVnVkRWhoYm1Sc1pYSW9aWFpsYm5Rc0lHTnZibVpwWnlrN0lIMDdYSEpjYmx4MGFXNXpkR0Z1WTJWekxtOXVRMnhwWTJ0VGIzSjBTR1ZoWkdWeUlEMGdablZ1WTNScGIyNG9aWFpsYm5RcElIc2diMjVEYkdsamExTnZjblJJWldGa1pYSW9aWFpsYm5Rc0lHTnZibVpwWnlrN0lIMDdYSEpjYmx4MGFXNXpkR0Z1WTJWekxtOXVRMnhwWTJ0R2FXeDBaWEpJWldGa1pYSWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDa2dleUJ2YmtOc2FXTnJSbWxzZEdWeVNHVmhaR1Z5S0dWMlpXNTBMQ0JqYjI1bWFXY3BPeUI5TzF4eVhHNWNkR2x1YzNSaGJtTmxjeTV2YmxkcGJtUnZkMUpsYzJsNlpTQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdJRzl1VjJsdVpHOTNVbVZ6YVhwbEtHVjJaVzUwTENCamIyNW1hV2NwT3lCOU8xeHlYRzVjZEdsdWMzUmhibU5sY3k1dmJrMXZkWE5sUlc1MFpYSkRaV3hzVjJsMGFGUnBkR3hsSUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUhzZ2IyNU5iM1Z6WlVWdWRHVnlRMlZzYkZkcGRHaFVhWFJzWlNobGRtVnVkQ3dnWTI5dVptbG5LVHNnZlR0Y2NseHVYSFJwYm5OMFlXNWpaWE11YjI1TmIzVnpaVXhsWVhabFEyVnNiRmRwZEdoVWFYUnNaU0E5SUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3SUc5dVRXOTFjMlZNWldGMlpVTmxiR3hYYVhSb1ZHbDBiR1VvWlhabGJuUXNJR052Ym1acFp5azdJSDA3WEhKY2JseHlYRzVjZEdsbUlDaGpiMjUwWVdsdVpYSWdJVDA5SUc1MWJHd3BJSHRjY2x4dVhIUmNkR052Ym5SaGFXNWxjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2QzYUdWbGJDY3NJR2x1YzNSaGJtTmxjeTV2Ymxkb1pXVnNSWFpsYm5SSVlXNWtiR1Z5TENCN0lIQmhjM05wZG1VNklHWmhiSE5sTENCallYQjBkWEpsT2lCMGNuVmxJSDBwTzF4eVhHNWNkRngwWTI5dWRHRnBibVZ5TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNOamNtOXNiQ2NzSUdsdWMzUmhibU5sY3k1dmJsTmpjbTlzYkVWMlpXNTBTR0Z1Wkd4bGNpazdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUnBaaUFvWTI5dVptbG5MbTF2WkhWc1pYTXVkRzl2YkhScGNDNWxibUZpYkdWa0tTQjdYSEpjYmx4MFhIUmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZGJkR2wwYkdWZEp5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGxiQ2tnZTF4eVhHNWNkRngwWEhSbGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WldWdWRHVnlKeXdnYVc1emRHRnVZMlZ6TG05dVRXOTFjMlZGYm5SbGNrTmxiR3hYYVhSb1ZHbDBiR1VwTzF4eVhHNWNkRngwWEhSbGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6Wld4bFlYWmxKeXdnYVc1emRHRnVZMlZ6TG05dVRXOTFjMlZNWldGMlpVTmxiR3hYYVhSb1ZHbDBiR1VwTzF4eVhHNWNkRngwZlNrN1hISmNibHgwZlZ4eVhHNWNjbHh1WEhScFppQW9ZMjl1Wm1sbkxtVmthWFF1Wlc1aFlteGxaQ0FtSmlCamIyNW1hV2N1YzJWc1pXTjBiM0p6TG5OaGRtVkNkWFIwYjI0Z0lUMDlJRzUxYkd3cElIdGNjbHh1WEhSY2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWTI5dVptbG5Mbk5sYkdWamRHOXljeTV6WVhabFFuVjBkRzl1S1M1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdsdWMzUmhibU5sY3k1dmJrTnNhV05yVTJGMlpVSjFkSFJ2YmtWMlpXNTBTR0Z1Wkd4bGNpazdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUnBaaUFvWTI5dVptbG5MbVZrYVhRdVpXNWhZbXhsWkNrZ2UxeHlYRzVjZEZ4MFpHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbkxpY2dLeUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMblpwY25SMVlXeFVZV0pzWlNBcklDY2dkR1F1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WkdGMFlVTmxiR3dwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWld3cElIdGNjbHh1WEhSY2RGeDBaV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JwYm5OMFlXNWpaWE11YjI1RGJHbGphME5sYkd4RmRtVnVkRWhoYm1Sc1pYSXBPMXh5WEc1Y2RGeDBmU2s3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFJwWmlBb1kyOXVabWxuTG5OdmNuUXVaVzVoWW14bFpDa2dlMXh5WEc1Y2RGeDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25JeWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMblZ1YVhGMVpVbGtJQ3NnSnlCMFpDNG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NXpiM0owUTJWc2JDa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGxiQ2tnZTF4eVhHNWNkRngwWEhSbGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHbHVjM1JoYm1ObGN5NXZia05zYVdOclUyOXlkRWhsWVdSbGNpazdYSEpjYmx4MFhIUjlLVHRjY2x4dVhIUjlYSEpjYmx4eVhHNWNkR2xtSUNoamIyNW1hV2N1Wm1sc2RHVnlMbVZ1WVdKc1pXUXBJSHRjY2x4dVhIUmNkR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeU1uSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTUxYm1seGRXVkpaQ0FySUNjZ2RHUXVKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVEyVnNiQ2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYkNrZ2UxeHlYRzVjZEZ4MFhIUmxiQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR2x1YzNSaGJtTmxjeTV2YmtOc2FXTnJSbWxzZEdWeVNHVmhaR1Z5S1R0Y2NseHVYSFJjZEgwcE8xeHlYRzVjZEgxY2NseHVYSEpjYmx4MGFXWWdLR052Ym1acFp5NWhkWFJ2VW1WemFYcGxLU0I3WEhKY2JseDBYSFIzYVc1a2IzY3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jbVZ6YVhwbEp5d2dhVzV6ZEdGdVkyVnpMbTl1VjJsdVpHOTNVbVZ6YVhwbEtUdGNjbHh1WEhSOVhISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSEpsYlc5MlpVVjJaVzUwY3loamIyNW1hV2NwSUh0Y2NseHVYSFJqYjI1MFlXbHVaWElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdWRtbHlkSFZoYkVOdmJuUmhhVzVsY2lrN1hISmNibHh5WEc1Y2RHbG1JQ2hqYjI1MFlXbHVaWElnSVQwOUlHNTFiR3dwSUh0Y2NseHVYSFJjZEdOdmJuUmhhVzVsY2k1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDNhR1ZsYkNjc0lHbHVjM1JoYm1ObGN5NXZibGRvWldWc1JYWmxiblJJWVc1a2JHVnlLVHRjY2x4dVhIUmNkR052Ym5SaGFXNWxjaTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelkzSnZiR3duTENCcGJuTjBZVzVqWlhNdWIyNVRZM0p2Ykd4RmRtVnVkRWhoYm1Sc1pYSXBPMXh5WEc1Y2RIMWNjbHh1WEhKY2JseDBhV1lnS0dOdmJtWnBaeTV0YjJSMWJHVnpMblJ2YjJ4MGFYQXVaVzVoWW14bFpDa2dlMXh5WEc1Y2RGeDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XM1JwZEd4bFhTY3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aV3dwSUh0Y2NseHVYSFJjZEZ4MFpXd3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVmxiblJsY2ljc0lHbHVjM1JoYm1ObGN5NXZiazF2ZFhObFJXNTBaWEpEWld4c1YybDBhRlJwZEd4bEtUdGNjbHh1WEhSY2RGeDBaV3d1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZzWldGMlpTY3NJR2x1YzNSaGJtTmxjeTV2YmsxdmRYTmxUR1ZoZG1WRFpXeHNWMmwwYUZScGRHeGxLVHRjY2x4dVhIUmNkSDBwTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwYVdZZ0tHTnZibVpwWnk1bFpHbDBMbVZ1WVdKc1pXUWdKaVlnWTI5dVptbG5Mbk5sYkdWamRHOXljeTV6WVhabFFuVjBkRzl1SUNFOVBTQnVkV3hzS1NCN1hISmNibHgwWEhSa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLR052Ym1acFp5NXpaV3hsWTNSdmNuTXVjMkYyWlVKMWRIUnZiaWt1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCcGJuTjBZVzVqWlhNdWIyNURiR2xqYTFOaGRtVkNkWFIwYjI1RmRtVnVkRWhoYm1Sc1pYSXBPMXh5WEc1Y2RIMWNjbHh1WEhKY2JseDBhV1lnS0dOdmJtWnBaeTVsWkdsMExtVnVZV0pzWldRcElIdGNjbHh1WEhSY2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5NG5JQ3NnWTI5dVptbG5Mbk5sYkdWamRHOXljeTUyYVhKMGRXRnNWR0ZpYkdVZ0t5QW5JSFJrTGljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1SaGRHRkRaV3hzS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dWc0tTQjdYSEpjYmx4MFhIUmNkR1ZzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z2FXNXpkR0Z1WTJWekxtOXVRMnhwWTJ0RFpXeHNSWFpsYm5SSVlXNWtiR1Z5S1R0Y2NseHVYSFJjZEgwcE8xeHlYRzVjZEgxY2NseHVYSEpjYmx4MGFXWWdLR052Ym1acFp5NXpiM0owTG1WdVlXSnNaV1FwSUh0Y2NseHVYSFJjZEdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnlNbklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1MWJtbHhkV1ZKWkNBcklDY2dkR1F1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11YzI5eWRFTmxiR3dwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWld3cElIdGNjbHh1WEhSY2RGeDBaV3d1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCcGJuTjBZVzVqWlhNdWIyNURiR2xqYTFOdmNuUklaV0ZrWlhJcE8xeHlYRzVjZEZ4MGZTazdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUnBaaUFvWTI5dVptbG5MbVpwYkhSbGNpNWxibUZpYkdWa0tTQjdYSEpjYmx4MFhIUmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY2pKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVkVzVwY1hWbFNXUWdLeUFuSUhSa0xpY2dLeUJqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tObGJHd3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aV3dwSUh0Y2NseHVYSFJjZEZ4MFpXd3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JwYm5OMFlXNWpaWE11YjI1RGJHbGphMFpwYkhSbGNraGxZV1JsY2lrN1hISmNibHgwWEhSOUtUdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHbG1JQ2hqYjI1bWFXY3VZWFYwYjFKbGMybDZaU2tnZTF4eVhHNWNkRngwZDJsdVpHOTNMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNKbGMybDZaU2NzSUdsdWMzUmhibU5sY3k1dmJsZHBibVJ2ZDFKbGMybDZaU2s3WEhKY2JseDBmVnh5WEc1OVhISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2NseHVYSFJoWkdSRmRtVnVkSE02SUdGa1pFVjJaVzUwY3l4Y2NseHVYSFJ5WlcxdmRtVkZkbVZ1ZEhNNklISmxiVzkyWlVWMlpXNTBjMXh5WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2NseHVYSEpjYm5aaGNpQmtiMjFOYjJSMWJHVWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpHOXRKeWtzWEhKY2JseDBjMjl5ZEUxdlpIVnNaU0FnUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwzTnZjblFuS1N4Y2NseHVYSFJrWVhSaFZYUnBiQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHVMM1YwYVd4ekwyUmhkR0VuS1N4Y2NseHVYSFJqYjI1bWFXZFZkR2xzSUNBOUlISmxjWFZwY21Vb0p5NHVMM1YwYVd4ekwyTnZibVpwWjNWeVlYUnBiMjRuS1N4Y2NseHVYSFJqWld4c1JXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb0p5NHVMMlZzWlcxbGJuUnpMMk5sYkd3bktUdGNjbHh1WEhKY2JtWjFibU4wYVc5dUlITjBZWEowUldScGRHbHVaMFpwYkhSbGNpaGpiMjVtYVdjc0lHTmxiR3hPYjJSbEtTQjdYSEpjYmx4MGFXWWdLR05sYkd4T2IyUmxMbkYxWlhKNVUyVnNaV04wYjNJb0p5NG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKRGIyNTBZV2x1WlhJcElDRTlQU0J1ZFd4c0tTQjdYSEpjYmx4MFhIUnlaWFIxY200N1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSMllYSWdZWFIwY21saWRYUmxJRDBnWTJWc2JFNXZaR1V1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdGMGRISnBZblYwWlNjcExGeHlYRzVjZEZ4MFptbHNkR1Z5VDJKcUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG1acGJIUmxjbk5iWVhSMGNtbGlkWFJsWFNCOGZDQjdmU3hjY2x4dVhIUmNkR2hsWVdSbGNrOWlhaUE5SUdOdmJtWnBaMVYwYVd3dVoyVjBTR1ZoWkdWeVQySnFaV04wS0dOdmJtWnBaeXdnWVhSMGNtbGlkWFJsS1N4Y2NseHVYSFJjZEdOc1pXRnlTV052YmtOc1lYTnpJRDBnWTI5dVptbG5MbWx1Ym1WeUxtbGpiMjV6TG1acGJIUmxjaTVqYkdWaGNpeGNjbHh1WEhSY2RHTnNaV0Z5U1dOdmJrVnNaVzFsYm5SRGJHRnpjeUE5SUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVEyeGxZWEpKWTI5dUlDc2dKeUFuSUNzZ1kyeGxZWEpKWTI5dVEyeGhjM003WEhKY2JseHlYRzVjZEdacGJIUmxjazlpYWk1aGRIUnlhV0oxZEdVZ1BTQmhkSFJ5YVdKMWRHVTdYSEpjYmx4MFptbHNkR1Z5VDJKcUxtWnBiSFJsY2xSNWNHVWdQU0JvWldGa1pYSlBZbW91Wm1sc2RHVnlWSGx3WlR0Y2NseHVYSFJtYVd4MFpYSlBZbW91ZG1Gc2RXVWdQU0JtYVd4MFpYSlBZbW91ZG1Gc2RXVWdmSHdnSnljN1hISmNibHh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVtYVd4MFpYSnpXMkYwZEhKcFluVjBaVjBnUFNCbWFXeDBaWEpQWW1vN1hISmNibHh5WEc1Y2RIWmhjaUJqYjI1MFlXbHVaWElnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktUdGNjbHh1WEhKY2JseDBZMlZzYkVWc1pXMWxiblF1ZFhCa1lYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUdObGJHeE9iMlJsTENCamIyNTBZV2x1WlhJcE8xeHlYRzVjY2x4dVhIUmpiMjUwWVdsdVpYSXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbVpwYkhSbGNrTnZiblJoYVc1bGNpazdYSEpjYmx4MFkyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRDQTlJQ2M4YVc1d2RYUStQR2tnWTJ4aGMzTTlYQ0luSUNzZ1kyeGxZWEpKWTI5dVJXeGxiV1Z1ZEVOc1lYTnpJQ3NnSjF3aUlHRnlhV0V0YUdsa1pHVnVQVndpZEhKMVpWd2lQand2YVQ0bk8xeHlYRzVjY2x4dVhIUjJZWElnYVc1d2RYUWdQU0JqYjI1MFlXbHVaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25hVzV3ZFhRbktUdGNjbHh1WEhKY2JseDBhVzV3ZFhRdWMyVjBRWFIwY21saWRYUmxLQ2QwZVhCbEp5d2dhR1ZoWkdWeVQySnFMbVJoZEdGVWVYQmxLVHRjY2x4dVhIUnBibkIxZEM1MllXeDFaU0E5SUdacGJIUmxjazlpYWk1MllXeDFaVHRjY2x4dVhIUnBibkIxZEM1bWIyTjFjeWdwTzF4eVhHNWNkR2x1Y0hWMExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oydGxlWFZ3Snl3Z1puVnVZM1JwYjI0b1pYWmxiblFwSUh0Y2NseHVYSFJjZEdsbUlDZ29aWFpsYm5RdWEyVjVRMjlrWlNCOGZDQmxkbVZ1ZEM1M2FHbGphQ2tnUFQwOUlERXpLU0I3SUM4dklFVnVkR1Z5SUd0bGVWeHlYRzVjZEZ4MFhIUm1hV3gwWlhKUFltb3VkbUZzZFdVZ1BTQmtZWFJoVlhScGJDNW5aWFJXWVd4MVpVSjVWSGx3WlNocGJuQjFkQzUyWVd4MVpTd2dhR1ZoWkdWeVQySnFMbVJoZEdGVWVYQmxLVHRjY2x4dVhISmNibHgwWEhSY2RHWnBibWx6YUVWa2FYUnBibWRHYVd4MFpYSW9ZMjl1Wm1sbkxDQmpaV3hzVG05a1pTd2dhR1ZoWkdWeVQySnFMQ0JtYVd4MFpYSlBZbW9wTzF4eVhHNWNkRngwZlNCbGJITmxJR2xtSUNnb1pYWmxiblF1YTJWNVEyOWtaU0I4ZkNCbGRtVnVkQzUzYUdsamFDa2dQVDA5SURJM0tTQjdJQzh2SUVWelkyRndaU0JyWlhsY2NseHVYSFJjZEZ4MFptbHVhWE5vUldScGRHbHVaMFpwYkhSbGNpaGpiMjVtYVdjc0lHTmxiR3hPYjJSbExDQm9aV0ZrWlhKUFltb3NJR1pwYkhSbGNrOWlhaWs3WEhKY2JseDBYSFI5WEhKY2JseDBmU2s3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHWnBiSFJsY2loamIyNW1hV2NzSUhOdmNuUlVZV0pzWlNrZ2UxeHlYRzVjZEhOdmNuUlVZV0pzWlNBOUlITnZjblJVWVdKc1pTQWhQVDBnWm1Gc2MyVTdYSEpjYmx4eVhHNWNkR052Ym1acFp5NWtZWFJoVTI5MWNtTmxJRDBnWTI5dVptbG5MbWx1Ym1WeUxtOXlhV2RwYm1Gc1JHRjBZVk52ZFhKalpUdGNjbHh1WEhKY2JseDBUMkpxWldOMExtdGxlWE1vWTI5dVptbG5MbWx1Ym1WeUxtWnBiSFJsY25NcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2EyVjVLU0I3WEhKY2JseDBYSFIyWVhJZ1ptbHNkR1Z5VDJKcUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG1acGJIUmxjbk5iYTJWNVhUdGNjbHh1WEhKY2JseDBYSFJwWmlBb2RIbHdaVzltSUdacGJIUmxjazlpYWk1MllXeDFaU0E5UFNBbmRXNWtaV1pwYm1Wa0p5QjhmQ0JtYVd4MFpYSlBZbW91ZG1Gc2RXVWdQVDA5SUNjbktTQjdYSEpjYmx4MFhIUmNkSEpsZEhWeWJqdGNjbHh1WEhSY2RIMWNjbHh1WEhKY2JseDBYSFJwWmlBb1ptbHNkR1Z5VDJKcUxtWnBiSFJsY2xSNWNHVWdQVDA5SUNkamRYTjBiMjBuS1NCN1hISmNibHgwWEhSY2RHbG1JQ2hqYjI1bWFXY3VabWxzZEdWeUxtTjFjM1J2YlVacGJIUmxjaUFoUFQwZ2JuVnNiQ2tnZTF4eVhHNWNkRngwWEhSY2RHTnZibVpwWnk1a1lYUmhVMjkxY21ObElEMGdZMjl1Wm1sbkxtWnBiSFJsY2k1amRYTjBiMjFHYVd4MFpYSW9lMXh5WEc1Y2RGeDBYSFJjZEZ4MFpHRjBZVk52ZFhKalpUb2dZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVXNYSEpjYmx4MFhIUmNkRngwWEhSaGRIUnlhV0oxZEdVNklHWnBiSFJsY2s5aWFpNWhkSFJ5YVdKMWRHVXNYSEpjYmx4MFhIUmNkRngwWEhSMllXeDFaVG9nWm1sc2RHVnlUMkpxTG5aaGJIVmxMRnh5WEc1Y2RGeDBYSFJjZEZ4MFpXUnBkR1ZrVm1Gc2RXVnpPaUJqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpMRnh5WEc1Y2RGeDBYSFJjZEZ4MGRXNXBjWFZsVW05M1MyVjVPaUJqYjI1bWFXY3VkVzVwY1hWbFVtOTNTMlY1WEhKY2JseDBYSFJjZEZ4MGZTazdYSEpjYmx4MFhIUmNkSDFjY2x4dVhIUmNkSDBnWld4elpTQjdYSEpjYmx4MFhIUmNkR052Ym1acFp5NWtZWFJoVTI5MWNtTmxJRDBnWkdGMFlWVjBhV3d1Wm1sc2RHVnlSR0YwWVNoN1hISmNibHgwWEhSY2RGeDBaR0YwWVZOdmRYSmpaVG9nWTI5dVptbG5MbVJoZEdGVGIzVnlZMlVzWEhKY2JseDBYSFJjZEZ4MFlYUjBjbWxpZFhSbE9pQm1hV3gwWlhKUFltb3VZWFIwY21saWRYUmxMRnh5WEc1Y2RGeDBYSFJjZEdacGJIUmxjbFI1Y0dVNklHWnBiSFJsY2s5aWFpNW1hV3gwWlhKVWVYQmxMRnh5WEc1Y2RGeDBYSFJjZEhaaGJIVmxUMjVsT2lCbWFXeDBaWEpQWW1vdWRtRnNkV1VzWEhKY2JseDBYSFJjZEZ4MGRtRnNkV1ZVZDI4NklHWnBiSFJsY2s5aWFpNTJZV3gxWlZSM2J5eGNjbHh1WEhSY2RGeDBYSFJsWkdsMFpXUldZV3gxWlhNNklHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhNc1hISmNibHgwWEhSY2RGeDBkVzVwY1hWbFVtOTNTMlY1T2lCamIyNW1hV2N1ZFc1cGNYVmxVbTkzUzJWNVhISmNibHgwWEhSY2RIMHBPMXh5WEc1Y2RGeDBmVnh5WEc1Y2RIMHBPMXh5WEc1Y2NseHVYSFJwWmlBb2MyOXlkRlJoWW14bEtTQjdYSEpjYmx4MFhIUnpiM0owVFc5a2RXeGxMbk52Y25Rb1kyOXVabWxuTENCbVlXeHpaU2s3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFJrYjIxTmIyUjFiR1V1Y21WallXeGpkV3hoZEdWRWFXMWxibk5wYjI1ektHTnZibVpwWnlrN1hISmNibHgwWkc5dFRXOWtkV3hsTG5Wd1pHRjBaVUoxWm1abGNuTW9ZMjl1Wm1sbktUdGNjbHh1WEhSa2IyMU5iMlIxYkdVdWRYQmtZWFJsVkdGaWJHVW9ZMjl1Wm1sbktUdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWTJ4bFlYSkdhV3gwWlhJb1kyOXVabWxuTENCalpXeHNUbTlrWlNrZ2UxeHlYRzVjZEhaaGNpQmhkSFJ5YVdKMWRHVWdQU0JqWld4c1RtOWtaUzVuWlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0WVhSMGNtbGlkWFJsSnlrc1hISmNibHgwWEhSalpXeHNUMkpxSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJJWldGa1pYSlBZbXBsWTNRb1kyOXVabWxuTENCaGRIUnlhV0oxZEdVcExGeHlYRzVjZEZ4MFptbHNkR1Z5VDJKcUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG1acGJIUmxjbk5iWVhSMGNtbGlkWFJsWFR0Y2NseHVYSEpjYmx4MFptbHNkR1Z5VDJKcUxuWmhiSFZsSUQwZ0p5YzdYSEpjYmx4eVhHNWNkSFpoY2lCdVpYZEdhV3gwWlhKeklEMGdlMzA3WEhKY2JseHlYRzVjZEU5aWFtVmpkQzVyWlhsektHTnZibVpwWnk1cGJtNWxjaTVtYVd4MFpYSnpLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHlYRzVjZEZ4MGFXWWdLR3RsZVNBaFBUMGdZWFIwY21saWRYUmxLU0I3WEhKY2JseDBYSFJjZEc1bGQwWnBiSFJsY25OYmEyVjVYU0E5SUdOdmJtWnBaeTVwYm01bGNpNW1hV3gwWlhKelcydGxlVjA3WEhKY2JseDBYSFI5WEhKY2JseDBmU2s3WEhKY2JseHlYRzVjZEdOdmJtWnBaeTVwYm01bGNpNW1hV3gwWlhKeklEMGdibVYzUm1sc2RHVnljenRjY2x4dVhISmNibHgwWm1sdWFYTm9SV1JwZEdsdVowWnBiSFJsY2loamIyNW1hV2NzSUdObGJHeE9iMlJsTENCalpXeHNUMkpxTENCbWFXeDBaWEpQWW1vcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJtYVc1cGMyaEZaR2wwYVc1blJtbHNkR1Z5S0dOdmJtWnBaeXdnWTJWc2JFNXZaR1VzSUdObGJHeFBZbW9zSUdacGJIUmxjazlpYWlrZ2UxeHlYRzVjZEdObGJHeEZiR1Z0Wlc1MExuVndaR0YwWlVSaGRHRkRiMjUwWVdsdVpYSW9ZMjl1Wm1sbkxDQmpaV3hzVG05a1pTd2dZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSbWxzZEdWeVJHRjBZU2hqYjI1bWFXY3NJR05sYkd4T2IyUmxMQ0JqWld4c1QySnFMQ0JtYVd4MFpYSlBZbW9wS1R0Y2NseHVYSEpjYmx4MFptbHNkR1Z5S0dOdmJtWnBaeWs3WEhKY2JuMWNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHlYRzVjZEhOMFlYSjBSV1JwZEdsdVowWnBiSFJsY2pvZ2MzUmhjblJGWkdsMGFXNW5SbWxzZEdWeUxGeHlYRzVjZEdacGJIUmxjam9nWm1sc2RHVnlMRnh5WEc1Y2RHTnNaV0Z5Um1sc2RHVnlPaUJqYkdWaGNrWnBiSFJsY2x4eVhHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1WEhKY2JuWmhjaUJqYjI1bWFXZDFjbUYwYVc5dUlDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyTnZibVpwWjNWeVlYUnBiMjRuS1N4Y2NseHVYSFJsZG1WdWRFaGhibVJzWlhKTmIyUjFiR1VnUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyVjJaVzUwTFdoaGJtUnNaWEluS1N4Y2NseHVYSFJrYjIxTmIyUjFiR1VnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyUnZiU2NwTEZ4eVhHNWNkR052Ym1acFoxVjBhV3dnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDJOdmJtWnBaM1Z5WVhScGIyNG5LU3hjY2x4dVhIUmtZWFJoVlhScGJDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNjeTlrWVhSaEp5a3NYSEpjYmx4MFkyVnNiRVZzWlcxbGJuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Wld4bGJXVnVkSE12WTJWc2JDY3BPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdaMlZ1WlhKaGRHVlVZV0pzWlNoamIyNW1hV2NzSUc5d2RHbHZibk1wSUh0Y2NseHVYSFJqYjI1bWFXZDFjbUYwYVc5dUxtbHVhWFFvWTI5dVptbG5MQ0J2Y0hScGIyNXpLVHRjY2x4dVhISmNibHgwYVc1cGRFTnZiblJoYVc1bGNuTW9ZMjl1Wm1sbktUdGNjbHh1WEhKY2JseDBZMjl1Wm1sbmRYSmhkR2x2Ymk1cGJtbDBRMkZzWTNWc1lYUmxaRlpoYkhWbGN5aGpiMjVtYVdjcE8xeHlYRzVjY2x4dVhIUnBibWwwVkdGaWJHVW9ZMjl1Wm1sbktUdGNjbHh1WEhKY2JseDBaRzl0VFc5a2RXeGxMblZ3WkdGMFpVSjFabVpsY25Nb1kyOXVabWxuS1R0Y2NseHVYSFJrYjIxTmIyUjFiR1V1ZFhCa1lYUmxWR0ZpYkdVb1kyOXVabWxuS1R0Y2NseHVYSEpjYmx4MFpYWmxiblJJWVc1a2JHVnlUVzlrZFd4bExtRmtaRVYyWlc1MGN5aGpiMjVtYVdjcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJrWlhOMGNtOTVWR0ZpYkdVb1kyOXVabWxuS1NCN1hISmNibHgwWlhabGJuUklZVzVrYkdWeVRXOWtkV3hsTG5KbGJXOTJaVVYyWlc1MGN5aGpiMjVtYVdjcE8xeHlYRzVjZEdSdmJVMXZaSFZzWlM1a1pYTjBjbTk1VkdGaWJHVW9ZMjl1Wm1sbktUdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYVc1cGRFTnZiblJoYVc1bGNuTW9ZMjl1Wm1sbktTQjdYSEpjYmx4MGRtRnlJR052Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9ZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NXRZV2x1UTI5dWRHRnBibVZ5S1N4Y2NseHVYSFJjZEhacGNuUjFZV3hEYjI1MFlXbHVaWElnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktTeGNjbHh1WEhSY2RIWnBjblIxWVd4VVlXSnNaU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JoWW14bEp5a3NYSEpjYmx4MFhIUm1hWGhsWkVOdmJuUmhhVzVsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJScGRpY3BMRnh5WEc1Y2RGeDBabWw0WldSVVlXSnNaU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JoWW14bEp5azdYSEpjYmx4eVhHNWNkR052Ym5SaGFXNWxjaTV6WlhSQmRIUnlhV0oxZEdVb0oybGtKeXdnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NTFibWx4ZFdWSlpDazdYSEpjYmx4MGRtbHlkSFZoYkVOdmJuUmhhVzVsY2k1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXpaV3hsWTNSdmNuTXVkbWx5ZEhWaGJFTnZiblJoYVc1bGNpazdYSEpjYmx4MGRtbHlkSFZoYkZSaFlteGxMbU5zWVhOelRHbHpkQzVoWkdRb1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1MmFYSjBkV0ZzVkdGaWJHVXBPMXh5WEc1Y2RHWnBlR1ZrUTI5dWRHRnBibVZ5TG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NW1hWGhsWkVOdmJuUmhhVzVsY2lrN1hISmNibHgwWm1sNFpXUlVZV0pzWlM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXpaV3hsWTNSdmNuTXVabWw0WldSVVlXSnNaU2s3WEhKY2JseHlYRzVjZEdOdmJuUmhhVzVsY2k1aGNIQmxibVJEYUdsc1pDaG1hWGhsWkVOdmJuUmhhVzVsY2lrN1hISmNibHgwWm1sNFpXUkRiMjUwWVdsdVpYSXVZWEJ3Wlc1a1EyaHBiR1FvWm1sNFpXUlVZV0pzWlNrN1hISmNibHh5WEc1Y2RHTnZiblJoYVc1bGNpNWhjSEJsYm1SRGFHbHNaQ2gyYVhKMGRXRnNRMjl1ZEdGcGJtVnlLVHRjY2x4dVhIUjJhWEowZFdGc1EyOXVkR0ZwYm1WeUxtRndjR1Z1WkVOb2FXeGtLSFpwY25SMVlXeFVZV0pzWlNrN1hISmNibHh5WEc1Y2RIWnBjblIxWVd4RGIyNTBZV2x1WlhJdWMzUjViR1V1YldGNFNHVnBaMmgwSUQwZ1kyOXVabWxuTG1ScGJXVnVjMmx2Ym5NdVkyOXVkR0ZwYm1WeVNHVnBaMmgwSUNzZ0ozQjRKenRjY2x4dVhIUjJhWEowZFdGc1EyOXVkR0ZwYm1WeUxuTjBlV3hsTG1obGFXZG9kQ0E5SUdOdmJtWnBaeTVrYVcxbGJuTnBiMjV6TG1OdmJuUmhhVzVsY2tobGFXZG9kQ0FySUNkd2VDYzdYSEpjYmx4MGRtbHlkSFZoYkVOdmJuUmhhVzVsY2k1emRIbHNaUzV2ZG1WeVpteHZkeUE5SUNkelkzSnZiR3duTzF4eVhHNWNjbHh1WEhSbWFYaGxaRU52Ym5SaGFXNWxjaTV6ZEhsc1pTNXdZV1JrYVc1bklEMGdZMjl1Wm1sbkxtbHVibVZ5TG0xcGJrSjFabVpsY2tobGFXZG9kQ0FySUNkd2VDQXdKenRjY2x4dVhIUm1hWGhsWkVOdmJuUmhhVzVsY2k1emRIbHNaUzVtYkc5aGRDQTlJQ2RzWldaMEp6dGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYVc1cGRGUmhZbXhsS0dOdmJtWnBaeWtnZTF4eVhHNWNkQzh2SUVkbGJtVnlZWFJsSUhacGNuUjFZV3dnZEdGaWJHVmNjbHh1WEhSMllYSWdkbWx5ZEhWaGJGUm9aV0ZrSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEdobFlXUW5LU3hjY2x4dVhIUmNkSFpwY25SMVlXeFVZbTlrZVNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNSaWIyUjVKeWtzWEhKY2JseDBYSFIwY2tobFlXUkNkV1ptWlhJZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMGNpY3BMRnh5WEc1Y2RGeDBZMjlzZFcxdWMwNTFiV0psY2lBOUlHTnZibVpwWjFWMGFXd3VaMlYwUzJWNVNHVmhaR1Z5S0dOdmJtWnBaeWt1YkdWdVozUm9MRnh5WEc1Y2RGeDBjbTkzYzA1MWJXSmxjaUE5SUdOdmJtWnBaeTVrWVhSaFUyOTFjbU5sTG14bGJtZDBhQ3hjY2x4dVhIUmNkRzFoZUVOdmJIVnRiazUxYldKbGNpQTlJR052Ym1acFp5NXBibTVsY2k1MmFYTnBZbXhsUTI5c2RXMXVUblZ0WW1WeUlENDlJR052YkhWdGJuTk9kVzFpWlhJZ1B5QmpiMngxYlc1elRuVnRZbVZ5SURvZ1kyOXVabWxuTG1sdWJtVnlMblpwYzJsaWJHVkRiMngxYlc1T2RXMWlaWElzWEhKY2JseDBYSFJ0WVhoU2IzZE9kVzFpWlhJZ1BTQmpiMjVtYVdjdWFXNXVaWEl1ZG1semFXSnNaVkp2ZDA1MWJXSmxjaUErUFNCeWIzZHpUblZ0WW1WeUlEOGdjbTkzYzA1MWJXSmxjaUE2SUdOdmJtWnBaeTVwYm01bGNpNTJhWE5wWW14bFVtOTNUblZ0WW1WeU8xeHlYRzVjY2x4dVhIUjBja2hsWVdSQ2RXWm1aWEl1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1KMVptWmxjbEp2ZDFSdmNDazdYSEpjYmx4eVhHNWNkSFpoY2lCcExDQnFMQ0IwY2tobFlXUXNJSFJ5UW05a2VTd2dZblZtWm1WeVEyOXNkVzF1VEdWbWRDd2dZblZtWm1WeVEyOXNkVzF1VW1sbmFIUXNJR0oxWm1abGNsSnZkMEp2ZEhSdmJTd2dkR1JGYkdWdFpXNTBMQ0JqWld4c1QySnFPMXh5WEc1Y2NseHVYSFF2THlCSFpXNWxjbUYwWlNCMmFYSjBkV0ZzSUdobFlXUmxjbHh5WEc1Y2RHSjFabVpsY2tOdmJIVnRia3hsWm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMFpDY3BPMXh5WEc1Y2RHSjFabVpsY2tOdmJIVnRia3hsWm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtSjFabVpsY2tOdmJIVnRia3hsWm5RcE8xeHlYRzVjY2x4dVhIUjBja2hsWVdSQ2RXWm1aWEl1WVhCd1pXNWtRMmhwYkdRb1luVm1abVZ5UTI5c2RXMXVUR1ZtZENrN1hISmNibHh5WEc1Y2RHWnZjaUFvYVNBOUlEQTdJR2tnUENCdFlYaERiMngxYlc1T2RXMWlaWEk3SUdrckt5a2dlMXh5WEc1Y2RGeDBkR1JGYkdWdFpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25kR1FuS1R0Y2NseHVYSFJjZEhSa1JXeGxiV1Z1ZEM1emRIbHNaUzV0YVc1WGFXUjBhQ0E5SUdOdmJtWnBaeTVrYVcxbGJuTnBiMjV6TG1ObGJHeFhhV1IwYUNBcklDZHdlQ2M3WEhKY2JseDBYSFIwY2tobFlXUkNkV1ptWlhJdVlYQndaVzVrUTJocGJHUW9kR1JGYkdWdFpXNTBLVHRjY2x4dVhIUjlYSEpjYmx4eVhHNWNkR0oxWm1abGNrTnZiSFZ0YmxKcFoyaDBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25kR1FuS1R0Y2NseHVYSFJpZFdabVpYSkRiMngxYlc1U2FXZG9kQzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WW5WbVptVnlRMjlzZFcxdVVtbG5hSFFwTzF4eVhHNWNjbHh1WEhSMGNraGxZV1JDZFdabVpYSXVZWEJ3Wlc1a1EyaHBiR1FvWW5WbVptVnlRMjlzZFcxdVVtbG5hSFFwTzF4eVhHNWNjbHh1WEhSMmFYSjBkV0ZzVkdobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEhKSVpXRmtRblZtWm1WeUtUdGNjbHh1WEhKY2JseDBZMjl1Wm1sbkxtaGxZV1JsY25NdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymlob1pXRmtaWEpTYjNjc0lISnZkME52ZFc1MEtTQjdYSEpjYmx4MFhIUjJZWElnYVhOTVlYTjBVbTkzSUQwZ1kyOXVabWxuTG1sdWJtVnlMbWx1WkdWNFQyWkRaV3hzUzJWNVNHVmhaR1Z5SUQwOVBTQnliM2REYjNWdWREdGNjbHh1WEhKY2JseDBYSFIwY2tobFlXUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBjaWNwTzF4eVhHNWNkRngwZEhKSVpXRmtMbU5zWVhOelRHbHpkQzVoWkdRb1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVvWldGa1pYSlNiM2NwTzF4eVhHNWNkRngwZEhKSVpXRmtMbk4wZVd4bExtaGxhV2RvZENBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hJWldsbmFIUWdLeUFuY0hnbk8xeHlYRzVjY2x4dVhIUmNkSFJrUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JrSnlrN1hISmNibHgwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtSjFabVpsY2tOdmJIVnRia3hsWm5RcE8xeHlYRzVjY2x4dVhIUmNkSFJ5U0dWaFpDNWhjSEJsYm1SRGFHbHNaQ2gwWkVWc1pXMWxiblFwTzF4eVhHNWNjbHh1WEhSY2RHWnZjaUFvYWlBOUlEQTdJR29nUENCdFlYaERiMngxYlc1T2RXMWlaWEk3SUdvckt5a2dlMXh5WEc1Y2RGeDBYSFIwWkVWc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwWkNjcE8xeHlYRzVjZEZ4MFhIUjBaRVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbWhsWVdSbGNrTmxiR3dwTzF4eVhHNWNjbHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZEN3Z1kyVnNiRVZzWlcxbGJuUXVZM0psWVhSbFNHVmhaR1Z5UkdGMFlTaGpiMjVtYVdjc0lIUmtSV3hsYldWdWRDd2dhR1ZoWkdWeVVtOTNXMnBkTENCcGMweGhjM1JTYjNjcEtUdGNjbHh1WEhKY2JseDBYSFJjZEdsbUlDaHBjMHhoYzNSU2IzY3BJSHRjY2x4dVhIUmNkRngwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxuTnZjblJEWld4c0tUdGNjbHh1WEhKY2JseDBYSFJjZEZ4MGFXWWdLQ0ZqYjI1bWFXY3VjMjl5ZEM1bGJtRmliR1ZrSUh4OElHaGxZV1JsY2xKdmQxdHFYUzV6YjNKMFJHbHpZV0pzWldRcElIdGNjbHh1WEhSY2RGeDBYSFJjZEhSa1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWMyOXlkRVJwYzJGaWJHVmtLVHRjY2x4dVhIUmNkRngwWEhSOVhISmNibHgwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEhSeVNHVmhaQzVoY0hCbGJtUkRhR2xzWkNoMFpFVnNaVzFsYm5RcE8xeHlYRzVjZEZ4MGZWeHlYRzVjY2x4dVhIUmNkSFJrUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JrSnlrN1hISmNibHgwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtSjFabVpsY2tOdmJIVnRibEpwWjJoMEtUdGNjbHh1WEhKY2JseDBYSFIwY2tobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEdSRmJHVnRaVzUwS1R0Y2NseHVYSEpjYmx4MFhIUjJhWEowZFdGc1ZHaGxZV1F1WVhCd1pXNWtRMmhwYkdRb2RISklaV0ZrS1R0Y2NseHVYSFI5S1R0Y2NseHVYSEpjYmx4MEx5OGdSMlZ1WlhKaGRHVWdkbWx5ZEhWaGJDQm1hV3gwWlhJZ2NtOTNYSEpjYmx4MGFXWWdLR052Ym1acFp5NW1hV3gwWlhJdVpXNWhZbXhsWkNrZ2UxeHlYRzVjZEZ4MGRISklaV0ZrSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEhJbktUdGNjbHh1WEhSY2RIUnlTR1ZoWkM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVptbHNkR1Z5VW05M0tUdGNjbHh1WEhSY2RIUnlTR1ZoWkM1emRIbHNaUzVvWldsbmFIUWdQU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1NHVnBaMmgwSUNzZ0ozQjRKenRjY2x4dVhISmNibHgwWEhSMFpFVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMFpDY3BPMXh5WEc1Y2RGeDBkR1JGYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVpZFdabVpYSkRiMngxYlc1TVpXWjBLVHRjY2x4dVhISmNibHgwWEhSMGNraGxZV1F1WVhCd1pXNWtRMmhwYkdRb2RHUkZiR1Z0Wlc1MEtUdGNjbHh1WEhKY2JseDBYSFJtYjNJZ0tHb2dQU0F3T3lCcUlEd2diV0Y0UTI5c2RXMXVUblZ0WW1WeU95QnFLeXNwSUh0Y2NseHVYSFJjZEZ4MFkyVnNiRTlpYWlBOUlHTnZibVpwWjFWMGFXd3VaMlYwUzJWNVNHVmhaR1Z5S0dOdmJtWnBaeWxiYWwwN1hISmNibHh5WEc1Y2RGeDBYSFIwWkVWc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwWkNjcE8xeHlYRzVjZEZ4MFhIUjBaRVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbVpwYkhSbGNrTmxiR3dwTzF4eVhHNWNjbHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZEN3Z1kyVnNiRVZzWlcxbGJuUXVZM0psWVhSbFJtbHNkR1Z5UkdGMFlTaGpiMjVtYVdjc0lIUmtSV3hsYldWdWRDd2dZMlZzYkU5aWFpd2dlMzBwS1R0Y2NseHVYSEpjYmx4MFhIUmNkR2xtSUNoalpXeHNUMkpxTG1acGJIUmxja1JwYzJGaWJHVmtLU0I3WEhKY2JseDBYSFJjZEZ4MGRHUkZiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWhaR1FvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKRWFYTmhZbXhsWkNrN1hISmNibHgwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEhSeVNHVmhaQzVoY0hCbGJtUkRhR2xzWkNoMFpFVnNaVzFsYm5RcE8xeHlYRzVjZEZ4MGZWeHlYRzVjY2x4dVhIUmNkSFJrUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JrSnlrN1hISmNibHgwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtSjFabVpsY2tOdmJIVnRibEpwWjJoMEtUdGNjbHh1WEhKY2JseDBYSFIwY2tobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEdSRmJHVnRaVzUwS1R0Y2NseHVYSEpjYmx4MFhIUjJhWEowZFdGc1ZHaGxZV1F1WVhCd1pXNWtRMmhwYkdRb2RISklaV0ZrS1R0Y2NseHVYSFI5WEhKY2JseHlYRzVjZEM4dklFZGxibVZ5WVhSbElIWnBjblIxWVd3Z1ltOWtlVnh5WEc1Y2RHWnZjaUFvYVNBOUlEQTdJR2tnUENCdFlYaFNiM2RPZFcxaVpYSTdJR2tyS3lrZ2UxeHlYRzVjZEZ4MGRISkNiMlI1SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEhJbktUdGNjbHh1WEhSY2RIUnlRbTlrZVM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVpHRjBZVkp2ZHlrN1hISmNibHgwWEhSMGNrSnZaSGt1YzNSNWJHVXVhR1ZwWjJoMElEMGdZMjl1Wm1sbkxtUnBiV1Z1YzJsdmJuTXVZMlZzYkVobGFXZG9kQ0FySUNkd2VDYzdYSEpjYmx4eVhHNWNkRngwZEdSRmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEdRbktUdGNjbHh1WEhSY2RIUmtSV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVZV1JrS0dOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVZblZtWm1WeVEyOXNkVzF1VEdWbWRDazdYSEpjYmx4eVhHNWNkRngwZEhKQ2IyUjVMbUZ3Y0dWdVpFTm9hV3hrS0hSa1JXeGxiV1Z1ZENrN1hISmNibHh5WEc1Y2RGeDBabTl5SUNocUlEMGdNRHNnYWlBOElHMWhlRU52YkhWdGJrNTFiV0psY2pzZ2Fpc3JLU0I3WEhKY2JseDBYSFJjZEhSa1JXeGxiV1Z1ZENBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNSa0p5azdYSEpjYmx4MFhIUmNkSFJrUld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WkdGMFlVTmxiR3dwTzF4eVhHNWNjbHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZENrN1hISmNibHh5WEc1Y2RGeDBYSFIwY2tKdlpIa3VZWEJ3Wlc1a1EyaHBiR1FvZEdSRmJHVnRaVzUwS1R0Y2NseHVYSFJjZEgxY2NseHVYSEpjYmx4MFhIUjBaRVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBaQ2NwTzF4eVhHNWNkRngwZEdSRmJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1aWRXWm1aWEpEYjJ4MWJXNVNhV2RvZENrN1hISmNibHh5WEc1Y2RGeDBkSEpDYjJSNUxtRndjR1Z1WkVOb2FXeGtLSFJrUld4bGJXVnVkQ2s3WEhKY2JseHlYRzVjZEZ4MGRtbHlkSFZoYkZSaWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0hSeVFtOWtlU2s3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFJpZFdabVpYSlNiM2RDYjNSMGIyMGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBjaWNwTzF4eVhHNWNkR0oxWm1abGNsSnZkMEp2ZEhSdmJTNWpiR0Z6YzB4cGMzUXVZV1JrS0dOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVZblZtWm1WeVVtOTNRbTkwZEc5dEtUdGNjbHh1WEhKY2JseDBkbWx5ZEhWaGJGUmliMlI1TG1Gd2NHVnVaRU5vYVd4a0tHSjFabVpsY2xKdmQwSnZkSFJ2YlNrN1hISmNibHh5WEc1Y2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk0bklDc2dZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NTJhWEowZFdGc1ZHRmliR1VwTG1Gd2NHVnVaRU5vYVd4a0tIWnBjblIxWVd4VWFHVmhaQ2s3WEhKY2JseDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxpY2dLeUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMblpwY25SMVlXeFVZV0pzWlNrdVlYQndaVzVrUTJocGJHUW9kbWx5ZEhWaGJGUmliMlI1S1R0Y2NseHVYSEpjYmx4MFkyOXVabWxuTG1sdWJtVnlMbUoxWm1abGNreGxablFnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVluVm1abVZ5UTI5c2RXMXVUR1ZtZENrN1hISmNibHgwWTI5dVptbG5MbWx1Ym1WeUxtSjFabVpsY2xKcFoyaDBJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1KMVptWmxja052YkhWdGJsSnBaMmgwS1R0Y2NseHVYSFJqYjI1bWFXY3VhVzV1WlhJdVluVm1abVZ5Vkc5d0lEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbUoxWm1abGNsSnZkMVJ2Y0NrN1hISmNibHgwWTI5dVptbG5MbWx1Ym1WeUxtSjFabVpsY2tKdmRIUnZiU0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1aWRXWm1aWEpTYjNkQ2IzUjBiMjBwTzF4eVhHNWNjbHh1WEhRdkx5QkhaVzVsY21GMFpTQm1hWGhsWkNCMFlXSnNaVnh5WEc1Y2NseHVYSFJwWmlBb1kyOXVabWxuTG1acGVHVmtTR1ZoWkdWeWN5NXNaVzVuZEdnZ1BUMDlJREFnZkh3Z1kyOXVabWxuTG1acGVHVmtTR1ZoWkdWeWMxc3dYUzVzWlc1bmRHZ2dQVDA5SURBcElIdGNjbHh1WEhSY2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk0bklDc2dZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NW1hWGhsWkZSaFlteGxLUzV5WlcxdmRtVW9LVHRjY2x4dVhISmNibHgwWEhSeVpYUjFjbTQ3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFIyWVhJZ1ptbDRaV1JVYUdWaFpDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUm9aV0ZrSnlrc1hISmNibHgwWEhSbWFYaGxaRlJpYjJSNUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmRHSnZaSGtuS1R0Y2NseHVYSEpjYmx4MEx5OGdSMlZ1WlhKaGRHVWdabWw0WldRZ2FHVmhaR1Z5WEhKY2JseHlYRzVjZEdadmNpQW9hU0E5SURBN0lHa2dQQ0JqYjI1bWFXY3VabWw0WldSSVpXRmtaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmx4MFhIUjBja2hsWVdRZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMGNpY3BPMXh5WEc1Y2RGeDBkSEpJWldGa0xtTnNZWE56VEdsemRDNWhaR1FvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW9aV0ZrWlhKU2IzY3BPMXh5WEc1Y2RGeDBkSEpJWldGa0xuTjBlV3hsTG1obGFXZG9kQ0E5SUdOdmJtWnBaeTVrYVcxbGJuTnBiMjV6TG1ObGJHeElaV2xuYUhRZ0t5QW5jSGduTzF4eVhHNWNjbHh1WEhSY2RHWnZjaUFvYWlBOUlEQTdJR29nUENCamIyNW1hV2N1Wm1sNFpXUklaV0ZrWlhKelcybGRMbXhsYm1kMGFEc2dhaXNyS1NCN1hISmNibHgwWEhSY2RIWmhjaUJwYzB4aGMzUlNiM2NnUFNCcUlEMDlQU0JqYjI1bWFXY3VabWw0WldSSVpXRmtaWEp6VzJsZExteGxibWQwYUNBdElERTdYSEpjYmx4eVhHNWNkRngwWEhSMFpFVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMFpDY3BPMXh5WEc1Y2RGeDBYSFIwWkVWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1obFlXUmxja05sYkd3cE8xeHlYRzVjY2x4dVhIUmNkRngwWTJWc2JFVnNaVzFsYm5RdVkzSmxZWFJsUkdGMFlVTnZiblJoYVc1bGNpaGpiMjVtYVdjc0lIUmtSV3hsYldWdWRDd2dZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxTR1ZoWkdWeVJHRjBZU2hqYjI1bWFXY3NJSFJrUld4bGJXVnVkQ3dnWTI5dVptbG5MbVpwZUdWa1NHVmhaR1Z5YzF0cFhWdHFYU3dnYVhOTVlYTjBVbTkzS1NrN1hISmNibHh5WEc1Y2RGeDBYSFJwWmlBb2FYTk1ZWE4wVW05M0tTQjdYSEpjYmx4MFhIUmNkRngwZEdSRmJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1emIzSjBRMlZzYkNrN1hISmNibHh5WEc1Y2RGeDBYSFJjZEdsbUlDZ2hZMjl1Wm1sbkxuTnZjblF1Wlc1aFlteGxaQ0I4ZkNCamIyNW1hV2N1Wm1sNFpXUklaV0ZrWlhKelcybGRXMnBkTG5OdmNuUkVhWE5oWW14bFpDa2dlMXh5WEc1Y2RGeDBYSFJjZEZ4MGRHUkZiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWhaR1FvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NXpiM0owUkdsellXSnNaV1FwTzF4eVhHNWNkRngwWEhSY2RIMWNjbHh1WEhSY2RGeDBmVnh5WEc1Y2NseHVYSFJjZEZ4MGRISklaV0ZrTG1Gd2NHVnVaRU5vYVd4a0tIUmtSV3hsYldWdWRDazdYSEpjYmx4MFhIUjlYSEpjYmx4eVhHNWNkRngwWm1sNFpXUlVhR1ZoWkM1aGNIQmxibVJEYUdsc1pDaDBja2hsWVdRcE8xeHlYRzVjZEgxY2NseHVYSEpjYmx4MEx5OGdSMlZ1WlhKaGRHVWdabWw0WldRZ1ptbHNkR1Z5SUhKdmQxeHlYRzVjY2x4dVhIUnBaaUFvWTI5dVptbG5MbVpwYkhSbGNpNWxibUZpYkdWa0lDWW1YSEpjYmx4MFhIUmpiMjVtYVdjdVptbDRaV1JJWldGa1pYSnpMbXhsYm1kMGFDQStJREFnSmlaY2NseHVYSFJjZEdOdmJtWnBaeTVtYVhobFpFaGxZV1JsY25OYlkyOXVabWxuTG1sdWJtVnlMbWx1WkdWNFQyWkRaV3hzUzJWNVNHVmhaR1Z5WFM1c1pXNW5kR2dnUGlBd0tTQjdYSEpjYmx4eVhHNWNkRngwZEhKSVpXRmtJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25kSEluS1R0Y2NseHVYSFJjZEhSeVNHVmhaQzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11Wm1sc2RHVnlVbTkzS1R0Y2NseHVYSFJjZEhSeVNHVmhaQzV6ZEhsc1pTNW9aV2xuYUhRZ1BTQmpiMjVtYVdjdVpHbHRaVzV6YVc5dWN5NWpaV3hzU0dWcFoyaDBJQ3NnSjNCNEp6dGNjbHh1WEhKY2JseDBYSFJtYjNJZ0tHb2dQU0F3T3lCcUlEd2dZMjl1Wm1sbkxtWnBlR1ZrU0dWaFpHVnljMXRqYjI1bWFXY3VhVzV1WlhJdWFXNWtaWGhQWmtObGJHeExaWGxJWldGa1pYSmRMbXhsYm1kMGFEc2dhaXNyS1NCN1hISmNibHgwWEhSY2RHTmxiR3hQWW1vZ1BTQmpiMjVtYVdkVmRHbHNMbWRsZEVacGVHVmtTMlY1U0dWaFpHVnlLR052Ym1acFp5bGJhbDA3WEhKY2JseHlYRzVjZEZ4MFhIUjBaRVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBaQ2NwTzF4eVhHNWNkRngwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tObGJHd3BPMXh5WEc1Y2RGeDBYSFIwWkVWc1pXMWxiblF1YzNSNWJHVXViV2x1VjJsa2RHZ2dQU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1YybGtkR2dnS3lBbmNIZ25PMXh5WEc1Y2NseHVYSFJjZEZ4MFkyVnNiRVZzWlcxbGJuUXVZM0psWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJSFJrUld4bGJXVnVkQ3dnWTJWc2JFVnNaVzFsYm5RdVkzSmxZWFJsUm1sc2RHVnlSR0YwWVNoamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZEN3Z1kyVnNiRTlpYWl3Z2UzMHBLVHRjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2hqWld4c1QySnFMbVpwYkhSbGNrUnBjMkZpYkdWa0tTQjdYSEpjYmx4MFhIUmNkRngwZEdSRmJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1bWFXeDBaWEpFYVhOaFlteGxaQ2s3WEhKY2JseDBYSFJjZEgxY2NseHVYSEpjYmx4MFhIUmNkSFJ5U0dWaFpDNWhjSEJsYm1SRGFHbHNaQ2gwWkVWc1pXMWxiblFwTzF4eVhHNWNkRngwZlZ4eVhHNWNjbHh1WEhSY2RHWnBlR1ZrVkdobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEhKSVpXRmtLVHRjY2x4dVhIUjlYSEpjYmx4eVhHNWNkQzh2SUVkbGJtVnlZWFJsSUdacGVHVmtJR0p2WkhsY2NseHVYSEpjYmx4MFptOXlJQ2hwSUQwZ01Ec2dhU0E4SUcxaGVGSnZkMDUxYldKbGNqc2dhU3NyS1NCN1hISmNibHgwWEhSMGNrSnZaSGtnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwY2ljcE8xeHlYRzVjZEZ4MGRISkNiMlI1TG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1a1lYUmhVbTkzS1R0Y2NseHVYSFJjZEhSeVFtOWtlUzV6ZEhsc1pTNW9aV2xuYUhRZ1BTQmpiMjVtYVdjdVpHbHRaVzV6YVc5dWN5NWpaV3hzU0dWcFoyaDBJQ3NnSjNCNEp6dGNjbHh1WEhKY2JseDBYSFJtYjNJZ0tHb2dQU0F3T3lCcUlEd2dZMjl1Wm1sbkxtWnBlR1ZrU0dWaFpHVnljMXRqYjI1bWFXY3VhVzV1WlhJdWFXNWtaWGhQWmtObGJHeExaWGxJWldGa1pYSmRMbXhsYm1kMGFEc2dhaXNyS1NCN1hISmNibHgwWEhSY2RIUmtSV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUmtKeWs3WEhKY2JseDBYSFJjZEhSa1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVpHRjBZVU5sYkd3cE8xeHlYRzVjY2x4dVhIUmNkRngwWTJWc2JFVnNaVzFsYm5RdVkzSmxZWFJsUkdGMFlVTnZiblJoYVc1bGNpaGpiMjVtYVdjc0lIUmtSV3hsYldWdWRDazdYSEpjYmx4eVhHNWNkRngwWEhSMGNrSnZaSGt1WVhCd1pXNWtRMmhwYkdRb2RHUkZiR1Z0Wlc1MEtUdGNjbHh1WEhSY2RIMWNjbHh1WEhKY2JseDBYSFJtYVhobFpGUmliMlI1TG1Gd2NHVnVaRU5vYVd4a0tIUnlRbTlrZVNrN1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdVptbDRaV1JVWVdKc1pTa3VZWEJ3Wlc1a1EyaHBiR1FvWm1sNFpXUlVhR1ZoWkNrN1hISmNibHgwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MaWNnS3lCamIyNW1hV2N1YzJWc1pXTjBiM0p6TG1acGVHVmtWR0ZpYkdVcExtRndjR1Z1WkVOb2FXeGtLR1pwZUdWa1ZHSnZaSGtwTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQm5aWFJFWldaaGRXeDBUM0IwYVc5dWN5Z3BJSHRjY2x4dVhIUnlaWFIxY200Z1pHRjBZVlYwYVd3dVkyeHZibVZQWW1wbFkzUW9ZMjl1Wm1sbmRYSmhkR2x2Ymk1RVJVWkJWVXhVVXlrN1hISmNibjFjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh5WEc1Y2RHZGxibVZ5WVhSbFZHRmliR1U2SUdkbGJtVnlZWFJsVkdGaWJHVXNYSEpjYmx4MFpHVnpkSEp2ZVZSaFlteGxPaUJrWlhOMGNtOTVWR0ZpYkdVc1hISmNibHgwWjJWMFJHVm1ZWFZzZEU5d2RHbHZibk02SUdkbGRFUmxabUYxYkhSUGNIUnBiMjV6WEhKY2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHlYRzVjY2x4dWRtRnlJR052Ym1acFoxVjBhV3dnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzY3k5amIyNW1hV2QxY21GMGFXOXVKeWtzWEhKY2JseDBaRzl0VFc5a2RXeGxJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpHOXRKeWs3WEhKY2JseHlYRzUyWVhJZ1JFVk1RVmtnUFNBeU1EQTdYSEpjYmx4eVhHNTJZWElnYVhORmRtVnVkRVJsYkdGNVpXUWdQU0JtWVd4elpUdGNjbHh1WEhKY2JtWjFibU4wYVc5dUlISmxaSEpoZDFSaFlteGxLR052Ym1acFp5a2dlMXh5WEc1Y2RIWmhjaUJ3Y21WMlVtOTNUblZ0WW1WeUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG5acGMybGliR1ZTYjNkT2RXMWlaWElzWEhKY2JseDBYSFJ3Y21WMlEyOXNkVzF1VG5WdFltVnlJRDBnWTI5dVptbG5MbWx1Ym1WeUxuWnBjMmxpYkdWRGIyeDFiVzVPZFcxaVpYSTdYSEpjYmx4eVhHNWNkR052Ym1acFp5NWthVzFsYm5OcGIyNXpMbU52Ym5SaGFXNWxja2hsYVdkb2RDQTlJR052Ym1acFoxVjBhV3d1WTJGc1kzVnNZWFJsVm1seWRIVmhiRU52Ym5SaGFXNWxja2hsYVdkb2RDaGpiMjVtYVdjc0lHTnZibVpwWjFWMGFXd3VaMlYwUkdWbVlYVnNkRU52Ym5SaGFXNWxja2hsYVdkb2RDaGpiMjVtYVdjcEtUdGNjbHh1WEhSamIyNW1hV2N1YVc1dVpYSXVkbWx6YVdKc1pWSnZkMDUxYldKbGNpQTlJR052Ym1acFoxVjBhV3d1WjJWMFZtbHphV0pzWlZKdmQwNTFiV0psY2loamIyNW1hV2NwTzF4eVhHNWNkR052Ym1acFp5NXBibTVsY2k1MmFYTnBZbXhsUTI5c2RXMXVUblZ0WW1WeUlEMGdZMjl1Wm1sblZYUnBiQzVuWlhSV2FYTnBZbXhsUTI5c2RXMXVUblZ0WW1WeUtHTnZibVpwWnlrN1hISmNibHgwWTI5dVptbG5MbWx1Ym1WeUxuUmhZbXhsVDJabWMyVjBWMmxrZEdnZ1BTQmpiMjVtYVdkVmRHbHNMbWRsZEZSaFlteGxUMlptYzJWMFYybGtkR2dvWTI5dVptbG5LVHRjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1ZEdGaWJHVlBabVp6WlhSSVpXbG5hSFFnUFNCamIyNW1hV2RWZEdsc0xtZGxkRlJoWW14bFQyWm1jMlYwU0dWcFoyaDBLR052Ym1acFp5azdYSEpjYmx4eVhHNWNkSFpoY2lCcExDQnNZWE4wVW05M0xDQnNZWE4wUTI5c2RXMXVjenRjY2x4dVhISmNibHgwYVdZZ0tIQnlaWFpTYjNkT2RXMWlaWElnUFQwOUlHTnZibVpwWnk1cGJtNWxjaTUyYVhOcFlteGxVbTkzVG5WdFltVnlJQ1ltWEhKY2JseDBYSFJ3Y21WMlEyOXNkVzF1VG5WdFltVnlJRDA5UFNCamIyNW1hV2N1YVc1dVpYSXVkbWx6YVdKc1pVTnZiSFZ0Yms1MWJXSmxjaWtnZTF4eVhHNWNjbHh1WEhSY2RISmxkSFZ5Ymp0Y2NseHVYSFI5WEhKY2JseHlYRzVjZEdsbUlDaGpiMjVtYVdjdWFXNXVaWEl1ZG1semFXSnNaVkp2ZDA1MWJXSmxjaUE4SURFcElIdGNjbHh1WEhSY2RHTnZibVpwWnk1cGJtNWxjaTUyYVhOcFlteGxVbTkzVG5WdFltVnlJRDBnTVR0Y2NseHVYSEpjYmx4MFhIUnlaWFIxY200N1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSMllYSWdkbWx5ZEhWaGJFTnZiblJoYVc1bGNsTmxiR1ZqZEc5eUlEMGdKeU1uSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTUxYm1seGRXVkpaQ0FySUNjZ0xpY2dLeUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMblpwY25SMVlXeERiMjUwWVdsdVpYSXNYSEpjYmx4MFhIUnNZWE4wUm1sNFpXUlNiM2RUWld4bFkzUnZjaUE5SUNjakp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWRXNXBjWFZsU1dRZ0t5QW5JQzRuSUNzZ1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1bWFYaGxaRlJoWW14bElDc2dKeUF1WkdGMFlTMXliM2M2YkdGemRDMXZaaTEwZVhCbEp5eGNjbHh1WEhSY2RHeGhjM1JXYVhKMGRXRnNVbTkzVTJWc1pXTjBiM0lnUFNBbkl5Y2dLeUJqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxuVnVhWEYxWlVsa0lDc2dKeUF1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdWRtbHlkSFZoYkZSaFlteGxJQ3NnSnlBdVpHRjBZUzF5YjNjNmJuUm9MV3hoYzNRdGIyWXRkSGx3WlNneUtTY3NYSEpjYmx4MFhIUnNZWE4wVm1seWRIVmhiRU52YkhWdGJpQTlJQ2NqSnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11ZFc1cGNYVmxTV1FnS3lBbklDNG5JQ3NnWTI5dVptbG5Mbk5sYkdWamRHOXljeTUyYVhKMGRXRnNWR0ZpYkdVZ0t5QW5JSFJrT201MGFDMXNZWE4wTFc5bUxYUjVjR1VvTWlrbk8xeHlYRzVjY2x4dVhIUjJZWElnZG1seWRIVmhiRU52Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9kbWx5ZEhWaGJFTnZiblJoYVc1bGNsTmxiR1ZqZEc5eUtUdGNjbHh1WEhKY2JseDBkbWx5ZEhWaGJFTnZiblJoYVc1bGNpNXpkSGxzWlM1dFlYaElaV2xuYUhRZ1BTQmpiMjVtYVdjdVpHbHRaVzV6YVc5dWN5NWpiMjUwWVdsdVpYSklaV2xuYUhRZ0t5QW5jSGduTzF4eVhHNWNkSFpwY25SMVlXeERiMjUwWVdsdVpYSXVjM1I1YkdVdWFHVnBaMmgwSUQwZ1kyOXVabWxuTG1ScGJXVnVjMmx2Ym5NdVkyOXVkR0ZwYm1WeVNHVnBaMmgwSUNzZ0ozQjRKenRjY2x4dVhISmNibHgwYVdZZ0tIQnlaWFpTYjNkT2RXMWlaWElnUENCamIyNW1hV2N1YVc1dVpYSXVkbWx6YVdKc1pWSnZkMDUxYldKbGNpa2dleUF2THlCSVlTQjB3N1ppWWlCemIzSWdiR1YwZEZ4eVhHNWNkRngwWm05eUlDaHBJRDBnTURzZ2FTQThJR052Ym1acFp5NXBibTVsY2k1MmFYTnBZbXhsVW05M1RuVnRZbVZ5SUMwZ2NISmxkbEp2ZDA1MWJXSmxjanNnYVNzcktTQjdYSEpjYmx4MFhIUmNkR3hoYzNSU2IzY2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHeGhjM1JHYVhobFpGSnZkMU5sYkdWamRHOXlLVHRjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2hzWVhOMFVtOTNJQ0U5UFNCdWRXeHNLU0I3WEhKY2JseDBYSFJjZEZ4MGJHRnpkRkp2ZHk1d1lYSmxiblJPYjJSbExtbHVjMlZ5ZEVKbFptOXlaU2hzWVhOMFVtOTNMbU5zYjI1bFRtOWtaU2gwY25WbEtTd2diR0Z6ZEZKdmR5azdYSEpjYmx4MFhIUmNkSDFjY2x4dVhISmNibHgwWEhSY2RHeGhjM1JTYjNjZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0d4aGMzUldhWEowZFdGc1VtOTNVMlZzWldOMGIzSXBPMXh5WEc1Y2RGeDBYSFJzWVhOMFVtOTNMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtHeGhjM1JTYjNjdVkyeHZibVZPYjJSbEtIUnlkV1VwTENCc1lYTjBVbTkzS1R0Y2NseHVYSFJjZEgxY2NseHVYSFI5SUdWc2MyVWdhV1lnS0hCeVpYWlNiM2RPZFcxaVpYSWdQaUJqYjI1bWFXY3VhVzV1WlhJdWRtbHphV0pzWlZKdmQwNTFiV0psY2lrZ2V5QXZMeUJJWVNCclpYWmxjMlZpWWlCemIzSWdiR1YwZEZ4eVhHNWNkRngwWm05eUlDaHBJRDBnTURzZ2FTQThJSEJ5WlhaU2IzZE9kVzFpWlhJZ0xTQmpiMjVtYVdjdWFXNXVaWEl1ZG1semFXSnNaVkp2ZDA1MWJXSmxjanNnYVNzcktTQjdYSEpjYmx4MFhIUmNkR3hoYzNSU2IzY2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHeGhjM1JHYVhobFpGSnZkMU5sYkdWamRHOXlLVHRjY2x4dVhISmNibHgwWEhSY2RHbG1JQ2hzWVhOMFVtOTNJQ0U5UFNCdWRXeHNLU0I3WEhKY2JseDBYSFJjZEZ4MGJHRnpkRkp2ZHk1eVpXMXZkbVVvS1R0Y2NseHVYSFJjZEZ4MGZWeHlYRzVjY2x4dVhIUmNkRngwYkdGemRGSnZkeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9iR0Z6ZEZacGNuUjFZV3hTYjNkVFpXeGxZM1J2Y2lrN1hISmNibHgwWEhSY2RHeGhjM1JTYjNjdWNtVnRiM1psS0NrN1hISmNibHgwWEhSOVhISmNibHgwZlZ4eVhHNWNjbHh1WEhScFppQW9jSEpsZGtOdmJIVnRiazUxYldKbGNpQThJR052Ym1acFp5NXBibTVsY2k1MmFYTnBZbXhsUTI5c2RXMXVUblZ0WW1WeUtTQjdJQzh2SUVoaElIVER0bUppSUc5emVteHZjQ0JzWlhSMFhISmNibHgwWEhSbWIzSWdLR2tnUFNBd095QnBJRHdnWTI5dVptbG5MbWx1Ym1WeUxuWnBjMmxpYkdWRGIyeDFiVzVPZFcxaVpYSWdMU0J3Y21WMlEyOXNkVzF1VG5WdFltVnlPeUJwS3lzcElIdGNjbHh1WEhSY2RGeDBiR0Z6ZEVOdmJIVnRibk1nUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0d4aGMzUldhWEowZFdGc1EyOXNkVzF1S1R0Y2NseHVYSFJjZEZ4MGJHRnpkRU52YkhWdGJuTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaGpiMngxYlc0cElIdGNjbHh1WEhSY2RGeDBYSFJqYjJ4MWJXNHVjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb1kyOXNkVzF1TG1Oc2IyNWxUbTlrWlNoMGNuVmxLU3dnWTI5c2RXMXVLVHRjY2x4dVhIUmNkRngwZlNrN1hISmNibHgwWEhSOVhISmNibHgwZlNCbGJITmxJR2xtSUNod2NtVjJRMjlzZFcxdVRuVnRZbVZ5SUQ0Z1kyOXVabWxuTG1sdWJtVnlMblpwYzJsaWJHVkRiMngxYlc1T2RXMWlaWElwSUhzZ0x5OGdTR0VnYTJWMlpYTmxZbUlnYjNONmJHOXdJR3hsZEhSY2NseHVYSFJjZEdadmNpQW9hU0E5SURBN0lHa2dQQ0J3Y21WMlEyOXNkVzF1VG5WdFltVnlJQzBnWTI5dVptbG5MbWx1Ym1WeUxuWnBjMmxpYkdWRGIyeDFiVzVPZFcxaVpYSTdJR2tyS3lrZ2UxeHlYRzVjZEZ4MFhIUnNZWE4wUTI5c2RXMXVjeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvYkdGemRGWnBjblIxWVd4RGIyeDFiVzRwTzF4eVhHNWNkRngwWEhSc1lYTjBRMjlzZFcxdWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHTnZiSFZ0YmlrZ2UxeHlYRzVjZEZ4MFhIUmNkR052YkhWdGJpNXlaVzF2ZG1Vb0tUdGNjbHh1WEhSY2RGeDBmU2s3WEhKY2JseDBYSFI5WEhKY2JseDBmVnh5WEc1Y2NseHVYSFJqYjI1bWFXY3VhVzV1WlhJdVluVm1abVZ5VEdWbWRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVpZFdabVpYSkRiMngxYlc1TVpXWjBLVHRjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1WW5WbVptVnlVbWxuYUhRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3VKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVZblZtWm1WeVEyOXNkVzF1VW1sbmFIUXBPMXh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVpZFdabVpYSlViM0FnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVluVm1abVZ5VW05M1ZHOXdLVHRjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1WW5WbVptVnlRbTkwZEc5dElEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbUoxWm1abGNsSnZkMEp2ZEhSdmJTazdYSEpjYmx4eVhHNWNkR1J2YlUxdlpIVnNaUzUxY0dSaGRHVkNkV1ptWlhKektHTnZibVpwWnlrN1hISmNibHgwWkc5dFRXOWtkV3hsTG5Wd1pHRjBaVlJoWW14bEtHTnZibVpwWnlrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSEpsYzJsNlpVVjJaVzUwU0dGdVpHeGxjaWhqYjI1bWFXY3BJSHRjY2x4dVhIUnBaaUFvSVdselJYWmxiblJFWld4aGVXVmtLU0I3WEhKY2JseDBYSFJwYzBWMlpXNTBSR1ZzWVhsbFpDQTlJSFJ5ZFdVN1hISmNibHh5WEc1Y2RGeDBkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LU0I3WEhKY2JseDBYSFJjZEdselJYWmxiblJFWld4aGVXVmtJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNWNkRngwWEhSeVpXUnlZWGRVWVdKc1pTaGpiMjVtYVdjcE8xeHlYRzVjZEZ4MGZTd2dSRVZNUVZrcE8xeHlYRzVjZEgxY2NseHVmVnh5WEc1Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYSEpjYmx4MGNtVnphWHBsUlhabGJuUklZVzVrYkdWeU9pQnlaWE5wZW1WRmRtVnVkRWhoYm1Sc1pYSmNjbHh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEhKY2JseHlYRzUyWVhJZ1pHOXRUVzlrZFd4bElDQTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12Wkc5dEp5a3NYSEpjYmx4MFkyOXVabWxuVlhScGJDQTlJSEpsY1hWcGNtVW9KeTR1TDNWMGFXeHpMMk52Ym1acFozVnlZWFJwYjI0bktTeGNjbHh1WEhSa1lYUmhWWFJwYkNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZaR0YwWVNjcE8xeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2MyOXlkRUo1UTI5c2RXMXVLR052Ym1acFp5d2dZMjlzZFcxdUtTQjdYSEpjYmx4MGRtRnlJR0YwZEhKcFluVjBaU0E5SUdOdmJIVnRiaTVuWlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0WVhSMGNtbGlkWFJsSnlrc1hISmNibHgwWEhSb1pXRmtaWEpQWW1vZ1BTQmpiMjVtYVdkVmRHbHNMbWRsZEVobFlXUmxjazlpYW1WamRDaGpiMjVtYVdjc0lHRjBkSEpwWW5WMFpTa3NYSEpjYmx4MFhIUmthWEpsWTNScGIyNGdQU0FuZFhBbk8xeHlYRzVjY2x4dVhIUnBaaUFvWTI5dVptbG5MbWx1Ym1WeUxuTnZjblF1WVhSMGNtbGlkWFJsSUQwOVBTQmhkSFJ5YVdKMWRHVWdKaVpjY2x4dVhIUmNkR052Ym1acFp5NXBibTVsY2k1emIzSjBMbVJwY21WamRHbHZiaUE5UFQwZ0ozVndKeWtnZTF4eVhHNWNjbHh1WEhSY2RHUnBjbVZqZEdsdmJpQTlJQ2RrYjNkdUp6dGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTV6YjNKMExtUnBjbVZqZEdsdmJpQTlJR1JwY21WamRHbHZianRjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1YzI5eWRDNWhkSFJ5YVdKMWRHVWdQU0JoZEhSeWFXSjFkR1U3WEhKY2JseDBZMjl1Wm1sbkxtbHVibVZ5TG5OdmNuUXVaR0YwWVZSNWNHVWdQU0JvWldGa1pYSlBZbW91WkdGMFlWUjVjR1U3WEhKY2JseHlYRzVjZEhOdmNuUW9ZMjl1Wm1sbktUdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYzI5eWRDaGpiMjVtYVdjc0lIVndaR0YwWlZSaFlteGxLU0I3WEhKY2JseDBkWEJrWVhSbFZHRmliR1VnUFNCMWNHUmhkR1ZVWVdKc1pTQWhQVDBnWm1Gc2MyVTdYSEpjYmx4eVhHNWNkR052Ym1acFp5NWtZWFJoVTI5MWNtTmxMbk52Y25Rb1puVnVZM1JwYjI0b1lTd2dZaWtnZTF4eVhHNWNkRngwYVdZZ0tHTnZibVpwWnk1emIzSjBMbU4xYzNSdmJWTnZjblFnSVQwOUlHNTFiR3dwSUh0Y2NseHVYSFJjZEZ4MGNtVjBkWEp1SUdOdmJtWnBaeTV6YjNKMExtTjFjM1J2YlZOdmNuUW9ZU3dnWWl3Z2UxeHlYRzVjZEZ4MFhIUmNkR0YwZEhKcFluVjBaVG9nWTI5dVptbG5MbWx1Ym1WeUxuTnZjblF1WVhSMGNtbGlkWFJsTEZ4eVhHNWNkRngwWEhSY2RHUnBjbVZqZEdsdmJqb2dZMjl1Wm1sbkxtbHVibVZ5TG5OdmNuUXVaR2x5WldOMGFXOXVMRnh5WEc1Y2RGeDBYSFJjZEdSaGRHRlVlWEJsT2lCamIyNW1hV2N1YVc1dVpYSXVjMjl5ZEM1a1lYUmhWSGx3WlN4Y2NseHVYSFJjZEZ4MFhIUmxaR2wwWldSV1lXeDFaWE02SUdOdmJtWnBaeTVwYm01bGNpNWxaR2wwWldSV1lXeDFaWE1zWEhKY2JseDBYSFJjZEZ4MGRXNXBjWFZsVW05M1MyVjVPaUJqYjI1bWFXY3VkVzVwY1hWbFVtOTNTMlY1WEhKY2JseDBYSFJjZEgwcE8xeHlYRzVjZEZ4MGZWeHlYRzVjY2x4dVhIUmNkSFpoY2lCaGRIUnlhV0oxZEdVZ1BTQmpiMjVtYVdjdWFXNXVaWEl1YzI5eWRDNWhkSFJ5YVdKMWRHVWdmSHdnWTI5dVptbG5Mbk52Y25RdVpHVm1ZWFZzZEN4Y2NseHVYSFJjZEZ4MFpHbHlaV04wYVc5dUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG5OdmNuUXVaR2x5WldOMGFXOXVJSHg4SUNka2IzZHVKeXhjY2x4dVhIUmNkRngwWkdGMFlWUjVjR1VnUFNCamIyNW1hV2N1YVc1dVpYSXVjMjl5ZEM1a1lYUmhWSGx3WlNCOGZDQm5aWFJUYjNKMFZIbHdaU2hqYjI1bWFXY3NJR052Ym1acFp5NXpiM0owTG1SbFptRjFiSFFwTzF4eVhHNWNjbHh1WEhSY2RISmxkSFZ5YmlCa1lYUmhWWFJwYkM1a1pXWmhkV3gwUTI5dGNHRnlZWFJ2Y2loaExDQmlMQ0I3WEhKY2JseDBYSFJjZEdGMGRISnBZblYwWlRvZ1lYUjBjbWxpZFhSbExGeHlYRzVjZEZ4MFhIUmthWEpsWTNScGIyNDZJR1JwY21WamRHbHZiaXhjY2x4dVhIUmNkRngwWkdGMFlWUjVjR1U2SUdSaGRHRlVlWEJsTEZ4eVhHNWNkRngwWEhSbFpHbDBaV1JXWVd4MVpYTTZJR052Ym1acFp5NXBibTVsY2k1bFpHbDBaV1JXWVd4MVpYTXNYSEpjYmx4MFhIUmNkSFZ1YVhGMVpWSnZkMHRsZVRvZ1kyOXVabWxuTG5WdWFYRjFaVkp2ZDB0bGVTeGNjbHh1WEhSY2RGeDBibUZ0WlRvZ1kyOXVabWxuTG14dlkyRnNaUzV1WVcxbFhISmNibHgwWEhSOUtUdGNjbHh1WEhSOUtUdGNjbHh1WEhKY2JseDBhV1lnS0hWd1pHRjBaVlJoWW14bEtTQjdYSEpjYmx4MFhIUmtiMjFOYjJSMWJHVXVkWEJrWVhSbFZHRmliR1VvWTI5dVptbG5LVHRjY2x4dVhIUjlYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUhKbGMyVjBVMjl5ZENoamIyNW1hV2NwSUh0Y2NseHVYSFJqYjI1bWFXY3VhVzV1WlhJdWMyOXlkQzVoZEhSeWFXSjFkR1VnUFZ4eVhHNWNkR052Ym1acFp5NXBibTVsY2k1emIzSjBMbVJwY21WamRHbHZiaUE5WEhKY2JseDBZMjl1Wm1sbkxtbHVibVZ5TG5OdmNuUXVaR0YwWVZSNWNHVWdQU0IxYm1SbFptbHVaV1E3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1a1pXWnBibVZrWEhKY2JseHlYRzVjZEdOdmJtWnBaeTVrWVhSaFUyOTFjbU5sTG5OdmNuUW9ablZ1WTNScGIyNG9ZU3dnWWlrZ2UxeHlYRzVjZEZ4MGFXWWdLR052Ym1acFp5NXpiM0owTG1OMWMzUnZiVk52Y25RZ0lUMDlJRzUxYkd3cElIdGNjbHh1WEhSY2RGeDBjbVYwZFhKdUlHTnZibVpwWnk1emIzSjBMbU4xYzNSdmJWTnZjblFvWVN3Z1lpd2dlMXh5WEc1Y2RGeDBYSFJjZEdGMGRISnBZblYwWlRvZ1kyOXVabWxuTG5OdmNuUXVaR1ZtWVhWc2RDeGNjbHh1WEhSY2RGeDBYSFJrYVhKbFkzUnBiMjQ2SUNka2IzZHVKeXhjY2x4dVhIUmNkRngwWEhSa1lYUmhWSGx3WlRvZ1oyVjBVMjl5ZEZSNWNHVW9ZMjl1Wm1sbkxDQmpiMjVtYVdjdWMyOXlkQzVrWldaaGRXeDBLU3hjY2x4dVhIUmNkRngwWEhSbFpHbDBaV1JXWVd4MVpYTTZJR052Ym1acFp5NXBibTVsY2k1bFpHbDBaV1JXWVd4MVpYTXNYSEpjYmx4MFhIUmNkRngwZFc1cGNYVmxVbTkzUzJWNU9pQmpiMjVtYVdjdWRXNXBjWFZsVW05M1MyVjVYSEpjYmx4MFhIUmNkSDBwTzF4eVhHNWNkRngwZlZ4eVhHNWNjbHh1WEhSY2RISmxkSFZ5YmlCa1lYUmhWWFJwYkM1a1pXWmhkV3gwUTI5dGNHRnlZWFJ2Y2loaExDQmlMQ0I3WEhKY2JseDBYSFJjZEdGMGRISnBZblYwWlRvZ1kyOXVabWxuTG5OdmNuUXVaR1ZtWVhWc2RDeGNjbHh1WEhSY2RGeDBaR2x5WldOMGFXOXVPaUFuWkc5M2JpY3NYSEpjYmx4MFhIUmNkR1JoZEdGVWVYQmxPaUJuWlhSVGIzSjBWSGx3WlNoamIyNW1hV2NzSUdOdmJtWnBaeTV6YjNKMExtUmxabUYxYkhRcExGeHlYRzVjZEZ4MFhIUmxaR2wwWldSV1lXeDFaWE02SUdOdmJtWnBaeTVwYm01bGNpNWxaR2wwWldSV1lXeDFaWE1zWEhKY2JseDBYSFJjZEhWdWFYRjFaVkp2ZDB0bGVUb2dZMjl1Wm1sbkxuVnVhWEYxWlZKdmQwdGxlU3hjY2x4dVhIUmNkRngwYm1GdFpUb2dZMjl1Wm1sbkxteHZZMkZzWlM1dVlXMWxYSEpjYmx4MFhIUjlLVHRjY2x4dVhIUjlLVHRjY2x4dVhISmNibHgwWkc5dFRXOWtkV3hsTG5Wd1pHRjBaVlJoWW14bEtHTnZibVpwWnlrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR2RsZEZOdmNuUlVlWEJsS0dOdmJtWnBaeXdnWVhSMGNtbGlkWFJsS1NCN1hISmNibHgwZG1GeUlHaGxZV1JsY2s5aWFpQTlJR052Ym1acFoxVjBhV3d1WjJWMFNHVmhaR1Z5VDJKcVpXTjBLR052Ym1acFp5d2dZWFIwY21saWRYUmxLVHRjY2x4dVhISmNibHgwY21WMGRYSnVJSFI1Y0dWdlppQm9aV0ZrWlhKUFltb2dQVDBnSjNWdVpHVm1hVzVsWkNjZ2ZId2dkSGx3Wlc5bUlHaGxZV1JsY2s5aWFpNWtZWFJoVkhsd1pTQTlQU0FuZFc1a1pXWnBibVZrSnlBL0lDZHpkSEpwYm1jbklEb2dhR1ZoWkdWeVQySnFMbVJoZEdGVWVYQmxPMXh5WEc1OVhISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2NseHVYSFJ6YjNKMFFubERiMngxYlc0NklITnZjblJDZVVOdmJIVnRiaXhjY2x4dVhIUnpiM0owT2lCemIzSjBMRnh5WEc1Y2RISmxjMlYwVTI5eWREb2djbVZ6WlhSVGIzSjBYSEpjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWNjbHh1ZG1GeUlHUnZiVlYwYVd3Z1BTQnlaWEYxYVhKbEtDY3VMaTkxZEdsc2N5OWtiMjBuS1R0Y2NseHVYSEpjYm1aMWJtTjBhVzl1SUhOb2IzY29ZMjl1Wm1sbkxDQnZjSFJwYjI1ektTQjdYSEpjYmx4MGMzZHBkR05vSUNodmNIUnBiMjV6TG5SNWNHVXBJSHRjY2x4dVhIUmNkR05oYzJVZ0oybHVabThuT2x4eVhHNWNkRngwWEhSemFHOTNTVzVtYnloamIyNW1hV2NzSUc5d2RHbHZibk1wTzF4eVhHNWNkRngwWEhSaWNtVmhhenRjY2x4dVhIUmNkR05oYzJVZ0ozZGhjbTRuT2x4eVhHNWNkRngwWEhSemFHOTNWMkZ5YmloamIyNW1hV2NzSUc5d2RHbHZibk1wTzF4eVhHNWNkRngwWEhSaWNtVmhhenRjY2x4dVhIUmNkR05oYzJVZ0oyVnljbTl5SnpwY2NseHVYSFJjZEZ4MGMyaHZkMFZ5Y205eUtHTnZibVpwWnl3Z2IzQjBhVzl1Y3lrN1hISmNibHgwWEhSY2RHSnlaV0ZyTzF4eVhHNWNkRngwWkdWbVlYVnNkRHBjY2x4dVhIUmNkRngwWTI5dVptbG5MbTF2WkhWc1pYTXVkRzl2YkhScGNDNXphRzkzS0c5d2RHbHZibk1wTzF4eVhHNWNkRngwWEhSaWNtVmhhenRjY2x4dVhIUjlYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdocFpHVW9ZMjl1Wm1sbkxDQmxiR1Z0Wlc1MEtTQjdYSEpjYmx4MFkyOXVabWxuTG0xdlpIVnNaWE11ZEc5dmJIUnBjQzVvYVdSbEtHVnNaVzFsYm5RcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJvYVdSbFFXeHNLR052Ym1acFp5a2dlMXh5WEc1Y2RHTnZibVpwWnk1dGIyUjFiR1Z6TG5SdmIyeDBhWEF1YUdsa1pVRnNiQ2dwTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnphRzkzU1c1bWJ5aGpiMjVtYVdjc0lHOXdkR2x2Ym5NcElIdGNjbHh1WEhSamIyNW1hV2N1Ylc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNkSmJtWnZLRzl3ZEdsdmJuTXBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCemFHOTNWMkZ5YmloamIyNW1hV2NzSUc5d2RHbHZibk1wSUh0Y2NseHVYSFJqYjI1bWFXY3ViVzlrZFd4bGN5NTBiMjlzZEdsd0xuTm9iM2RYWVhKdUtHOXdkR2x2Ym5NcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJ6YUc5M1JYSnliM0lvWTI5dVptbG5MQ0J2Y0hScGIyNXpLU0I3WEhKY2JseDBZMjl1Wm1sbkxtMXZaSFZzWlhNdWRHOXZiSFJwY0M1emFHOTNSWEp5YjNJb2IzQjBhVzl1Y3lrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJRzl1VFc5MWMyVkZiblJsY2tObGJHeFhhWFJvVkdsMGJHVW9ZMjl1Wm1sbkxDQmxiR1Z0Wlc1MEtTQjdYSEpjYmx4MGRtRnlJR05sYkd4RVlYUmhRMjl1ZEdGcGJtVnlJRDBnWld4bGJXVnVkQ0E5UFQwZ2JuVnNiQ0EvSUc1MWJHd2dPaUJsYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NWpaV3hzUkdGMFlVTnZiblJoYVc1bGNpazdYSEpjYmx4eVhHNWNkR2xtSUNoalpXeHNSR0YwWVVOdmJuUmhhVzVsY2lBOVBUMGdiblZzYkNCOGZGeHlYRzVjZEZ4MElXUnZiVlYwYVd3dWFYTkZiR3hwY0hOcGMwRmpkR2wyWlNoalpXeHNSR0YwWVVOdmJuUmhhVzVsY2lrZ0ppWmNjbHh1WEhSY2RDRmtiMjFWZEdsc0xtbHpUM1psY21ac2IzZHVLR05sYkd4RVlYUmhRMjl1ZEdGcGJtVnlLU2tnZTF4eVhHNWNjbHh1WEhSY2RISmxkSFZ5Ymp0Y2NseHVYSFI5WEhKY2JseHlYRzVjZEhOb2IzZEpibVp2S0dOdmJtWnBaeXdnZTF4eVhHNWNkRngwWld4bGJXVnVkRG9nWld4bGJXVnVkQ3hjY2x4dVhIUmNkSFJsZUhRNklHVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLQ2QwYVhSc1pTY3BYSEpjYmx4MGZTazdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUc5dVRXOTFjMlZNWldGMlpVTmxiR3hYYVhSb1ZHbDBiR1VvWTI5dVptbG5MQ0JsYkdWdFpXNTBLU0I3WEhKY2JseDBhR2xrWlNoamIyNW1hV2NzSUdWc1pXMWxiblFwTzF4eVhHNTlYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNjbHh1WEhSemFHOTNPaUJ6YUc5M0xGeHlYRzVjZEdocFpHVTZJR2hwWkdVc1hISmNibHgwYUdsa1pVRnNiRG9nYUdsa1pVRnNiQ3hjY2x4dVhIUnphRzkzU1c1bWJ6b2djMmh2ZDBsdVptOHNYSEpjYmx4MGMyaHZkMWRoY200NklITm9iM2RYWVhKdUxGeHlYRzVjZEhOb2IzZEZjbkp2Y2pvZ2MyaHZkMFZ5Y205eUxGeHlYRzVjZEc5dVRXOTFjMlZGYm5SbGNrTmxiR3hYYVhSb1ZHbDBiR1U2SUc5dVRXOTFjMlZGYm5SbGNrTmxiR3hYYVhSb1ZHbDBiR1VzWEhKY2JseDBiMjVOYjNWelpVeGxZWFpsUTJWc2JGZHBkR2hVYVhSc1pUb2diMjVOYjNWelpVeGxZWFpsUTJWc2JGZHBkR2hVYVhSc1pWeHlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dVhISmNibWxtSUNoMGVYQmxiMllnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVpwYm1RZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVYSFJCY25KaGVTNXdjbTkwYjNSNWNHVXVabWx1WkNBOUlHWjFibU4wYVc5dUtIQnlaV1JwWTJGMFpTa2dleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMV1Y0ZEdWdVpDMXVZWFJwZG1WY2NseHVYSFJjZEdsbUlDaDBhR2x6SUQwOVBTQnVkV3hzS1NCN1hISmNibHgwWEhSY2RIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMEZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1hVzVrSUdOaGJHeGxaQ0J2YmlCdWRXeHNJRzl5SUhWdVpHVm1hVzVsWkNjcE8xeHlYRzVjZEZ4MGZWeHlYRzVjY2x4dVhIUmNkR2xtSUNoMGVYQmxiMllnY0hKbFpHbGpZWFJsSUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JseDBYSFJjZEhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0ozQnlaV1JwWTJGMFpTQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNG5LVHRjY2x4dVhIUmNkSDFjY2x4dVhISmNibHgwWEhSMllYSWdiR2x6ZENBOUlFOWlhbVZqZENoMGFHbHpLVHRjY2x4dVhIUmNkSFpoY2lCc1pXNW5kR2dnUFNCc2FYTjBMbXhsYm1kMGFDQStQajRnTUR0Y2NseHVYSFJjZEhaaGNpQjBhR2x6UVhKbklEMGdZWEpuZFcxbGJuUnpXekZkTzF4eVhHNWNkRngwZG1GeUlIWmhiSFZsTzF4eVhHNWNjbHh1WEhSY2RHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVYSFJjZEZ4MGRtRnNkV1VnUFNCc2FYTjBXMmxkTzF4eVhHNWNkRngwWEhScFppQW9jSEpsWkdsallYUmxMbU5oYkd3b2RHaHBjMEZ5Wnl3Z2RtRnNkV1VzSUdrc0lHeHBjM1FwS1NCN1hISmNibHgwWEhSY2RGeDBjbVYwZFhKdUlIWmhiSFZsTzF4eVhHNWNkRngwWEhSOVhISmNibHgwWEhSOVhISmNibHh5WEc1Y2RGeDBjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFibVJsWm1sdVpXUmNjbHh1WEhSOU8xeHlYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc1Y2NseHVhV1lnS0NGRmJHVnRaVzUwTG5CeWIzUnZkSGx3WlM1dFlYUmphR1Z6S1NCN1hISmNibHgwUld4bGJXVnVkQzV3Y205MGIzUjVjR1V1YldGMFkyaGxjeUE5WEhKY2JseDBYSFJGYkdWdFpXNTBMbkJ5YjNSdmRIbHdaUzV0WVhSamFHVnpVMlZzWldOMGIzSWdmSHhjY2x4dVhIUmNkRVZzWlcxbGJuUXVjSEp2ZEc5MGVYQmxMbTF2ZWsxaGRHTm9aWE5UWld4bFkzUnZjaUI4ZkZ4eVhHNWNkRngwUld4bGJXVnVkQzV3Y205MGIzUjVjR1V1YlhOTllYUmphR1Z6VTJWc1pXTjBiM0lnZkh4Y2NseHVYSFJjZEVWc1pXMWxiblF1Y0hKdmRHOTBlWEJsTG05TllYUmphR1Z6VTJWc1pXTjBiM0lnZkh4Y2NseHVYSFJjZEVWc1pXMWxiblF1Y0hKdmRHOTBlWEJsTG5kbFltdHBkRTFoZEdOb1pYTlRaV3hsWTNSdmNpQjhmRnh5WEc1Y2RGeDBablZ1WTNScGIyNG9jeWtnZTF4eVhHNWNkRngwWEhSMllYSWdiV0YwWTJobGN5QTlJQ2gwYUdsekxtUnZZM1Z0Wlc1MElIeDhJSFJvYVhNdWIzZHVaWEpFYjJOMWJXVnVkQ2t1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2h6S1N4Y2NseHVYSFJjZEZ4MFhIUnBJRDBnYldGMFkyaGxjeTVzWlc1bmRHZzdYSEpjYmx4eVhHNWNkRngwWEhSM2FHbHNaU0FvTFMxcElENDlJREFnSmlZZ2JXRjBZMmhsY3k1cGRHVnRLR2twSUNFOVBTQjBhR2x6S1NCN2ZTQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsWEhKY2JseDBYSFJjZEhKbGRIVnliaUJwSUQ0Z0xURTdYSEpjYmx4MFhIUjlPMXh5WEc1OUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWNjbHh1V3lCRmJHVnRaVzUwTG5CeWIzUnZkSGx3WlN3Z1EyaGhjbUZqZEdWeVJHRjBZUzV3Y205MGIzUjVjR1VzSUVSdlkzVnRaVzUwVkhsd1pTNXdjbTkwYjNSNWNHVWdYUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR2wwWlcwcElIdGNjbHh1WEhScFppQW9hWFJsYlM1b1lYTlBkMjVRY205d1pYSjBlU2duY21WdGIzWmxKeWtwSUh0Y2NseHVYSFJjZEhKbGRIVnlianRjY2x4dVhIUjlYSEpjYmx4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR2wwWlcwc0lDZHlaVzF2ZG1VbkxDQjdYSEpjYmx4MFhIUmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYSEpjYmx4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHlYRzVjZEZ4MGQzSnBkR0ZpYkdVNklIUnlkV1VzWEhKY2JseDBYSFIyWVd4MVpUb2dablZ1WTNScGIyNGdjbVZ0YjNabEtDa2dlMXh5WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTV3WVhKbGJuUk9iMlJsSUNFOVBTQnVkV3hzS1NCN1hISmNibHgwWEhSY2RGeDBkR2hwY3k1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLSFJvYVhNcE8xeHlYRzVjZEZ4MFhIUjlYSEpjYmx4MFhIUjlYSEpjYmx4MGZTazdYSEpjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2NseHVYSEpjYm1sbUlDZ2hUbTlrWlV4cGMzUXVjSEp2ZEc5MGVYQmxMbVp2Y2tWaFkyZ3BJSHRjY2x4dVhIUk9iMlJsVEdsemRDNXdjbTkwYjNSNWNHVXVabTl5UldGamFDQTlJR1oxYm1OMGFXOXVLR05oYkd4aVlXTnJMQ0JoY21kMWJXVnVkQ2tnZTF4eVhHNWNkRngwWVhKbmRXMWxiblFnUFNCaGNtZDFiV1Z1ZENCOGZDQjNhVzVrYjNjN1hISmNibHh5WEc1Y2RGeDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JseDBYSFJjZEdOaGJHeGlZV05yTG1OaGJHd29ZWEpuZFcxbGJuUXNJSFJvYVhOYmFWMHNJR2tzSUhSb2FYTXBPMXh5WEc1Y2RGeDBmVnh5WEc1Y2RIMDdYSEpjYm4waUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEhKY2JseHlYRzVwWmlBb2RIbHdaVzltSUU5aWFtVmpkQzVoYzNOcFoyNGdJVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHlYRzVjZEM4dklFMTFjM1FnWW1VZ2QzSnBkR0ZpYkdVNklIUnlkV1VzSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTENCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdWY2NseHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1QySnFaV04wTENBbllYTnphV2R1Snl3Z2UxeHlYRzVjZEZ4MGRtRnNkV1U2SUdaMWJtTjBhVzl1SUdGemMybG5iaWgwWVhKblpYUXBJSHNnTHk4Z0xteGxibWQwYUNCdlppQm1kVzVqZEdsdmJpQnBjeUF5WEhKY2JseDBYSFJjZEdsbUlDaDBZWEpuWlhRZ1BUMDlJRzUxYkd3cElIc2dMeThnVkhsd1pVVnljbTl5SUdsbUlIVnVaR1ZtYVc1bFpDQnZjaUJ1ZFd4c1hISmNibHgwWEhSY2RGeDBkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUTJGdWJtOTBJR052Ym5abGNuUWdkVzVrWldacGJtVmtJRzl5SUc1MWJHd2dkRzhnYjJKcVpXTjBKeWs3WEhKY2JseDBYSFJjZEgxY2NseHVYSEpjYmx4MFhIUmNkSFpoY2lCMGJ5QTlJRTlpYW1WamRDaDBZWEpuWlhRcE8xeHlYRzVjY2x4dVhIUmNkRngwWm05eUlDaDJZWElnYVc1a1pYZ2dQU0F4T3lCcGJtUmxlQ0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdsdVpHVjRLeXNwSUh0Y2NseHVYSFJjZEZ4MFhIUjJZWElnYm1WNGRGTnZkWEpqWlNBOUlHRnlaM1Z0Wlc1MGMxdHBibVJsZUYwN1hISmNibHh5WEc1Y2RGeDBYSFJjZEdsbUlDaHVaWGgwVTI5MWNtTmxJQ0U5UFNCdWRXeHNLU0I3SUM4dklGTnJhWEFnYjNabGNpQnBaaUIxYm1SbFptbHVaV1FnYjNJZ2JuVnNiRnh5WEc1Y2RGeDBYSFJjZEZ4MFptOXlJQ2gyWVhJZ2JtVjRkRXRsZVNCcGJpQnVaWGgwVTI5MWNtTmxLU0I3WEhKY2JseDBYSFJjZEZ4MFhIUmNkQzh2SUVGMmIybGtJR0oxWjNNZ2QyaGxiaUJvWVhOUGQyNVFjbTl3WlhKMGVTQnBjeUJ6YUdGa2IzZGxaRnh5WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c1bGVIUlRiM1Z5WTJVc0lHNWxlSFJMWlhrcEtTQjdYSEpjYmx4MFhIUmNkRngwWEhSY2RGeDBkRzliYm1WNGRFdGxlVjBnUFNCdVpYaDBVMjkxY21ObFcyNWxlSFJMWlhsZE8xeHlYRzVjZEZ4MFhIUmNkRngwWEhSOVhISmNibHgwWEhSY2RGeDBYSFI5WEhKY2JseDBYSFJjZEZ4MGZWeHlYRzVjZEZ4MFhIUjlYSEpjYmx4MFhIUmNkSEpsZEhWeWJpQjBienRjY2x4dVhIUmNkSDBzWEhKY2JseDBYSFIzY21sMFlXSnNaVG9nZEhKMVpTeGNjbHh1WEhSY2RHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpWeHlYRzVjZEgwcE8xeHlYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc1Y2NseHVablZ1WTNScGIyNGdZMkZzWTNWc1lYUmxWbWx5ZEhWaGJFTnZiblJoYVc1bGNraGxhV2RvZENoamIyNW1hV2NzSUdobGFXZG9kQ2tnZTF4eVhHNWNkR2xtSUNoMGVYQmxiMllnYUdWcFoyaDBJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmx4MFhIUnlaWFIxY200Z2FHVnBaMmgwTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwY21WMGRYSnVJR052Ym1acFp5NXBibTVsY2k1dGFXNUNkV1ptWlhKSVpXbG5hSFFnS2lBeUlDc2dUV0YwYUM1bWJHOXZjaWhvWldsbmFIUWdMeUJqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1NHVnBaMmgwS1NBcUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hJWldsbmFIUTdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdkbGRFUmxabUYxYkhSRGIyNTBZV2x1WlhKSVpXbG5hSFFvWTI5dVptbG5LU0I3WEhKY2JseDBjbVYwZFhKdUlHTmhiR04xYkdGMFpWWnBjblIxWVd4RGIyNTBZV2x1WlhKSVpXbG5hSFFvWTI5dVptbG5MQ0IzYVc1a2IzY3VhVzV1WlhKSVpXbG5hSFFnTFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLR052Ym1acFp5NXpaV3hsWTNSdmNuTXViV0ZwYmtOdmJuUmhhVzVsY2lrdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1ZEc5d0lDMGdOalFwTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQm5aWFJKYm1SbGVFOW1RMlZzYkV0bGVVaGxZV1JsY2loamIyNW1hV2NwSUh0Y2NseHVYSFJ5WlhSMWNtNGdZMjl1Wm1sbkxtaGxZV1JsY25NdWJHVnVaM1JvSUMwZ01UdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWjJWMFUyOXlkRVJsWm1GMWJIUW9ZMjl1Wm1sbktTQjdYSEpjYmx4MGNtVjBkWEp1SUdOdmJtWnBaeTUxYm1seGRXVlNiM2RMWlhrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR2RsZEUxaGVFTnZiSE53WVc0b1kyOXVabWxuS1NCN1hISmNibHgwZG1GeUlHMWhlRlpoYkNBOUlERTdYSEpjYmx4eVhHNWNkR052Ym1acFp5NW9aV0ZrWlhKekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXeGxiV1Z1ZENrZ2UxeHlYRzVjZEZ4MFpXeGxiV1Z1ZEM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hOMVlrVnNaVzFsYm5RcElIdGNjbHh1WEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJ6ZFdKRmJHVnRaVzUwTG1OdmJITndZVzRnSVQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnYldGNFZtRnNJRHdnYzNWaVJXeGxiV1Z1ZEM1amIyeHpjR0Z1S1NCN1hISmNibHgwWEhSY2RGeDBiV0Y0Vm1Gc0lEMGdjM1ZpUld4bGJXVnVkQzVqYjJ4emNHRnVPMXh5WEc1Y2RGeDBYSFI5WEhKY2JseDBYSFI5S1R0Y2NseHVYSFI5S1R0Y2NseHVYSEpjYmx4MGNtVjBkWEp1SUcxaGVGWmhiRHRjY2x4dWZWeHlYRzVjY2x4dUx5OGdSbWx5WldadmVDQjFjMmx1WnlCTmIzVnpaVVYyWlc1MExrUlBUVjlFUlV4VVFWOU1TVTVGSUh4OElFMXZkWE5sUlhabGJuUXVSRTlOWDBSRlRGUkJYMUJCUjBVZ2FXNXpkR1ZoWkNCdlppQmxlR0ZqZENCd2FYaGxiSE1zSUhkb1pXNGdiV1ZoYzNWeWFXNW5JSE5qY205c2JDQmtaV3gwWVNCMllXeDFaWE11WEhKY2JpOHZJRlJvYVhNZ1puVnVZM1JwYjI0Z2QybHNiQ0JuYVhabElIUm9aU0JsZUdGamRDQnNhVzVsSUdobGFXZG9kQ0JtYjNJZ2RHaGxJSEJwZUdWc0lHTnZiblpsY25OcGIyNWNjbHh1Wm5WdVkzUnBiMjRnWjJWMFUyTnliMnhzVEdsdVpVaGxhV2RvZENncElIdGNjbHh1WEhSMllYSWdhV1p5WVcxbElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmFXWnlZVzFsSnlrN1hISmNibHh5WEc1Y2RHbG1jbUZ0WlM1emNtTWdQU0FuSXljN1hISmNibHgwWkc5amRXMWxiblF1WW05a2VTNWhjSEJsYm1SRGFHbHNaQ2hwWm5KaGJXVXBPMXh5WEc1Y2NseHVYSFIyWVhJZ2FYZHBiaUE5SUdsbWNtRnRaUzVqYjI1MFpXNTBWMmx1Wkc5M0xGeHlYRzVjZEZ4MGFXUnZZeUE5SUdsM2FXNHVaRzlqZFcxbGJuUTdYSEpjYmx4eVhHNWNkR2xrYjJNdWIzQmxiaWdwTzF4eVhHNWNkR2xrYjJNdWQzSnBkR1VvSnp3aFJFOURWRmxRUlNCb2RHMXNQanhvZEcxc1BqeG9aV0ZrUGp3dmFHVmhaRDQ4WW05a2VUNDhjM0JoYmo1aFBDOXpjR0Z1UGp3dlltOWtlVDQ4TDJoMGJXdytKeWs3WEhKY2JseDBhV1J2WXk1amJHOXpaU2dwTzF4eVhHNWNjbHh1WEhSMllYSWdjM0JoYmlBOUlHbGtiMk11WW05a2VTNW1hWEp6ZEVWc1pXMWxiblJEYUdsc1pDeGNjbHh1WEhSY2RISWdQU0J6Y0dGdUxtOW1abk5sZEVobGFXZG9kRHRjY2x4dVhISmNibHgwWkc5amRXMWxiblF1WW05a2VTNXlaVzF2ZG1WRGFHbHNaQ2hwWm5KaGJXVXBPMXh5WEc1Y2NseHVYSFJ5WlhSMWNtNGdjanRjY2x4dWZWeHlYRzVjY2x4dUx5OGdSbWx5WldadmVDQjFjMmx1WnlCTmIzVnpaVVYyWlc1MExrUlBUVjlFUlV4VVFWOU1TVTVGSUh4OElFMXZkWE5sUlhabGJuUXVSRTlOWDBSRlRGUkJYMUJCUjBVZ2FXNXpkR1ZoWkNCdlppQmxlR0ZqZENCd2FYaGxiSE1zSUhkb1pXNGdiV1ZoYzNWeWFXNW5JSE5qY205c2JDQmtaV3gwWVNCMllXeDFaWE11WEhKY2JpOHZJRlJvYVhNZ1puVnVZM1JwYjI0Z2QybHNiQ0JuYVhabElIUm9aU0JsZUdGamRDQndZV2RsSUdobGFXZG9kQ0JtYjNJZ2RHaGxJSEJwZUdWc0lHTnZiblpsY25OcGIyNWNjbHh1Wm5WdVkzUnBiMjRnWjJWMFUyTnliMnhzVUdGblpVaGxhV2RvZENncElIdGNjbHh1WEhSeVpYUjFjbTRnZDJsdVpHOTNMbVJ2WTNWdFpXNTBMbUp2WkhrdVkyeHBaVzUwU0dWcFoyaDBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCblpYUldhWE5wWW14bFVtOTNUblZ0WW1WeUtHTnZibVpwWnlrZ2UxeHlYRzVjZEhaaGNpQm9ZWE5HYVd4MFpYSWdQU0JqYjI1bWFXY3VabWxzZEdWeUxtVnVZV0pzWldRc1hISmNibHgwWEhSamIyNTBZV2x1WlhKSVpXbG5hSFFnUFNCamIyNW1hV2N1WkdsdFpXNXphVzl1Y3k1amIyNTBZV2x1WlhKSVpXbG5hSFFnTFNCamIyNW1hV2N1YVc1dVpYSXViV2x1UW5WbVptVnlTR1ZwWjJoMElDb2dNaXhjY2x4dVhIUmNkR1JoZEdGRFpXeHNjeUE5SUUxaGRHZ3VabXh2YjNJb1kyOXVkR0ZwYm1WeVNHVnBaMmgwSUM4Z1kyOXVabWxuTG1ScGJXVnVjMmx2Ym5NdVkyVnNiRWhsYVdkb2RDa3NYSEpjYmx4MFhIUm9aV0ZrWlhKRFpXeHNjeUE5SUdOdmJtWnBaeTVvWldGa1pYSnpMbXhsYm1kMGFDQXJJQ2hvWVhOR2FXeDBaWElnUHlBeElEb2dNQ2s3WEhKY2JseHlYRzVjZEhKbGRIVnliaUJrWVhSaFEyVnNiSE1nTFNCb1pXRmtaWEpEWld4c2N6dGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWjJWMFZtbHphV0pzWlVOdmJIVnRiazUxYldKbGNpaGpiMjVtYVdjcElIdGNjbHh1WEhSeVpYUjFjbTRnVFdGMGFDNW1iRzl2Y2loa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdWRtbHlkSFZoYkVOdmJuUmhhVzVsY2lrdWIyWm1jMlYwVjJsa2RHZ2dMeUJuWlhSRFpXeHNSblZzYkZkcFpIUm9LR052Ym1acFp5a2dLMXh5WEc1Y2RGeDBLR052Ym1acFp5NXBibTVsY2k1amIyeHpjR0Z1VDJabWMyVjBJRDRnTWlBL0lHTnZibVpwWnk1cGJtNWxjaTVqYjJ4emNHRnVUMlptYzJWMElEb2dNaWtnS3lCamIyNW1hV2N1YVc1dVpYSXVZMjlzYzNCaGJrOW1abk5sZENrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR2RsZEZSaFlteGxUMlptYzJWMFYybGtkR2dvWTI5dVptbG5LU0I3WEhKY2JseDBkbUZ5SUhSaFltSnNaVTltWm5ObGRFTnZiSFZ0Ym5NZ1BTQm5aWFJMWlhsSVpXRmtaWElvWTI5dVptbG5LUzVzWlc1bmRHZ2dQQ0JqYjI1bWFXY3VhVzV1WlhJdWRtbHphV0pzWlVOdmJIVnRiazUxYldKbGNpQS9JR052Ym1acFp5NXBibTVsY2k1dGFXNUNkV1ptWlhKWGFXUjBhQ0E2SUdkbGRFdGxlVWhsWVdSbGNpaGpiMjVtYVdjcExteGxibWQwYUNBdElHTnZibVpwWnk1cGJtNWxjaTUyYVhOcFlteGxRMjlzZFcxdVRuVnRZbVZ5TzF4eVhHNWNjbHh1WEhSeVpYUjFjbTRnZEdGaVlteGxUMlptYzJWMFEyOXNkVzF1Y3lBcUlHZGxkRU5sYkd4R2RXeHNWMmxrZEdnb1kyOXVabWxuS1R0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdaMlYwVkdGaWJHVlBabVp6WlhSSVpXbG5hSFFvWTI5dVptbG5LU0I3WEhKY2JseDBkbUZ5SUhSaFlteGxUMlptYzJWMFVtOTNjeUE5SUdOdmJtWnBaeTVrWVhSaFUyOTFjbU5sTG14bGJtZDBhQ0E4SUdOdmJtWnBaeTVwYm01bGNpNTJhWE5wWW14bFVtOTNUblZ0WW1WeUlEOGdZMjl1Wm1sbkxtbHVibVZ5TG0xcGJrSjFabVpsY2tobGFXZG9kQ0E2SUdOdmJtWnBaeTVrWVhSaFUyOTFjbU5sTG14bGJtZDBhQ0F0SUdOdmJtWnBaeTVwYm01bGNpNTJhWE5wWW14bFVtOTNUblZ0WW1WeUlDc2dNVHRjY2x4dVhISmNibHgwY21WMGRYSnVJSFJoWW14bFQyWm1jMlYwVW05M2N5QXFJR052Ym1acFp5NWthVzFsYm5OcGIyNXpMbU5sYkd4SVpXbG5hSFE3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHZGxkRU5sYkd4R2RXeHNWMmxrZEdnb1kyOXVabWxuS1NCN1hISmNibHgwY21WMGRYSnVJR052Ym1acFp5NWthVzFsYm5OcGIyNXpMbU5sYkd4UVlXUmthVzVuU0c5eWFYcHZiblJoYkNBcUlESWdLeUJqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1YybGtkR2dnS3lCamIyNW1hV2N1WkdsdFpXNXphVzl1Y3k1alpXeHNRbTl5WkdWeVYybGtkR2c3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHZGxkRXRsZVVobFlXUmxjaWhqYjI1bWFXY3BJSHRjY2x4dVhIUnlaWFIxY200Z1kyOXVabWxuTG1obFlXUmxjbk5iWTI5dVptbG5MbWx1Ym1WeUxtbHVaR1Y0VDJaRFpXeHNTMlY1U0dWaFpHVnlYVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z1oyVjBSbWw0WldSTFpYbElaV0ZrWlhJb1kyOXVabWxuS1NCN1hISmNibHgwY21WMGRYSnVJR052Ym1acFp5NW1hWGhsWkVobFlXUmxjbk5iWTI5dVptbG5MbWx1Ym1WeUxtbHVaR1Y0VDJaRFpXeHNTMlY1U0dWaFpHVnlYVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z1oyVjBTR1ZoWkdWeVQySnFaV04wS0dOdmJtWnBaeXdnWVhSMGNtbGlkWFJsS1NCN1hISmNibHgwY21WMGRYSnVJR2RsZEV0bGVVaGxZV1JsY2loamIyNW1hV2NwTG1acGJtUW9ablZ1WTNScGIyNG9ZMjlzZFcxdUtTQjdYSEpjYmx4MFhIUnlaWFIxY200Z1kyOXNkVzF1TG10bGVTQTlQVDBnWVhSMGNtbGlkWFJsTzF4eVhHNWNkSDBwSUh4OElHZGxkRVpwZUdWa1MyVjVTR1ZoWkdWeUtHTnZibVpwWnlrdVptbHVaQ2htZFc1amRHbHZiaWhqYjJ4MWJXNHBJSHRjY2x4dVhIUmNkSEpsZEhWeWJpQmpiMngxYlc0dWEyVjVJRDA5UFNCaGRIUnlhV0oxZEdVN1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJRzVwYkNncElIdGNjbHh1WEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN2ZUdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnZDNKaGNIQmxjaWhtS1NCN1hISmNibHgwY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnWmpzZ2ZUdGNjbHh1ZlZ4eVhHNWNjbHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEhKY2JseDBZMkZzWTNWc1lYUmxWbWx5ZEhWaGJFTnZiblJoYVc1bGNraGxhV2RvZERvZ1kyRnNZM1ZzWVhSbFZtbHlkSFZoYkVOdmJuUmhhVzVsY2tobGFXZG9kQ3hjY2x4dVhIUm5aWFJFWldaaGRXeDBRMjl1ZEdGcGJtVnlTR1ZwWjJoME9pQm5aWFJFWldaaGRXeDBRMjl1ZEdGcGJtVnlTR1ZwWjJoMExGeHlYRzVjZEdkbGRFbHVaR1Y0VDJaRFpXeHNTMlY1U0dWaFpHVnlPaUJuWlhSSmJtUmxlRTltUTJWc2JFdGxlVWhsWVdSbGNpeGNjbHh1WEhSblpYUlRiM0owUkdWbVlYVnNkRG9nWjJWMFUyOXlkRVJsWm1GMWJIUXNYSEpjYmx4MFoyVjBUV0Y0UTI5c2MzQmhiam9nWjJWMFRXRjRRMjlzYzNCaGJpeGNjbHh1WEhSblpYUlRZM0p2Ykd4TWFXNWxTR1ZwWjJoME9pQm5aWFJUWTNKdmJHeE1hVzVsU0dWcFoyaDBMRnh5WEc1Y2RHZGxkRk5qY205c2JGQmhaMlZJWldsbmFIUTZJR2RsZEZOamNtOXNiRkJoWjJWSVpXbG5hSFFzWEhKY2JseDBaMlYwVm1semFXSnNaVkp2ZDA1MWJXSmxjam9nWjJWMFZtbHphV0pzWlZKdmQwNTFiV0psY2l4Y2NseHVYSFJuWlhSV2FYTnBZbXhsUTI5c2RXMXVUblZ0WW1WeU9pQm5aWFJXYVhOcFlteGxRMjlzZFcxdVRuVnRZbVZ5TEZ4eVhHNWNkR2RsZEZSaFlteGxUMlptYzJWMFYybGtkR2c2SUdkbGRGUmhZbXhsVDJabWMyVjBWMmxrZEdnc1hISmNibHgwWjJWMFZHRmliR1ZQWm1aelpYUklaV2xuYUhRNklHZGxkRlJoWW14bFQyWm1jMlYwU0dWcFoyaDBMRnh5WEc1Y2RHZGxkRU5sYkd4R2RXeHNWMmxrZEdnNklHZGxkRU5sYkd4R2RXeHNWMmxrZEdnc1hISmNibHgwWjJWMFMyVjVTR1ZoWkdWeU9pQm5aWFJMWlhsSVpXRmtaWElzWEhKY2JseDBaMlYwUm1sNFpXUkxaWGxJWldGa1pYSTZJR2RsZEVacGVHVmtTMlY1U0dWaFpHVnlMRnh5WEc1Y2RHZGxkRWhsWVdSbGNrOWlhbVZqZERvZ1oyVjBTR1ZoWkdWeVQySnFaV04wTEZ4eVhHNWNkRzVwYkRvZ2JtbHNMRnh5WEc1Y2RIZHlZWEJ3WlhJNklIZHlZWEJ3WlhKY2NseHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYSEpjYmx4eVhHNTJZWElnUmtsTVZFVlNYMVJaVUVWVElEMGdXeUFuWlhGMVlXeHpKeXdnSjJWeGRXRnNjME5oYzJWSmJuTmxibk5wZEdsMlpTY3NJQ2RzYVd0bEp5d2dKMnhwYTJWRFlYTmxTVzV6Wlc1emFYUnBkbVVuTENBblozSmxZWFJsY2xSb1lXNG5MQ0FuWjNKbFlYUmxjazl5UlhGMVlXd25MRnh5WEc1Y2RDZHNaWE56VkdoaGJpY3NJQ2RzWlhOelQzSkZjWFZoYkNjc0lDZGlaWFIzWldWdUp5d2dKMkpsZEhkbFpXNUpibU5zZFhOcGRtVW5MQ0FuWTI5dWRHRnBibk1uSUYwN1hISmNibHh5WEc1bWRXNWpkR2x2YmlCa1pXWmhkV3gwUTI5dGNHRnlZWFJ2Y2loaExDQmlMQ0J2Y0hScGIyNXpLU0I3WEhKY2JseDBkbUZ5SUdGMGRISkJJRDBnWjJWMFRXVnlaMlZrVm1Gc2RXVW9ZU3dnYjNCMGFXOXVjeTVoZEhSeWFXSjFkR1VzSUc5d2RHbHZibk11WldScGRHVmtWbUZzZFdWekxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2tzWEhKY2JseDBYSFJoZEhSeVFpQTlJR2RsZEUxbGNtZGxaRlpoYkhWbEtHSXNJRzl3ZEdsdmJuTXVZWFIwY21saWRYUmxMQ0J2Y0hScGIyNXpMbVZrYVhSbFpGWmhiSFZsY3l3Z2IzQjBhVzl1Y3k1MWJtbHhkV1ZTYjNkTFpYa3BMRnh5WEc1Y2RGeDBhWE5FYjNkdUlEMGdiM0IwYVc5dWN5NWthWEpsWTNScGIyNGdQVDA5SUNka2IzZHVKenRjY2x4dVhISmNibHgwYVdZZ0tHOXdkR2x2Ym5NdVpHRjBZVlI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEhKY2JseDBYSFIyWVhJZ1kyOXRjR0Z5WlZKbGMzVnNkQ0E5SURBN1hISmNibHh5WEc1Y2RGeDBhV1lnS0hSNWNHVnZaaUJoZEhSeVFTQTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHlYRzVjZEZ4MFhIUmpiMjF3WVhKbFVtVnpkV3gwSUQwZ0xURTdYSEpjYmx4MFhIUjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmhkSFJ5UWlBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwWEhSamIyMXdZWEpsVW1WemRXeDBJRDBnTVR0Y2NseHVYSFJjZEgwZ1pXeHpaU0I3WEhKY2JseDBYSFJjZEdGMGRISkJJQ3M5SUNjbk8xeHlYRzVjZEZ4MFhIUmhkSFJ5UWlBclBTQW5KenRjY2x4dVhISmNibHgwWEhSY2RHTnZiWEJoY21WU1pYTjFiSFFnUFNCaGRIUnlRUzVzYjJOaGJHVkRiMjF3WVhKbEtHRjBkSEpDTENCdmNIUnBiMjV6TG14dlkyRnNaU2s3WEhKY2JseDBYSFI5WEhKY2JseHlYRzVjZEZ4MGNtVjBkWEp1SUdselJHOTNiaUI4ZkNCamIyMXdZWEpsVW1WemRXeDBJRDA5UFNBd0lEOGdZMjl0Y0dGeVpWSmxjM1ZzZENBNklHTnZiWEJoY21WU1pYTjFiSFFnS2lBdE1UdGNjbHh1WEhSOUlHVnNjMlVnYVdZZ0tHOXdkR2x2Ym5NdVpHRjBZVlI1Y0dVZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEhKY2JseDBYSFJoZEhSeVFTQTlJSEJoY25ObFJteHZZWFFvWVhSMGNrRXBPMXh5WEc1Y2RGeDBZWFIwY2tJZ1BTQndZWEp6WlVac2IyRjBLR0YwZEhKQ0tUdGNjbHh1WEhKY2JseDBYSFJwWmlBb2FYTk9ZVTRvWVhSMGNrRXBLU0I3WEhKY2JseDBYSFJjZEhKbGRIVnliaUJwYzBSdmQyNGdQeUF0TVNBNklERTdYSEpjYmx4MFhIUjlYSEpjYmx4eVhHNWNkRngwYVdZZ0tHbHpUbUZPS0dGMGRISkNLU2tnZTF4eVhHNWNkRngwWEhSeVpYUjFjbTRnYVhORWIzZHVJRDhnTVNBNklDMHhPMXh5WEc1Y2RGeDBmVnh5WEc1Y2RIMWNjbHh1WEhKY2JseDBhV1lnS0hSNWNHVnZaaUJoZEhSeVFTQTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ1lYUjBja0lnSVQwZ0ozVnVaR1ZtYVc1bFpDY2dmSHdnWVhSMGNrRWdQQ0JoZEhSeVFpa2dlMXh5WEc1Y2RGeDBjbVYwZFhKdUlHbHpSRzkzYmlBL0lDMHhJRG9nTVR0Y2NseHVYSFI5WEhKY2JseHlYRzVjZEdsbUlDaDBlWEJsYjJZZ1lYUjBja0VnSVQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JR0YwZEhKQ0lEMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElHRjBkSEpCSUQ0Z1lYUjBja0lwSUh0Y2NseHVYSFJjZEhKbGRIVnliaUJwYzBSdmQyNGdQeUF4SURvZ0xURTdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUnlaWFIxY200Z01EdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWm1sc2RHVnlSR0YwWVNodmNIUnBiMjV6S1NCN1hISmNibHgwYVdZZ0tFWkpURlJGVWw5VVdWQkZVeTVwYm1SbGVFOW1LRzl3ZEdsdmJuTXVabWxzZEdWeVZIbHdaU2tnUFQwOUlDMHhLU0I3WEhKY2JseDBYSFIzYVc1a2IzY3VZMjl1YzI5c1pTNWxjbkp2Y2lnblRtOTBJR0VnZG1Gc2FXUWdabWxzZEdWeUlIUjVjR1VoSUNnbklDc2diM0IwYVc5dWN5NW1hV3gwWlhKVWVYQmxJQ3NnSnlrbktUdGNjbHh1WEhKY2JseDBYSFJ5WlhSMWNtNGdiM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxPMXh5WEc1Y2RIMWNjbHh1WEhKY2JseDBjM2RwZEdOb0lDaHZjSFJwYjI1ekxtWnBiSFJsY2xSNWNHVXBJSHRjY2x4dVhIUmNkR05oYzJVZ0oyVnhkV0ZzY3ljNlhISmNibHgwWEhSY2RISmxkSFZ5YmlCbGNYVmhiSE5HYVd4MFpYSW9iM0IwYVc5dWN5azdYSEpjYmx4MFhIUmpZWE5sSUNkbGNYVmhiSE5EWVhObFNXNXpaVzV6YVhScGRtVW5PbHh5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaWEYxWVd4elEyRnpaVWx1YzJWdWMybDBhWFpsUm1sc2RHVnlLRzl3ZEdsdmJuTXBPMXh5WEc1Y2RGeDBZMkZ6WlNBbmJHbHJaU2M2WEhKY2JseDBYSFJjZEhKbGRIVnliaUJzYVd0bFJtbHNkR1Z5S0c5d2RHbHZibk1wTzF4eVhHNWNkRngwWTJGelpTQW5iR2xyWlVOaGMyVkpibk5sYm5OcGRHbDJaU2M2WEhKY2JseDBYSFJjZEhKbGRIVnliaUJzYVd0bFEyRnpaVWx1YzJWdWMybDBhWFpsUm1sc2RHVnlLRzl3ZEdsdmJuTXBPMXh5WEc1Y2RGeDBZMkZ6WlNBblozSmxZWFJsY2xSb1lXNG5PbHh5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaM0psWVhSbGNsUm9ZVzVHYVd4MFpYSW9iM0IwYVc5dWN5azdYSEpjYmx4MFhIUmpZWE5sSUNkbmNtVmhkR1Z5VDNKRmNYVmhiQ2M2WEhKY2JseDBYSFJjZEhKbGRIVnliaUJuY21WaGRHVnlUM0pGY1hWaGJFWnBiSFJsY2lodmNIUnBiMjV6S1R0Y2NseHVYSFJjZEdOaGMyVWdKMnhsYzNOVWFHRnVKenBjY2x4dVhIUmNkRngwY21WMGRYSnVJR3hsYzNOVWFHRnVSbWxzZEdWeUtHOXdkR2x2Ym5NcE8xeHlYRzVjZEZ4MFkyRnpaU0FuYkdWemMwOXlSWEYxWVd3bk9seHlYRzVjZEZ4MFhIUnlaWFIxY200Z2JHVnpjMDl5UlhGMVlXeEdhV3gwWlhJb2IzQjBhVzl1Y3lrN1hISmNibHgwWEhSallYTmxJQ2RpWlhSM1pXVnVKenBjY2x4dVhIUmNkRngwY21WMGRYSnVJR0psZEhkbFpXNUdhV3gwWlhJb2IzQjBhVzl1Y3lrN1hISmNibHgwWEhSallYTmxJQ2RpWlhSM1pXVnVTVzVqYkhWemFYWmxKenBjY2x4dVhIUmNkRngwY21WMGRYSnVJR0psZEhkbFpXNUpibU5zZFhOcGRtVkdhV3gwWlhJb2IzQjBhVzl1Y3lrN1hISmNibHgwWEhSallYTmxJQ2RqYjI1MFlXbHVjeWM2WEhKY2JseDBYSFJjZEhKbGRIVnliaUJqYjI1MFlXbHVjMFpwYkhSbGNpaHZjSFJwYjI1ektUdGNjbHh1WEhSY2RHUmxabUYxYkhRNlhISmNibHgwWEhSY2RISmxkSFZ5YmlCdmNIUnBiMjV6TG1SaGRHRlRiM1Z5WTJVN1hISmNibHgwZlZ4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQmxjWFZoYkhOR2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4eVhHNWNkSEpsZEhWeWJpQnZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVabWxzZEdWeUtHWjFibU4wYVc5dUtHOWlhaWtnZTF4eVhHNWNkRngwY21WMGRYSnVJR2RsZEUxbGNtZGxaRlpoYkhWbEtHOWlhaXdnYjNCMGFXOXVjeTVoZEhSeWFXSjFkR1VzSUc5d2RHbHZibk11WldScGRHVmtWbUZzZFdWekxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2tnUFQwOUlHOXdkR2x2Ym5NdWRtRnNkV1ZQYm1VN1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR1Z4ZFdGc2MwTmhjMlZKYm5ObGJuTnBkR2wyWlVacGJIUmxjaWh2Y0hScGIyNXpLU0I3WEhKY2JseDBjbVYwZFhKdUlHOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNW1hV3gwWlhJb1puVnVZM1JwYjI0b2IySnFLU0I3WEhKY2JseDBYSFJ5WlhSMWNtNGdaMlYwVFdWeVoyVmtWbUZzZFdVb2IySnFMQ0J2Y0hScGIyNXpMbUYwZEhKcFluVjBaU3dnYjNCMGFXOXVjeTVsWkdsMFpXUldZV3gxWlhNc0lHOXdkR2x2Ym5NdWRXNXBjWFZsVW05M1MyVjVLUzUwYjFWd2NHVnlRMkZ6WlNncElEMDlQU0J2Y0hScGIyNXpMblpoYkhWbFQyNWxMblJ2VlhCd1pYSkRZWE5sS0NrN1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR3hwYTJWR2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4eVhHNWNkSEpsZEhWeWJpQnZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVabWxzZEdWeUtHWjFibU4wYVc5dUtHOWlhaWtnZTF4eVhHNWNkRngwY21WMGRYSnVJR2RsZEUxbGNtZGxaRlpoYkhWbEtHOWlhaXdnYjNCMGFXOXVjeTVoZEhSeWFXSjFkR1VzSUc5d2RHbHZibk11WldScGRHVmtWbUZzZFdWekxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2t1YVc1a1pYaFBaaWh2Y0hScGIyNXpMblpoYkhWbFQyNWxLU0FoUFQwZ0xURTdYSEpjYmx4MGZTazdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUd4cGEyVkRZWE5sU1c1elpXNXphWFJwZG1WR2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4eVhHNWNkSEpsZEhWeWJpQnZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVabWxzZEdWeUtHWjFibU4wYVc5dUtHOWlhaWtnZTF4eVhHNWNkRngwY21WMGRYSnVJR2RsZEUxbGNtZGxaRlpoYkhWbEtHOWlhaXdnYjNCMGFXOXVjeTVoZEhSeWFXSjFkR1VzSUc5d2RHbHZibk11WldScGRHVmtWbUZzZFdWekxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2t1ZEc5VmNIQmxja05oYzJVb0tTNXBibVJsZUU5bUtHOXdkR2x2Ym5NdWRtRnNkV1ZQYm1VdWRHOVZjSEJsY2tOaGMyVW9LU2tnSVQwOUlDMHhPMXh5WEc1Y2RIMHBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCbmNtVmhkR1Z5VkdoaGJrWnBiSFJsY2lodmNIUnBiMjV6S1NCN1hISmNibHgwY21WMGRYSnVJRzl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzVtYVd4MFpYSW9ablZ1WTNScGIyNG9iMkpxS1NCN1hISmNibHgwWEhSeVpYUjFjbTRnWjJWMFRXVnlaMlZrVm1Gc2RXVW9iMkpxTENCdmNIUnBiMjV6TG1GMGRISnBZblYwWlN3Z2IzQjBhVzl1Y3k1bFpHbDBaV1JXWVd4MVpYTXNJRzl3ZEdsdmJuTXVkVzVwY1hWbFVtOTNTMlY1S1NBK0lHOXdkR2x2Ym5NdWRtRnNkV1ZQYm1VN1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR2R5WldGMFpYSlBja1Z4ZFdGc1JtbHNkR1Z5S0c5d2RHbHZibk1wSUh0Y2NseHVYSFJ5WlhSMWNtNGdiM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxMbVpwYkhSbGNpaG1kVzVqZEdsdmJpaHZZbW9wSUh0Y2NseHVYSFJjZEhKbGRIVnliaUJuWlhSTlpYSm5aV1JXWVd4MVpTaHZZbW9zSUc5d2RHbHZibk11WVhSMGNtbGlkWFJsTENCdmNIUnBiMjV6TG1Wa2FYUmxaRlpoYkhWbGN5d2diM0IwYVc5dWN5NTFibWx4ZFdWU2IzZExaWGtwSUQ0OUlHOXdkR2x2Ym5NdWRtRnNkV1ZQYm1VN1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR3hsYzNOVWFHRnVSbWxzZEdWeUtHOXdkR2x2Ym5NcElIdGNjbHh1WEhSeVpYUjFjbTRnYjNCMGFXOXVjeTVrWVhSaFUyOTFjbU5sTG1acGJIUmxjaWhtZFc1amRHbHZiaWh2WW1vcElIdGNjbHh1WEhSY2RISmxkSFZ5YmlCblpYUk5aWEpuWldSV1lXeDFaU2h2WW1vc0lHOXdkR2x2Ym5NdVlYUjBjbWxpZFhSbExDQnZjSFJwYjI1ekxtVmthWFJsWkZaaGJIVmxjeXdnYjNCMGFXOXVjeTUxYm1seGRXVlNiM2RMWlhrcElEd2diM0IwYVc5dWN5NTJZV3gxWlU5dVpUdGNjbHh1WEhSOUtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYkdWemMwOXlSWEYxWVd4R2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4eVhHNWNkSEpsZEhWeWJpQnZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVabWxzZEdWeUtHWjFibU4wYVc5dUtHOWlhaWtnZTF4eVhHNWNkRngwY21WMGRYSnVJR2RsZEUxbGNtZGxaRlpoYkhWbEtHOWlhaXdnYjNCMGFXOXVjeTVoZEhSeWFXSjFkR1VzSUc5d2RHbHZibk11WldScGRHVmtWbUZzZFdWekxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2tnUEQwZ2IzQjBhVzl1Y3k1MllXeDFaVTl1WlR0Y2NseHVYSFI5S1R0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdZbVYwZDJWbGJrWnBiSFJsY2lodmNIUnBiMjV6S1NCN1hISmNibHgwY21WMGRYSnVJRzl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzVtYVd4MFpYSW9ablZ1WTNScGIyNG9iMkpxS1NCN1hISmNibHgwWEhSeVpYUjFjbTRnWjJWMFRXVnlaMlZrVm1Gc2RXVW9iMkpxTENCdmNIUnBiMjV6TG1GMGRISnBZblYwWlN3Z2IzQjBhVzl1Y3k1bFpHbDBaV1JXWVd4MVpYTXNJRzl3ZEdsdmJuTXVkVzVwY1hWbFVtOTNTMlY1S1NBK0lHOXdkR2x2Ym5NdWRtRnNkV1ZQYm1VZ0ppWWdiMkpxVzI5d2RHbHZibk11WVhSMGNtbGlkWFJsWFNBOElHOXdkR2x2Ym5NdWRtRnNkV1ZVZDI4N1hISmNibHgwZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR0psZEhkbFpXNUpibU5zZFhOcGRtVkdhV3gwWlhJb2IzQjBhVzl1Y3lrZ2UxeHlYRzVjZEhKbGRIVnliaUJ2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHlYRzVjZEZ4MGNtVjBkWEp1SUdkbGRFMWxjbWRsWkZaaGJIVmxLRzlpYWl3Z2IzQjBhVzl1Y3k1aGRIUnlhV0oxZEdVc0lHOXdkR2x2Ym5NdVpXUnBkR1ZrVm1Gc2RXVnpMQ0J2Y0hScGIyNXpMblZ1YVhGMVpWSnZkMHRsZVNrZ1BqMGdiM0IwYVc5dWN5NTJZV3gxWlU5dVpTQW1KaUJ2WW1wYmIzQjBhVzl1Y3k1aGRIUnlhV0oxZEdWZElEdzlJRzl3ZEdsdmJuTXVkbUZzZFdWVWQyODdYSEpjYmx4MGZTazdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdOdmJuUmhhVzV6Um1sc2RHVnlLRzl3ZEdsdmJuTXBJSHRjY2x4dVhIUnlaWFIxY200Z2IzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtWnBiSFJsY2lobWRXNWpkR2x2Ymlodlltb3BJSHRjY2x4dVhIUmNkSEpsZEhWeWJpQnZjSFJwYjI1ekxuWmhiSFZsVDI1bExtbHVaR1Y0VDJZb1oyVjBUV1Z5WjJWa1ZtRnNkV1VvYjJKcUxDQnZjSFJwYjI1ekxtRjBkSEpwWW5WMFpTd2diM0IwYVc5dWN5NWxaR2wwWldSV1lXeDFaWE1zSUc5d2RHbHZibk11ZFc1cGNYVmxVbTkzUzJWNUtTa2dJVDA5SUMweE8xeHlYRzVjZEgwcE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJuWlhSV1lXeDFaVUo1Vkhsd1pTaDJZV3gxWlN3Z1pHRjBZVlI1Y0dVcElIdGNjbHh1WEhScFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEhKY2JseDBYSFJ5WlhSMWNtNGdkbUZzZFdVN1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSemQybDBZMmdnS0dSaGRHRlVlWEJsS1NCN1hISmNibHgwWEhSallYTmxJQ2R6ZEhKcGJtY25PbHh5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkbUZzZFdVdWRHOVRkSEpwYm1jb0tUdGNjbHh1WEhSY2RHTmhjMlVnSjI1MWJXSmxjaWM2WEhKY2JseDBYSFJjZEhKbGRIVnliaUJ3WVhKelpVWnNiMkYwS0haaGJIVmxLVHRjY2x4dVhIUmNkR1JsWm1GMWJIUTZYSEpjYmx4MFhIUmNkSEpsZEhWeWJpQjJZV3gxWlR0Y2NseHVYSFI5WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHZGxkRTFsY21kbFpGWmhiSFZsS0hKdmR5d2dZWFIwY21saWRYUmxMQ0JsWkdsMFpXUldZV3gxWlhNc0lIVnVhWEYxWlZKdmQwdGxlU2tnZTF4eVhHNWNkSFpoY2lCbFpHbDBaV1JTYjNjZ1BTQmxaR2wwWldSV1lXeDFaWE5iY205M1czVnVhWEYxWlZKdmQwdGxlVjFkTzF4eVhHNWNjbHh1WEhSeVpYUjFjbTRnZEhsd1pXOW1JR1ZrYVhSbFpGSnZkeUE5UFNBbmRXNWtaV1pwYm1Wa0p5QjhmQ0IwZVhCbGIyWWdaV1JwZEdWa1VtOTNXMkYwZEhKcFluVjBaVjBnUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ5YjNkYllYUjBjbWxpZFhSbFhTQTZJR1ZrYVhSbFpGSnZkMXRoZEhSeWFXSjFkR1ZkTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQmpiRzl1WlU5aWFtVmpkQ2h2WW1vcElIdGNjbHh1WEhSeVpYUjFjbTRnU2xOUFRpNXdZWEp6WlNoS1UwOU9Mbk4wY21sdVoybG1lU2h2WW1vcEtUdGNjbHh1ZlZ4eVhHNWNjbHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEhKY2JseDBaR1ZtWVhWc2RFTnZiWEJoY21GMGIzSTZJR1JsWm1GMWJIUkRiMjF3WVhKaGRHOXlMRnh5WEc1Y2RHWnBiSFJsY2tSaGRHRTZJR1pwYkhSbGNrUmhkR0VzWEhKY2JseDBaMlYwVm1Gc2RXVkNlVlI1Y0dVNklHZGxkRlpoYkhWbFFubFVlWEJsTEZ4eVhHNWNkR05zYjI1bFQySnFaV04wT2lCamJHOXVaVTlpYW1WamRGeHlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dVhISmNibVoxYm1OMGFXOXVJR2x1WkdWNFQyWkZiR1Z0Wlc1MEtHVnNaVzFsYm5RcElIdGNjbHh1WEhSMllYSWdZMjlzYkdWamRHbHZiaUE5SUdWc1pXMWxiblF1Y0dGeVpXNTBUbTlrWlM1amFHbHNaRTV2WkdWek8xeHlYRzVjY2x4dVhIUm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR052Ykd4bFkzUnBiMjR1YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1WEhSY2RHbG1JQ2hqYjJ4c1pXTjBhVzl1VzJsZElEMDlQU0JsYkdWdFpXNTBLU0I3WEhKY2JseDBYSFJjZEhKbGRIVnliaUJwTzF4eVhHNWNkRngwZlZ4eVhHNWNkSDFjY2x4dVhISmNibHgwY21WMGRYSnVJQzB4TzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQm1hVzVrVUdGeVpXNTBUbTlrWlNoamFHbHNaQ3dnYzJWc1pXTjBiM0lwSUh0Y2NseHVYSFJwWmlBb1kyaHBiR1F1Y0dGeVpXNTBUbTlrWlNBOVBUMGdiblZzYkNrZ2UxeHlYRzVjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYSEpjYmx4MGZTQmxiSE5sSUdsbUlDaGphR2xzWkM1d1lYSmxiblJPYjJSbExtMWhkR05vWlhNb2MyVnNaV04wYjNJcEtTQjdYSEpjYmx4MFhIUnlaWFIxY200Z1kyaHBiR1F1Y0dGeVpXNTBUbTlrWlR0Y2NseHVYSFI5WEhKY2JseHlYRzVjZEhKbGRIVnliaUJtYVc1a1VHRnlaVzUwVG05a1pTaGphR2xzWkM1d1lYSmxiblJPYjJSbExDQnpaV3hsWTNSdmNpazdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdkbGRGSnZkMDUxYldKbGNpaGpiMjVtYVdjc0lHTmxiR3hPYjJSbEtTQjdYSEpjYmx4MGNtVjBkWEp1SUdsdVpHVjRUMlpGYkdWdFpXNTBLR05sYkd4T2IyUmxMbkJoY21WdWRFNXZaR1VwSUNzZ1kyOXVabWxuTG1sdWJtVnlMblJ2Y0VObGJHeFBabVp6WlhRN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR2RsZEVOdmJIVnRiazUxYldKbGNpaGpiMjVtYVdjc0lHTmxiR3hPYjJSbEtTQjdYSEpjYmx4MGNtVjBkWEp1SUdsdVpHVjRUMlpGYkdWdFpXNTBLR05sYkd4T2IyUmxLU0F0SURFZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YkdWbWRFTmxiR3hQWm1aelpYUTdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdselJXeHNhWEJ6YVhOQlkzUnBkbVVvWld4bGJXVnVkQ2tnZTF4eVhHNWNkSEpsZEhWeWJpQmxiR1Z0Wlc1MExtOW1abk5sZEZkcFpIUm9JRHdnWld4bGJXVnVkQzV6WTNKdmJHeFhhV1IwYUR0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdhWE5QZG1WeVpteHZkMjRvWld4bGJXVnVkQ2tnZTF4eVhHNWNkSEpsZEhWeWJpQmxiR1Z0Wlc1MExuTmpjbTlzYkVobGFXZG9kQ0ErSUdWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoMElIeDhJR1ZzWlcxbGJuUXVjMk55YjJ4c1YybGtkR2dnUGlCbGJHVnRaVzUwTG1Oc2FXVnVkRmRwWkhSb08xeHlYRzU5WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjY2x4dVhIUnBibVJsZUU5bVJXeGxiV1Z1ZERvZ2FXNWtaWGhQWmtWc1pXMWxiblFzWEhKY2JseDBabWx1WkZCaGNtVnVkRTV2WkdVNklHWnBibVJRWVhKbGJuUk9iMlJsTEZ4eVhHNWNkR2RsZEZKdmQwNTFiV0psY2pvZ1oyVjBVbTkzVG5WdFltVnlMRnh5WEc1Y2RHZGxkRU52YkhWdGJrNTFiV0psY2pvZ1oyVjBRMjlzZFcxdVRuVnRZbVZ5TEZ4eVhHNWNkR2x6Uld4c2FYQnphWE5CWTNScGRtVTZJR2x6Uld4c2FYQnphWE5CWTNScGRtVXNYSEpjYmx4MGFYTlBkbVZ5Wm14dmQyNDZJR2x6VDNabGNtWnNiM2R1WEhKY2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHlYRzVjY2x4dWRtRnlJRXRGV1Y5RFQwUkZVeUE5SUh0Y2NseHVYSFJGVGxSRlVqb2dNVE1zWEhKY2JseDBSVk5EUVZCRk9pQXlOMXh5WEc1OU8xeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z1oyVjBTMlY1UTI5a1pTaGxkbVZ1ZENrZ2UxeHlYRzVjZEhKbGRIVnliaUJsZG1WdWRDNXJaWGxEYjJSbElIeDhJR1YyWlc1MExuZG9hV05vTzF4eVhHNTlYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNjbHh1WEhSblpYUkxaWGxEYjJSbE9pQm5aWFJMWlhsRGIyUmxMRnh5WEc1Y2RFdEZXVjlEVDBSRlV6b2dTMFZaWDBOUFJFVlRYSEpjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWNjbHh1ZG1GeUlFTmxiR3dnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TGk5dGIyUmxiSE12WkdGMFlTOWpaV3hzSnlrc1hISmNibHgwWTI5dVptbG5WWFJwYkNBOUlISmxjWFZwY21Vb0p5NHVMM1YwYVd4ekwyTnZibVpwWjNWeVlYUnBiMjRuS1R0Y2NseHVYSEpjYm1aMWJtTjBhVzl1SUdkbGRFTmxiR3hFWVhSaEtHTnZibVpwWnl3Z2NtOTNUblZ0WW1WeUxDQmpiMngxYlc1T2RXMWlaWElwSUh0Y2NseHVYSFIyWVhJZ1kyVnNiRVJoZEdFZ1BTQnVkV3hzTEZ4eVhHNWNkRngwYUdWaFpHVnlUMkpxSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJMWlhsSVpXRmtaWElvWTI5dVptbG5LVnRqYjJ4MWJXNU9kVzFpWlhKZExGeHlYRzVjZEZ4MGRXNXBjWFZsVW05M1MyVjVJRDBnYm5Wc2JEdGNjbHh1WEhKY2JseDBMeThnU1dZZ2RHaGxJR2x1WkdWNElHbHpJR2hwWjJobGNpQjBhR0Z1SUhSb1pTQmhkbUZwYkdGaWJHVWdjbTkzY3lCdWRXMWlaWEpjY2x4dVhIUnBaaUFvY205M1RuVnRZbVZ5SUQ0OUlHTnZibVpwWnk1a1lYUmhVMjkxY21ObExteGxibWQwYUNrZ2UxeHlYRzVjZEZ4MFkyVnNiRVJoZEdFZ1BTQnVaWGNnUTJWc2JDaDdYSEpjYmx4MFhIUmNkR3RsZVRvZ2FHVmhaR1Z5VDJKcUxtdGxlU3hjY2x4dVhIUmNkRngwZG1Gc2RXVTZJQ2NuTEZ4eVhHNWNkRngwWEhSa1lYUmhWSGx3WlRvZ2FHVmhaR1Z5VDJKcUxtUmhkR0ZVZVhCbFhISmNibHgwWEhSOUtUdGNjbHh1WEhSOUlHVnNjMlVnZTF4eVhHNWNkRngwZFc1cGNYVmxVbTkzUzJWNUlEMGdZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVmJjbTkzVG5WdFltVnlYVnRqYjI1bWFXY3VkVzVwY1hWbFVtOTNTMlY1WFR0Y2NseHVYSFJjZEdObGJHeEVZWFJoSUQwZ2JtVjNJRU5sYkd3b2UxeHlYRzVjZEZ4MFhIUnJaWGs2SUdobFlXUmxjazlpYWk1clpYa3NYSEpjYmx4MFhIUmNkSFpoYkhWbE9pQmpiMjVtYVdjdVpHRjBZVk52ZFhKalpWdHliM2RPZFcxaVpYSmRXMmhsWVdSbGNrOWlhaTVyWlhsZExGeHlYRzVjZEZ4MFhIUmtZWFJoVkhsd1pUb2dhR1ZoWkdWeVQySnFMbVJoZEdGVWVYQmxMRnh5WEc1Y2RGeDBYSFJ5YjNkT2RXMWlaWEk2SUhKdmQwNTFiV0psY2l4Y2NseHVYSFJjZEZ4MFkyOXNkVzF1VG5WdFltVnlPaUJqYjJ4MWJXNU9kVzFpWlhKY2NseHVYSFJjZEgwcE8xeHlYRzVjY2x4dVhIUmNkR2xtSUNoMGVYQmxiMllnWTI5dVptbG5MbWx1Ym1WeUxtVmthWFJsWkZaaGJIVmxjMXQxYm1seGRXVlNiM2RMWlhsZElDRTlJQ2QxYm1SbFptbHVaV1FuSUNZbVhISmNibHgwWEhSY2RIUjVjR1Z2WmlCamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6VzNWdWFYRjFaVkp2ZDB0bGVWMWJhR1ZoWkdWeVQySnFMbXRsZVYwZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVYSEpjYmx4MFhIUmNkR05sYkd4RVlYUmhMbU5zWVhOeklEMGdZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NWxaR2wwWldSRFpXeHNPMXh5WEc1Y2RGeDBYSFJqWld4c1JHRjBZUzUxY0dSaGRHVldZV3gxWlNoamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6VzNWdWFYRjFaVkp2ZDB0bGVWMWJhR1ZoWkdWeVQySnFMbXRsZVYwcE8xeHlYRzVjZEZ4MGZWeHlYRzVjZEgxY2NseHVYSEpjYmx4MGNtVjBkWEp1SUdObGJHeEVZWFJoTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQm5aWFJHYVhobFpFTmxiR3hFWVhSaEtHTnZibVpwWnl3Z2NtOTNUblZ0WW1WeUxDQmpiMngxYlc1T2RXMWlaWElwSUh0Y2NseHVYSFIyWVhJZ1kyVnNiRVJoZEdFZ1BTQnVkV3hzTEZ4eVhHNWNkRngwYUdWaFpHVnlUMkpxSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJHYVhobFpFdGxlVWhsWVdSbGNpaGpiMjVtYVdjcFcyTnZiSFZ0Yms1MWJXSmxjbDA3WEhKY2JseHlYRzVjZEM4dklFbG1JSFJvWlNCcGJtUmxlQ0JwY3lCb2FXZG9aWElnZEdoaGJpQjBhR1VnWVhaaGFXeGhZbXhsSUhKdmQzTWdiblZ0WW1WeVhISmNibHgwYVdZZ0tISnZkMDUxYldKbGNpQStQU0JqYjI1bWFXY3VaR0YwWVZOdmRYSmpaUzVzWlc1bmRHZ3BJSHRjY2x4dVhIUmNkR05sYkd4RVlYUmhJRDBnYm1WM0lFTmxiR3dvZTF4eVhHNWNkRngwWEhSclpYazZJR2hsWVdSbGNrOWlhaTVyWlhrc1hISmNibHgwWEhSY2RIWmhiSFZsT2lBbkp5eGNjbHh1WEhSY2RGeDBaR0YwWVZSNWNHVTZJR2hsWVdSbGNrOWlhaTVrWVhSaFZIbHdaVnh5WEc1Y2RGeDBmU2s3WEhKY2JseDBmU0JsYkhObElIdGNjbHh1WEhSY2RHTmxiR3hFWVhSaElEMGdibVYzSUVObGJHd29lMXh5WEc1Y2RGeDBYSFJyWlhrNklHaGxZV1JsY2s5aWFpNXJaWGtzWEhKY2JseDBYSFJjZEhaaGJIVmxPaUJqYjI1bWFXY3VaR0YwWVZOdmRYSmpaVnR5YjNkT2RXMWlaWEpkVzJobFlXUmxjazlpYWk1clpYbGRMRnh5WEc1Y2RGeDBYSFJrWVhSaFZIbHdaVG9nYUdWaFpHVnlUMkpxTG1SaGRHRlVlWEJsTEZ4eVhHNWNkRngwWEhSeWIzZE9kVzFpWlhJNklISnZkMDUxYldKbGNpeGNjbHh1WEhSY2RGeDBZMjlzZFcxdVRuVnRZbVZ5T2lCamIyeDFiVzVPZFcxaVpYSmNjbHh1WEhSY2RIMHBPMXh5WEc1Y2RIMWNjbHh1WEhKY2JseDBjbVYwZFhKdUlHTmxiR3hFWVhSaE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJ0WlhKblpVVmthWFJsWkZaaGJIVmxjMGx1VW05M0tHTnZibVpwWnl3Z2NtOTNLU0I3WEhKY2JseDBkbUZ5SUcxbGNtZGxaRkp2ZDBSaGRHRWdQU0I3ZlN4Y2NseHVYSFJjZEhWdWFYRjFaVkp2ZDB0bGVTQTlJSEp2ZDF0amIyNW1hV2N1ZFc1cGNYVmxVbTkzUzJWNVhUdGNjbHh1WEhKY2JseDBhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpXM1Z1YVhGMVpWSnZkMHRsZVYwZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVYSFJjZEhKbGRIVnliaUJ5YjNjN1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSUFltcGxZM1F1YTJWNWN5aHliM2NwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYTJWNUtTQjdYSEpjYmx4MFhIUnRaWEpuWldSU2IzZEVZWFJoVzJ0bGVWMGdQU0JqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpXM1Z1YVhGMVpWSnZkMHRsZVYxYmEyVjVYU0I4ZkNCeWIzZGJhMlY1WFR0Y2NseHVYSFI5S1R0Y2NseHVYSEpjYmx4MGNtVjBkWEp1SUcxbGNtZGxaRkp2ZDBSaGRHRTdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUcxbGNtZGxSV1JwZEdWa1ZtRnNkV1Z6U1c1RVlYUmhVMjkxY21ObEtHTnZibVpwWnl3Z1pITXBJSHRjY2x4dVhIUjJZWElnYldWeVoyVmtSSE1nUFNCYlhUdGNjbHh1WEhKY2JseDBaSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWh5YjNjcElIdGNjbHh1WEhSY2RHMWxjbWRsWkVSekxuQjFjMmdvYldWeVoyVkZaR2wwWldSV1lXeDFaWE5KYmxKdmR5aGpiMjVtYVdjc0lISnZkeWtwTzF4eVhHNWNkSDBwTzF4eVhHNWNjbHh1WEhSeVpYUjFjbTRnYldWeVoyVmtSSE03WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlITmxjR0Z5WVhSbFZtRnNkV1Z6U1c1RVlYUmhVMjkxY21ObEtHTnZibVpwWnl3Z2JXVnlaMlZrUkhNcElIdGNjbHh1WEhSMllYSWdjMlZ3WVhKaGRHVmtSSE1nUFNCYlhUdGNjbHh1WEhKY2JseDBiV1Z5WjJWa1JITXVabTl5UldGamFDaG1kVzVqZEdsdmJpaHRaWEpuWldSU2IzY3BJSHRjY2x4dVhIUmNkSFpoY2lCdmNtbG5hVzVoYkZKdmR5QTlJR052Ym1acFp5NXBibTVsY2k1dmNtbG5hVzVoYkVSaGRHRlRiM1Z5WTJVdVptbHVaQ2htZFc1amRHbHZiaWh5YjNjcElIdGNjbHh1WEhSY2RGeDBjbVYwZFhKdUlISnZkMXRqYjI1bWFXY3VkVzVwY1hWbFVtOTNTMlY1WFNBOVBUMGdiV1Z5WjJWa1VtOTNXMk52Ym1acFp5NTFibWx4ZFdWU2IzZExaWGxkTzF4eVhHNWNkRngwZlNrN1hISmNibHh5WEc1Y2RGeDBhV1lnS0hSNWNHVnZaaUJ2Y21sbmFXNWhiRkp2ZHlBaFBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNWNkRngwWEhSelpYQmhjbUYwWldSRWN5NXdkWE5vS0c5eWFXZHBibUZzVW05M0tUdGNjbHh1WEhSY2RIMWNjbHh1WEhSOUtUdGNjbHh1WEhKY2JseDBjbVYwZFhKdUlITmxjR0Z5WVhSbFpFUnpPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCemRHOXlaVlZ3WkdGMFpXUkRaV3hzVm1Gc2RXVW9ZMjl1Wm1sbkxDQmpaV3hzUkdGMFlTa2dlMXh5WEc1Y2RIWmhjaUIxYm1seGRXVlNiM2RMWlhrZ1BTQmpiMjVtYVdjdVpHRjBZVk52ZFhKalpWdGpaV3hzUkdGMFlTNXliM2RPZFcxaVpYSmRXMk52Ym1acFp5NTFibWx4ZFdWU2IzZExaWGxkTzF4eVhHNWNjbHh1WEhScFppQW9kSGx3Wlc5bUlHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhOYmRXNXBjWFZsVW05M1MyVjVYU0E5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh5WEc1Y2RGeDBZMjl1Wm1sbkxtbHVibVZ5TG1Wa2FYUmxaRlpoYkhWbGMxdDFibWx4ZFdWU2IzZExaWGxkSUQwZ2UzMDdYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUmpiMjVtYVdjdWFXNXVaWEl1WldScGRHVmtWbUZzZFdWelczVnVhWEYxWlZKdmQwdGxlVjFiWTJWc2JFUmhkR0V1YTJWNVhTQTlJR05sYkd4RVlYUmhMbVZrYVhSbFpGWmhiSFZsTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQndaWEp6YVhOMFVtOTNWbUZzZFdWektHTnZibVpwWnl3Z2NtOTNLU0I3WEhKY2JseDBkbUZ5SUhWdWFYRjFaVkp2ZDB0bGVTQTlJSEp2ZDF0amIyNW1hV2N1ZFc1cGNYVmxVbTkzUzJWNVhUdGNjbHh1WEhKY2JseDBhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpXM1Z1YVhGMVpWSnZkMHRsZVYwZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVYSFJjZEU5aWFtVmpkQzVyWlhsektHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhOYmRXNXBjWFZsVW05M1MyVjVYU2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyWlhrcElIdGNjbHh1WEhSY2RGeDBjbTkzVzJ0bGVWMGdQU0JqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpXM1Z1YVhGMVpWSnZkMHRsZVYxYmEyVjVYVHRjY2x4dVhIUmNkSDBwTzF4eVhHNWNjbHh1WEhSY2RHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhOYmRXNXBjWFZsVW05M1MyVjVYU0E5SUh0OU8xeHlYRzVjZEgxY2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdjR1Z5YzJsemRFSmhkR05vVm1Gc2RXVnpLR052Ym1acFp5a2dlMXh5WEc1Y2RHTnZibVpwWnk1a1lYUmhVMjkxY21ObExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2NtOTNLU0I3WEhKY2JseDBYSFJ3WlhKemFYTjBVbTkzVm1Gc2RXVnpLR052Ym1acFp5d2djbTkzS1R0Y2NseHVYSFI5S1R0Y2NseHVmVnh5WEc1Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYSEpjYmx4MFoyVjBRMlZzYkVSaGRHRTZJR2RsZEVObGJHeEVZWFJoTEZ4eVhHNWNkR2RsZEVacGVHVmtRMlZzYkVSaGRHRTZJR2RsZEVacGVHVmtRMlZzYkVSaGRHRXNYSEpjYmx4MGJXVnlaMlZGWkdsMFpXUldZV3gxWlhOSmJsSnZkem9nYldWeVoyVkZaR2wwWldSV1lXeDFaWE5KYmxKdmR5eGNjbHh1WEhSdFpYSm5aVVZrYVhSbFpGWmhiSFZsYzBsdVJHRjBZVk52ZFhKalpUb2diV1Z5WjJWRlpHbDBaV1JXWVd4MVpYTkpia1JoZEdGVGIzVnlZMlVzWEhKY2JseDBjMlZ3WVhKaGRHVldZV3gxWlhOSmJrUmhkR0ZUYjNWeVkyVTZJSE5sY0dGeVlYUmxWbUZzZFdWelNXNUVZWFJoVTI5MWNtTmxMRnh5WEc1Y2RITjBiM0psVlhCa1lYUmxaRU5sYkd4V1lXeDFaVG9nYzNSdmNtVlZjR1JoZEdWa1EyVnNiRlpoYkhWbExGeHlYRzVjZEhCbGNuTnBjM1JTYjNkV1lXeDFaWE02SUhCbGNuTnBjM1JTYjNkV1lXeDFaWE1zWEhKY2JseDBjR1Z5YzJsemRFSmhkR05vVm1Gc2RXVnpPaUJ3WlhKemFYTjBRbUYwWTJoV1lXeDFaWE5jY2x4dWZUc2lMQ0loWm5WdVkzUnBiMjRvZEN4bEtYdGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJrWldacGJtVW1KbVJsWm1sdVpTNWhiV1EvWkdWbWFXNWxLRnRkTEdVcE9sd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmxlSEJ2Y25SelAyMXZaSFZzWlM1bGVIQnZjblJ6UFdVb0tUcDBMa05zWVhOelBXVW9LWDBvZEdocGN5eG1kVzVqZEdsdmJpZ3BlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlIUW9LWHQ5ZG1GeUlHVTlYQ0pqYjI1emRISjFZM1J2Y2x3aUxHODlYQ0psZUhSbGJtUmNJanR5WlhSMWNtNGdkRnR2WFQxbWRXNWpkR2x2YmloMEtYdG1kVzVqZEdsdmJpQnVLQ2w3YVZ0bFhTNWhjSEJzZVNoMGFHbHpMR0Z5WjNWdFpXNTBjeWw5ZG1GeUlHazlUMkpxWldOMExtTnlaV0YwWlNoMGFHbHpMbkJ5YjNSdmRIbHdaU2s3Y21WMGRYSnVJSFF1WTJGc2JDaHBMSFJvYVhNdWNISnZkRzkwZVhCbEtTeHVMbkJ5YjNSdmRIbHdaVDFwTEc1YmIxMDlkR2hwYzF0dlhTeHVmU3gwZlNrN0lsMTkifQ==
