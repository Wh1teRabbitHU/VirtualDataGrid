(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./pollyfills/Array.find.js');require('./pollyfills/Element.matches.js');require('./pollyfills/Element.remove.js');require('./pollyfills/NodeList.forEach.js');require('./pollyfills/Object.assign.js');

var VirtualDataGrid = require('./models/module/virtual-data-grid');

window.VirtualDataGrid = VirtualDataGrid;
},{"./models/module/virtual-data-grid":16,"./pollyfills/Array.find.js":25,"./pollyfills/Element.matches.js":26,"./pollyfills/Element.remove.js":27,"./pollyfills/NodeList.forEach.js":28,"./pollyfills/Object.assign.js":29}],2:[function(require,module,exports){
'use strict';

function invokeFn(name, param1, param2) {
	if (typeof window.tlite == 'undefined') {
		return;
	}

	window.tlite[name](param1, param2);
}

function getOrientationByPosition(element) {
	var windowHeight = window.innerHeight,
		centerHeight = windowHeight / 2,
		position = element.getBoundingClientRect();

	return centerHeight < position.top ? 's' : 'n';
}

function show(options) {
	switch (options.type) {
		case 'info':
			showInfo(options);
			break;
		case 'warn':
			showWarn(options);
			break;
		case 'error':
			showError(options);
			break;
		default:
			showInfo(options);
			break;
	}
}

function hide(element) {
	invokeFn('hide', element);
}

function hideAll() {
	document.querySelectorAll('.tlite').forEach(function(el) {
		hide(el.parentNode);
	});
}

function showInfo(options) {
	invokeFn('show', options.element, { grav: getOrientationByPosition(options.element) });
}

function showWarn(options) {
	invokeFn('show', options.element);
}

function showError(options) {
	invokeFn('show', options.element);
}

module.exports = {
	show: show,
	hide: hide,
	hideAll: hideAll,
	showInfo: showInfo,
	showWarn: showWarn,
	showError: showError
};
},{}],3:[function(require,module,exports){
'use strict';

var configUtil     = require('../utils/configuration'),
	dataUtil       = require('../utils/data'),
	tooltipDefault = require('../configs/defaults/tooltip');

var DEFAULTS = {
	selectors: {
		mainContainer: '.main-container',

		fixedContainer: 'fixed-container',
		fixedHeaderContainer: 'fixed-header-container',
		dataContainer: 'data-container',
		dataHeaderContainer: 'data-header-container',

		fixedTable: 'fixed-table',
		fixedHeaderTable: 'fixed-header-table',
		dataTable: 'data-table',
		dataHeaderTable: 'data-header-table',

		editingCell: 'editing-cell',
		editedCell: 'edited-cell',
		saveButton: null
	},
	dimensions: {
		cellWidth: 150,
		cellHeight: 50,
		cellPaddingVertical: 4,
		cellPaddingHorizontal: 8,
		cellBorderWidth: 1,
		containerHeight: configUtil.getDefaultContainerHeight,
		lockCellHeight: false
	},
	edit: {
		enabled: false,
		mode: 'batch',
		validate: false
	},
	filter: {
		enabled: false,
		customFilter: null
	},
	sort: {
		enabled: false,
		default: configUtil.getSortDefault,
		customSort: null
	},
	eventHandlers: {
		onBeforeEdit: configUtil.nil,
		onValidation: configUtil.nil,
		onAfterEdit: configUtil.nil,
		onBeforeSave: configUtil.nil,
		onSaveRow: configUtil.nil,
		onSaveBatch: configUtil.nil,
		onAfterSave: configUtil.nil
	},
	locale: {
		name: 'en'
	},
	dataSource: [ ],
	headers: [ [ ] ],
	fixedHeaders: [ [ ] ],
	uniqueRowKey: '__uniqueRowKey',
	autoResize: true,
	debug: false,
	uniqueId: 0,
	modules: {
		tooltip: {
			enabled: true,
			show: configUtil.wrapper(tooltipDefault.show),
			hide: configUtil.wrapper(tooltipDefault.hide),
			hideAll: configUtil.wrapper(tooltipDefault.hideAll),
			showInfo: configUtil.wrapper(tooltipDefault.showInfo),
			showWarn: configUtil.wrapper(tooltipDefault.showWarn),
			showError: configUtil.wrapper(tooltipDefault.showError)
		}
	},
	inner: {}
};

var HEADER_DEFAULTS = {
	dataType: 'text',
	filterType: 'equals',
	filterDisabled: false,
	sortDisabled: false,
	validatorObject: {},
	customValidator: null
};

var STATIC_INNER_ATTRS = {
	selectors: {
		uniqueIdPrefix: 'virtual-data-grid-',
		headerRow: 'header-row',
		headerCell: 'header-cell',
		bufferHeaderCell: 'buffer-header-cell',
		sortCell: 'sort-cell',
		sortIcon: 'sort-icon',
		sortDisabled: 'sort-disabled',
		filterRow: 'filter-row',
		filterCell: 'filter-cell',
		filterDisabled: 'filter-disabled',
		filterContainer: 'filter-container',
		filterSearchIcon: 'filter-search-icon',
		filterClearIcon: 'filter-clear-icon',
		filteredOutRow: 'filtered-out',
		dataRow: 'data-row',
		dataCell: 'data-cell',
		cellDataContainer: 'cell-data-container',
		overflowedCell: 'overflowed-cell'
	},
	dimensions: {},
	icons: {
		sort: {
			asc: 'fa fa-arrow-down',
			desc: 'fa fa-arrow-up'
		},
		filter: {
			search: 'fa fa-search',
			clear: 'fa fa-times'
		}
	},
	editedValues: { },
	sort: { },
	filters: { },
	minBufferWidth: 2,
};

function init(config, options) {
	initConfigObject(config);

	updateValue(config, options, 'selectors.mainContainer');
	updateValue(config, options, 'selectors.fixedContainer');
	updateValue(config, options, 'selectors.fixedHeaderContainer');
	updateValue(config, options, 'selectors.fixedTable');
	updateValue(config, options, 'selectors.fixedHeaderTable');
	updateValue(config, options, 'selectors.dataContainer');
	updateValue(config, options, 'selectors.dataHeaderContainer');
	updateValue(config, options, 'selectors.dataTable');
	updateValue(config, options, 'selectors.dataHeaderTable');
	updateValue(config, options, 'selectors.editingCell');
	updateValue(config, options, 'selectors.editedCell');
	updateValue(config, options, 'selectors.saveButton');

	updateValue(config, options, 'uniqueId');
	updateValue(config, options, 'headers');
	updateValue(config, options, 'locale.name');
	updateValue(config, options, 'dataSource');
	updateValue(config, options, 'fixedHeaders');
	updateValue(config, options, 'uniqueRowKey');
	updateValue(config, options, 'autoResize');

	updateValue(config, options, 'edit.enabled');
	updateValue(config, options, 'edit.mode');
	updateValue(config, options, 'edit.validate');
	updateValue(config, options, 'filter.enabled');
	updateValue(config, options, 'filter.customFilter');
	updateValue(config, options, 'sort.enabled');
	updateValue(config, options, 'sort.default');
	updateValue(config, options, 'sort.customSort');
	updateValue(config, options, 'debug');

	updateValue(config, options, 'dimensions.cellWidth');
	updateValue(config, options, 'dimensions.cellHeight');
	updateValue(config, options, 'dimensions.cellPaddingVertical');
	updateValue(config, options, 'dimensions.cellPaddingHorizontal');
	updateValue(config, options, 'dimensions.cellBorderWidth');
	updateValue(config, options, 'dimensions.containerHeight');
	updateValue(config, options, 'dimensions.lockCellHeight');

	updateValue(config, options, 'eventHandlers.onBeforeEdit');
	updateValue(config, options, 'eventHandlers.onValidation');
	updateValue(config, options, 'eventHandlers.onAfterEdit');
	updateValue(config, options, 'eventHandlers.onBeforeSave');
	updateValue(config, options, 'eventHandlers.onSaveRow');
	updateValue(config, options, 'eventHandlers.onSaveBatch');
	updateValue(config, options, 'eventHandlers.onAfterSave');

	// Tooltip module
	updateValue(config, options, 'modules.tooltip.enabled');
	updateValue(config, options, 'modules.tooltip.show');
	updateValue(config, options, 'modules.tooltip.hide');
	updateValue(config, options, 'modules.tooltip.hideAll');
	updateValue(config, options, 'modules.tooltip.showInfo');
	updateValue(config, options, 'modules.tooltip.showWarn');
	updateValue(config, options, 'modules.tooltip.showError');

	calculateUniqueIdSelector(config);

	initHeaderData(config);
	initDataSource(config, options.uniqueRowKey);
	initCalculatedValues(config);
}

function initConfigObject(config) {
	config.selectors = {};
	config.eventHandlers = {};
	config.locale = {};
	config.inner = dataUtil.cloneObject(STATIC_INNER_ATTRS);
}

function calculateUniqueIdSelector(config) {
	config.inner.selectors.uniqueId = config.inner.selectors.uniqueIdPrefix + config.uniqueId;
}

function initCalculatedValues(config) {
	// Annak a header sornak az indexe, ami a cella kulcsokat is meghatározza. Mivel ez mindig az utolsó lesz, ezért TODO: Kiszedni/átalakítani
	config.inner.indexOfCellKeyHeader = configUtil.getIndexOfCellKeyHeader(config);
	config.inner.originalDataSource = [].concat(config.dataSource);
	config.inner.dimensions.scrollLineHeight = configUtil.getScrollLineHeight();
	config.inner.dimensions.scrollPageHeight = configUtil.getScrollPageHeight();
}

function initHeaderData(config) {
	var processedHeaders = [],
		processedFixedHeaders = [];

	config.headers.forEach(function(headerRow) {
		var hRow = [];

		headerRow.forEach(function(headerCell) {
			if (typeof headerCell.dataType == 'undefined') {
				headerCell.dataType = HEADER_DEFAULTS.dataType;
			}

			if (typeof headerCell.filterType == 'undefined') {
				headerCell.filterType = HEADER_DEFAULTS.filterType;
			}

			if (typeof headerCell.filterDisabled == 'undefined') {
				headerCell.filterDisabled = HEADER_DEFAULTS.filterDisabled;
			}

			if (typeof headerCell.sortDisabled == 'undefined') {
				headerCell.sortDisabled = HEADER_DEFAULTS.sortDisabled;
			}

			if (typeof headerCell.validatorObject == 'undefined') {
				headerCell.validatorObject = HEADER_DEFAULTS.validatorObject;
			}

			if (typeof headerCell.customValidator == 'undefined') {
				headerCell.customValidator = HEADER_DEFAULTS.customValidator;
			}

			if (typeof headerCell.width == 'undefined') {
				headerCell.width = config.dimensions.cellWidth;
			}

			hRow.push(headerCell);

			if (typeof headerCell.colspan != 'undefined') {
				for (var i = 1; i < headerCell.colspan; i++) {
					hRow.push({});
				}
			}
		});

		processedHeaders.push(hRow);
	});

	config.fixedHeaders.forEach(function(headerRow) {
		var hRow = [];

		headerRow.forEach(function(headerCell) {
			if (typeof headerCell.dataType == 'undefined') {
				headerCell.dataType = HEADER_DEFAULTS.dataType;
			}

			if (typeof headerCell.filterType == 'undefined') {
				headerCell.filterType = HEADER_DEFAULTS.filterType;
			}

			if (typeof headerCell.filterDisabled == 'undefined') {
				headerCell.filterDisabled = HEADER_DEFAULTS.filterDisabled;
			}

			if (typeof headerCell.sortDisabled == 'undefined') {
				headerCell.sortDisabled = HEADER_DEFAULTS.sortDisabled;
			}

			if (typeof headerCell.width == 'undefined') {
				headerCell.width = config.dimensions.cellWidth;
			}

			hRow.push(headerCell);

			if (typeof headerCell.colspan != 'undefined') {
				for (var i = 1; i < headerCell.colspan; i++) {
					hRow.push({});
				}
			}
		});

		processedFixedHeaders.push(hRow);
	});

	config.headers = processedHeaders;
	config.fixedHeaders = processedFixedHeaders;
}

function initDataSource(config, uniqueRowKey) {
	if (typeof uniqueRowKey == 'undefined') {
		for (var i = 0; i < config.dataSource.length; i++) {
			config.dataSource[i][config.uniqueRowKey] = i;
		}
	}
}

function updateValue(config, options, key) {
	var target = getInnerObject(config, key), // eslint-disable-line no-unused-vars
		value = getInnerValue(options, key),
		keys = key.split('.'),
		lastKey = keys[keys.length - 1];

	if (typeof value == 'undefined') {
		target[lastKey] = typeof getInnerValue(DEFAULTS, key) == 'function' ? getInnerValue(DEFAULTS, key)(config) : getInnerValue(DEFAULTS, key);
	} else {
		target[lastKey] = value;
	}
}

function getInnerObject(object, key) {
	if (key.indexOf('.') === -1) {
		return object;
	}

	var subKey = key.split('.')[0],
		subObject = object[subKey];

	if (typeof subObject == 'undefined') {
		object[subKey] = {};
		subObject = object[subKey];
	}

	return getInnerObject(subObject, key.substring(key.indexOf('.') + 1));
}

function getInnerValue(object, key) {
	if (key.indexOf('.') === -1) {
		return object[key];
	}

	var subKey = key.split('.')[0],
		subObject = object[subKey];

	if (typeof subObject == 'undefined') {
		return subObject;
	}

	return getInnerValue(subObject, key.substring(key.indexOf('.') + 1));
}

module.exports = {
	init: init,
	DEFAULTS: DEFAULTS
};
},{"../configs/defaults/tooltip":2,"../utils/configuration":30,"../utils/data":31}],4:[function(require,module,exports){
'use strict';

function createDataContainer(config, cellNode, cellObj, data) {
	var dataContainer = document.createElement('div');

	dataContainer.classList.add(config.inner.selectors.cellDataContainer);
	dataContainer.style.minWidth = cellObj.width + 'px';
	dataContainer.style.width = cellObj.width + 'px';
	dataContainer.style.padding = config.dimensions.cellPaddingVertical + 'px ' + config.dimensions.cellPaddingHorizontal + 'px';

	if (config.dimensions.lockCellHeight) {
		var maxHeight = config.dimensions.cellHeight - config.dimensions.cellBorderWidth - config.dimensions.cellPaddingVertical * 2;

		dataContainer.style.maxHeight = maxHeight + 'px';
	}

	cellNode.appendChild(dataContainer);

	if (typeof data != 'undefined') {
		updateDataContainer(config, cellNode, data);
	}

	return dataContainer;
}

function createHeaderData(config, cellNode, cellObj, isLastRow) {
	var innerHTML = '',
		columnText = cellObj.text || cellObj.key || '';

	if (config.sort.enabled && !cellObj.sortDisabled && isLastRow) {
		var attribute = cellObj.key,
			direction = typeof attribute != 'undefined' && config.inner.sort.attribute === attribute ? config.inner.sort.direction : 'none',
			isSorted = direction !== 'none',
			iconClass = direction === 'down' ? config.inner.icons.sort.asc : config.inner.icons.sort.desc,
			iconElementClass = config.inner.selectors.sortIcon + (isSorted ? ' ' + iconClass : ' hidden');

		innerHTML += '<i class="' + iconElementClass + '" aria-hidden="true"></i>';

		cellNode.setAttribute('data-attribute', attribute);
	}

	innerHTML += columnText;

	return innerHTML;
}

function createFilterData(config, cellNode, cellObj, filterObj) {
	var innerHTML = '',
		iconClass = config.inner.icons.filter.search,
		iconElementClass = config.inner.selectors.filterSearchIcon + ' ' + iconClass,
		clearIconClass = config.inner.icons.filter.clear,
		clearIconElementClass = config.inner.selectors.filterClearIcon + ' ' + clearIconClass;

	if (!cellObj.filterDisabled) {
		innerHTML += '<i class="' + iconElementClass + '" aria-hidden="true"></i>';
		innerHTML += filterObj.value || '';

		if (typeof filterObj.value != 'undefined' && filterObj.value !== '') {
			innerHTML += '<i class="' + clearIconElementClass + '" aria-hidden="true"></i>';
		}
	}

	return innerHTML;
}

function updateDataContainer(config, cellNode, data) {
	var dataContainer = cellNode.querySelector('.' + config.inner.selectors.cellDataContainer);

	if (typeof data == 'undefined' || data === null) {
		dataContainer.innerHTML = '';
		cellNode.title = '';
	} else if (data.nodeType) { // If its an Element object
		dataContainer.innerHTML = '';
		dataContainer.appendChild(data);
		cellNode.title = data.textContent;
	} else { // else just add to the containers innerHTML
		dataContainer.innerHTML = data;
		cellNode.title = dataContainer.textContent;
	}
}

function updateCell(config, cellNode, cellData) {
	updateDataContainer(config, cellNode, cellData.getValue());

	cellNode.className = config.inner.selectors.dataCell + ' ' + (cellData.class || '');
}

module.exports = {
	createDataContainer: createDataContainer,
	createHeaderData: createHeaderData,
	createFilterData: createFilterData,
	updateDataContainer: updateDataContainer,
	updateCell: updateCell
};
},{}],5:[function(require,module,exports){
'use strict';

var dataUtil = require('../utils/data');

function createContainer(config) {
	var filterContainer       = document.createElement('div'),
		clearIconClass        = config.inner.icons.filter.clear,
		clearIconElementClass = config.inner.selectors.filterClearIcon + ' ' + clearIconClass;

	filterContainer.classList.add(config.inner.selectors.filterContainer);
	filterContainer.innerHTML = '<input><i class="' + clearIconElementClass + '" aria-hidden="true"></i>';

	return filterContainer;
}

function updateInput(config, cellNode, filterObj, headerObj, finishEditingFilter) {
	var filterContainer = cellNode.querySelector('.' + config.inner.selectors.filterContainer),
		filterInput = filterContainer.querySelector('input');

	filterInput.setAttribute('type', filterObj.dataType);
	filterInput.value = filterObj.value;
	filterInput.focus();
	filterInput.addEventListener('keyup', function(event) {
		if ((event.keyCode || event.which) === 13) { // Enter key
			filterObj.value = dataUtil.getValueByType(filterInput.value, filterObj.dataType);

			finishEditingFilter(config, cellNode, headerObj, filterObj);
		} else if ((event.keyCode || event.which) === 27) { // Escape key
			finishEditingFilter(config, cellNode, headerObj, filterObj);
		}
	});

	return filterInput;
}

module.exports = {
	createContainer: createContainer,
	updateInput: updateInput
};
},{"../utils/data":31}],6:[function(require,module,exports){
'use strict';

function createInputNode(cellData, eventInstances) {
	var inputNode = document.createElement('input');

	inputNode.value = cellData.getValue();
	inputNode.style.minWidth = '10px'; // TODO: Kiszervezni osztályba
	inputNode.style.width = '80%'; // TODO: Kiszervezni osztályba
	inputNode.setAttribute('type', cellData.dataType);
	inputNode.addEventListener('blur', eventInstances.onInputBlurEventHandler);
	inputNode.addEventListener('keyup', eventInstances.onInputKeyUpEventHandler);

	return inputNode;
}

module.exports = {
	createInputNode: createInputNode
};
},{}],7:[function(require,module,exports){
'use strict';

var Class = require('class-256.js');

module.exports = Class.extend(function() {
	var self = this;

	self.constructor = function(attributes, params) {
		if (typeof attributes == 'undefined') {
			return;
		}

		attributes.forEach(function(attr) {
			self[attr] = typeof params == 'undefined' || typeof params[attr] == 'undefined' ? null : params[attr];
		});
	};

	this.updateAttributes = function(attrs) {
		Object.keys(attrs).forEach(function(k) {
			if (typeof attrs[k] != 'undefined' && typeof self[k] != 'undefined') {
				self[k] = attrs[k];
			}
		});
	};
});
},{"class-256.js":35}],8:[function(require,module,exports){
'use strict';

function CellObject(p) {
	var self = this;

	initAttr('key');
	initAttr('value');
	initAttr('editedValue');
	initAttr('dataType');
	initAttr('class');
	initAttr('rowNumber');
	initAttr('columnNumber');
	initAttr('validatorObject');
	initAttr('customValidator');

	function initAttr(name) {
		self[name] = typeof p == 'undefined' || typeof p[name] == 'undefined' ? null : p[name];
	}

	this.updateAttributes = function(attrs) {
		Object.keys(attrs).forEach(function(k) {
			if (typeof attrs[k] != 'undefined' && typeof self[k] != 'undefined') {
				self[k] = attrs[k];
			}
		});
	};

	this.getValue = function() {
		return self.cellChanged ? self.editedValue : self.value;
	};

	this.updateValue = function(value) {
		if (self.dataType === 'number') {
			value = isNaN(parseFloat(value)) ? 0 : parseFloat(value);
		}

		if (self.value === value || self.value === null && typeof value == 'undefined') {
			self.editedValue = null;
			self.cellChanged = false;
		} else {
			self.editedValue = value;
			self.cellChanged = true;
		}
	};

	this.discardChangedValue = function() {
		self.editedValue = null;
	};

	this.isCellChanged = function() {
		return self.cellChanged;
	};
}

module.exports = CellObject;
},{}],9:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],10:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'savedRows'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],11:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],12:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'editedRows',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],13:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"../base":7,"dup":12}],14:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'editedRow',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],15:[function(require,module,exports){
'use strict';

var BaseClass = require('../base');

var ATTRIBUTES = [
	'cellNode',
	'cellData',
	'isDataValid',
	'validationResult',
	'cancelEvent'
];

module.exports = BaseClass.extend(function(parent) {
	var self = this;

	self.constructor = function(params) {
		parent.constructor.call(self, ATTRIBUTES, params);
	};
});
},{"../base":7}],16:[function(require,module,exports){
'use strict';

var generator = require('../../modules/generator');

var uniqueIdSequence = 1;

function VirtualDataGrid() {
	var self = this;

	self.configuration = {};
	self.uniqueId = uniqueIdSequence++;
	self.DEFAULT_OPTIONS = generator.getDefaultOptions();
	self.generateTable = function(options) {
		options.uniqueId = self.uniqueId;

		generator.generateTable(self.configuration, options);
	};
	self.destroyTable = function() {
		generator.destroyTable(self.configuration);
	};
	self.getId = function() {
		return self.uniqueId;
	};
}

module.exports = VirtualDataGrid;
},{"../../modules/generator":20}],17:[function(require,module,exports){
'use strict';

var BeforeEditArgs = require('../models/event-arguments/before-edit'),
	BeforeSaveArgs = require('../models/event-arguments/before-save'),
	ValidationArgs = require('../models/event-arguments/validation'),
	SaveRowArgs    = require('../models/event-arguments/save-row'),
	SaveBatchArgs  = require('../models/event-arguments/save-batch'),
	AfterEditArgs  = require('../models/event-arguments/after-edit'),
	AfterSaveArgs  = require('../models/event-arguments/after-save'),
	cellElement    = require('../elements/cell'),
	inputElement   = require('../elements/input'),
	tableModule    = require('../modules/table'),
	validation     = require('../modules/validation'),
	tableUtil      = require('../utils/table'),
	domUtil        = require('../utils/dom'),
	filterModule   = require('../modules/filter');

function startEditingCell(config, cellNode, instances, eventHandlers) {
	if (!config.edit.enabled) {
		return;
	}

	var rowNumber = domUtil.getRowNumber(config, cellNode),
		columnNumber = domUtil.getColumnNumber(config, cellNode);

	if (rowNumber >= config.dataSource.length) {
		return;
	}

	var cellData = tableUtil.getCellData(config, rowNumber, columnNumber);

	var beforeEditArgs = new BeforeEditArgs({
		cellNode: cellNode,
		cellData: cellData,
		cancelEvent: false
	});

	config.eventHandlers.onBeforeEdit(beforeEditArgs);

	if (!beforeEditArgs.cancelEvent) {
		cellNode.classList.add(config.selectors.editingCell);
		cellNode.classList.remove(config.selectors.editedCell);

		instances.onInputBlurEventHandler = function(ev) { eventHandlers.onInputBlurEventHandler(ev, config); };
		instances.onInputKeyUpEventHandler = function(ev) { eventHandlers.onInputKeyUpEventHandler(ev, config); };

		var inputNode = inputElement.createInputNode(cellData, instances);

		cellElement.updateDataContainer(config, cellNode, inputNode);

		inputNode.focus();
	}
}

function finishEditingCell(config, inputNode, eventHandlers) {
	var cellNode = inputNode.parentNode.parentNode,
		rowNumber = domUtil.getRowNumber(config, cellNode),
		columnNumber = domUtil.getColumnNumber(config, cellNode),
		cellData = tableUtil.getCellData(config, rowNumber, columnNumber),
		updatedValue = inputNode.value;

	cellData.updateAttributes({ class: config.selectors.editedCell });
	cellData.updateValue(updatedValue);

	if (!cellData.isCellChanged()) {
		tableModule.resetEditingCell(config, eventHandlers);

		return;
	}

	var validationEnabled = config.edit.validate;

	var validationResult = validation.validate(config, cellData),
		isDataValid = validationResult.length === 0,
		validationArgs = new ValidationArgs({
			cellNode: cellNode,
			cellData: cellData,
			isDataValid: isDataValid,
			validationResult: validationResult,
			cancelEvent: !isDataValid
		});

	if (validationEnabled) {
		config.eventHandlers.onValidation(validationArgs);
	}

	if (validationArgs.cancelEvent !== true) {
		tableUtil.storeUpdatedCellValue(config, cellData);
		cellElement.updateCell(config, cellNode, cellData);

		var afterEditArgs = new AfterEditArgs({
			cellNode: cellNode,
			cellData: cellData
		});

		config.eventHandlers.onAfterEdit(afterEditArgs);

		filterModule.filter(config);
	} else if (validationEnabled && !isDataValid) {
		validation.showErrors(validationResult);
	}
}

function cancelEditingCell() {
	return '';
}

function saveCells(config) {
	if (!config.edit.enabled) {
		return;
	}

	var beforeSaveArgs = new BeforeSaveArgs({
		editedRows: config.inner.editedValues,
		cancelEvent: false
	});

	config.eventHandlers.onBeforeSave(beforeSaveArgs);

	if (beforeSaveArgs.cancelEvent) {
		return;
	}

	if (config.edit.mode === 'row') { // Row mode
		var saveRowArgs = new SaveRowArgs({ cancelEvent: false });

		config.dataSource.forEach(function(row) {
			saveRowArgs = new SaveRowArgs({
				editedRow: config.inner.editedValues,
				cancelEvent: false
			});

			if (!saveRowArgs.cancelEvent) {
				config.eventHandlers.onSavingRow(saveRowArgs);
			}

			if (!saveRowArgs.cancelEvent) {
				tableUtil.persistRowValues(config, row);
			}
		});

		if (!saveRowArgs.cancelEvent) {
			return;
		}
	} else if (config.edit.mode === 'batch') { // Batch mode
		var saveBatchArgs = new SaveBatchArgs({
			editedRows: config.inner.editedValues,
			cancelEvent: false
		});

		config.eventHandlers.onSavingBatch(saveBatchArgs);

		if (saveBatchArgs.cancelEvent) {
			return;
		}

		tableUtil.persistBatchValues(config);
	}

	var afterSaveArgs = new AfterSaveArgs({
		savedRows: config.inner.editedValues
	});

	tableModule.resetEditedCells(config);

	config.eventHandlers.onAfterSave(afterSaveArgs);
}

module.exports = {
	startEditingCell: startEditingCell,
	finishEditingCell: finishEditingCell,
	cancelEditingCell: cancelEditingCell,
	saveCells: saveCells
};
},{"../elements/cell":4,"../elements/input":6,"../models/event-arguments/after-edit":9,"../models/event-arguments/after-save":10,"../models/event-arguments/before-edit":11,"../models/event-arguments/before-save":12,"../models/event-arguments/save-batch":13,"../models/event-arguments/save-row":14,"../models/event-arguments/validation":15,"../modules/filter":19,"../modules/table":22,"../modules/validation":24,"../utils/dom":32,"../utils/table":34}],18:[function(require,module,exports){
'use strict';

var domUtil       = require('../utils/dom'),
	keyboardUtil  = require('../utils/keyboard'),
	sortModule    = require('../modules/sort'),
	editModule    = require('../modules/edit'),
	tableModule   = require('../modules/table'),
	filterModule  = require('../modules/filter'),
	tooltipModule = require('../modules/tooltip');

var container;

var instances = {
	onScrollEventHandler: function() {},
	onWheelEventHandler: function() {},
	onInputBlurEventHandler: function() {},
	onClickCellEventHandler: function() {},
	onClickSaveButtonEventHandler: function() {},
	onClickSortHeader: function() {},
	onClickFilterHeader: function() {},
	onMouseEnterCellWithTitle: function() {},
	onMouseLeaveCellWithTitle: function() {},
};

function onWheelEventHandler(event, config) {
	event.preventDefault();

	if (event.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
		container.scrollTop += event.deltaY;
		container.scrollLeft += event.deltaX;
	} else if (event.deltaMode === WheelEvent.DOM_DELTA_LINE) {
		container.scrollTop += event.deltaY * config.inner.dimensions.scrollLineHeight;
		container.scrollLeft += event.deltaX * config.inner.dimensions.scrollLineHeight;
	} else if (event.deltaMode === WheelEvent.DOM_DELTA_PAGE) {
		container.scrollTop += event.deltaY * config.inner.dimensions.scrollPageHeight;
		container.scrollLeft += event.deltaX * config.inner.dimensions.scrollPageHeight;
	}
}

function onScrollEventHandler(event, config) {
	tooltipModule.hideAll(config);

	tableModule.scrollTables(config);
}

function onClickCellEventHandler(event, config) {
	if (!event.target.matches('.' + config.inner.selectors.cellDataContainer)) {
		return;
	}

	editModule.startEditingCell(config, event.target.parentNode, instances, {
		onInputBlurEventHandler: onInputBlurEventHandler,
		onInputKeyUpEventHandler: onInputKeyUpEventHandler
	});
}

function onInputBlurEventHandler(event, config) {
	editModule.finishEditingCell(config, event.target, {
		onInputBlurEventHandler: onInputBlurEventHandler,
		onInputKeyUpEventHandler: onInputKeyUpEventHandler
	});
}

function onInputKeyUpEventHandler(event, config) {
	var keyCode = keyboardUtil.getKeyCode(event);

	switch (keyCode) {
		case keyboardUtil.KEY_CODES.ENTER:
			event.target.removeEventListener('blur', instances.onInputBlurEventHandler);
			editModule.finishEditingCell(config, event.target, {
				onInputBlurEventHandler: onInputBlurEventHandler,
				onInputKeyUpEventHandler: onInputKeyUpEventHandler
			});
			break;
		case keyboardUtil.KEY_CODES.ESCAPE:
			editModule.cancelEditingCell(config, event.target, {
				onInputBlurEventHandler: onInputBlurEventHandler,
				onInputKeyUpEventHandler: onInputKeyUpEventHandler
			});
			break;
		default:
			break;
	}
}

function onClickSaveButtonEventHandler(event, config) {
	editModule.saveCells(config);
}

function onClickSortHeader(event, config) {
	var sortCellSelector = '.' + config.inner.selectors.sortCell,
		sortContainerSelector = sortCellSelector + ' .' + config.inner.selectors.cellDataContainer,
		sortDisabledSelector = '.' + config.inner.selectors.sortDisabled,
		sortIconSelector = sortCellSelector + ' .' + config.inner.selectors.sortIcon;

	if (!event.target.matches(sortContainerSelector) &&
		!event.target.matches(sortIconSelector) ||
		event.target.matches(sortDisabledSelector)) {
		return;
	}

	if (event.target.matches(sortIconSelector)) {
		sortModule.resetSort(config);
	}

	if (event.target.matches(sortContainerSelector)) {
		sortModule.sortByColumn(config, domUtil.findParentNode(event.target, sortCellSelector));
	}
}

function onClickFilterHeader(event, config) {
	var filterCellSelector = '.' + config.inner.selectors.filterCell,
		filterContainerSelector = filterCellSelector + ' .' + config.inner.selectors.cellDataContainer,
		filterDisabledSelector = '.' + config.inner.selectors.filterDisabled,
		filterSearchIconSelector = filterCellSelector + ' .' + config.inner.selectors.filterSearchIcon,
		filterClearIconSelector = filterCellSelector + ' .' + config.inner.selectors.filterClearIcon,
		cellNode = domUtil.findParentNode(event.target, filterCellSelector);

	if (!event.target.matches(filterContainerSelector) &&
		!event.target.matches(filterSearchIconSelector) &&
		!event.target.matches(filterClearIconSelector) ||
		cellNode.matches(filterDisabledSelector)) {

		return;
	}

	if (event.target.matches(filterClearIconSelector)) {
		filterModule.clearFilter(config, cellNode);

		return;
	}

	filterModule.startEditingFilter(config, cellNode);
}

function onMouseEnterCellWithTitle(event, config) {
	tooltipModule.onMouseEnterCellWithTitle(config, event.target);
}

function onMouseLeaveCellWithTitle(event, config) {
	tooltipModule.onMouseLeaveCellWithTitle(config, event.target);
}

function init(config) {
	container = document.querySelector('.' + config.selectors.dataContainer);

	instances.onScrollEventHandler = function(event) { onScrollEventHandler(event, config); };
	instances.onWheelEventHandler = function(event) { onWheelEventHandler(event, config); };
	instances.onClickCellEventHandler = function(event) { onClickCellEventHandler(event, config); };
	instances.onClickSaveButtonEventHandler = function(event) { onClickSaveButtonEventHandler(event, config); };
	instances.onClickSortHeader = function(event) { onClickSortHeader(event, config); };
	instances.onClickFilterHeader = function(event) { onClickFilterHeader(event, config); };
	instances.onMouseEnterCellWithTitle = function(event) { onMouseEnterCellWithTitle(event, config); };
	instances.onMouseLeaveCellWithTitle = function(event) { onMouseLeaveCellWithTitle(event, config); };

	if (container !== null) {
		container.addEventListener('wheel', instances.onWheelEventHandler, { passive: false, capture: true });
		container.addEventListener('scroll', instances.onScrollEventHandler);
	}

	if (config.modules.tooltip.enabled) {
		document.querySelectorAll('[title]').forEach(function(el) {
			el.addEventListener('mouseenter', instances.onMouseEnterCellWithTitle);
			el.addEventListener('mouseleave', instances.onMouseLeaveCellWithTitle);
		});
	}

	if (config.edit.enabled && config.selectors.saveButton !== null) {
		document.querySelector(config.selectors.saveButton).addEventListener('click', instances.onClickSaveButtonEventHandler);
	}

	if (config.edit.enabled) {
		document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.inner.selectors.dataCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickCellEventHandler);
		});
	}

	if (config.sort.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.sortCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickSortHeader);
		});
	}

	if (config.filter.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.filterCell).forEach(function(el) {
			el.addEventListener('click', instances.onClickFilterHeader);
		});
	}
}

function remove(config) {
	container = document.querySelector('.' + config.selectors.dataContainer);

	if (container !== null) {
		container.removeEventListener('wheel', instances.onWheelEventHandler);
		container.removeEventListener('scroll', instances.onScrollEventHandler);
	}

	if (config.modules.tooltip.enabled) {
		document.querySelectorAll('[title]').forEach(function(el) {
			el.removeEventListener('mouseenter', instances.onMouseEnterCellWithTitle);
			el.removeEventListener('mouseleave', instances.onMouseLeaveCellWithTitle);
		});
	}

	if (config.edit.enabled && config.selectors.saveButton !== null) {
		document.querySelector(config.selectors.saveButton).removeEventListener('click', instances.onClickSaveButtonEventHandler);
	}

	if (config.edit.enabled) {
		document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.inner.selectors.dataCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickCellEventHandler);
		});
	}

	if (config.sort.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.sortCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickSortHeader);
		});
	}

	if (config.filter.enabled) {
		document.querySelectorAll('#' + config.inner.selectors.uniqueId + ' td.' + config.inner.selectors.filterCell).forEach(function(el) {
			el.removeEventListener('click', instances.onClickFilterHeader);
		});
	}
}

module.exports = {
	init: init,
	remove: remove
};
},{"../modules/edit":17,"../modules/filter":19,"../modules/sort":21,"../modules/table":22,"../modules/tooltip":23,"../utils/dom":32,"../utils/keyboard":33}],19:[function(require,module,exports){
'use strict';

var tableModule   = require('../modules/table'),
	sortModule    = require('../modules/sort'),
	dataUtil      = require('../utils/data'),
	configUtil    = require('../utils/configuration'),
	cellElement   = require('../elements/cell'),
	filterElement = require('../elements/filter');

function startEditingFilter(config, cellNode) {
	if (cellNode.querySelector('.' + config.inner.selectors.filterContainer) !== null) {
		return;
	}

	var attribute = cellNode.getAttribute('data-attribute'),
		filterObj = config.inner.filters[attribute] || {},
		headerObj = configUtil.getHeaderObject(config, attribute);

	filterObj.attribute = attribute;
	filterObj.dataType = headerObj.dataType;
	filterObj.filterType = headerObj.filterType;
	filterObj.value = filterObj.value || '';

	config.inner.filters[attribute] = filterObj;

	var filterContainer = filterElement.createContainer(config);

	cellElement.updateDataContainer(config, cellNode, filterContainer);

	var filterInput = filterElement.updateInput(config, cellNode, filterObj, headerObj, finishEditingFilter);

	filterInput.focus();
}

function filter(config, sortAfterFiltering) {
	sortAfterFiltering = sortAfterFiltering !== false;

	config.dataSource = config.inner.originalDataSource;

	Object.keys(config.inner.filters).forEach(function(key) {
		var filterObj = config.inner.filters[key];

		if (typeof filterObj.value == 'undefined' || filterObj.value === '') {
			return;
		}

		if (filterObj.filterType === 'custom') {
			if (config.filter.customFilter !== null) {
				config.dataSource = config.filter.customFilter({
					dataSource: config.dataSource,
					attribute: filterObj.attribute,
					value: filterObj.value,
					editedValues: config.inner.editedValues,
					uniqueRowKey: config.uniqueRowKey
				});
			}
		} else {
			config.dataSource = dataUtil.filterData({
				dataSource: config.dataSource,
				attribute: filterObj.attribute,
				filterType: filterObj.filterType,
				valueOne: filterObj.value,
				valueTwo: filterObj.valueTwo,
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}
	});

	filterOutEmptyRows(config);

	if (sortAfterFiltering) {
		sortModule.sort(config, false);
	}

	tableModule.updateTable(config);
}

function clearFilter(config, cellNode) {
	var attribute = cellNode.getAttribute('data-attribute'),
		cellObj = configUtil.getHeaderObject(config, attribute),
		filterObj = config.inner.filters[attribute];

	filterObj.value = '';

	var newFilters = {};

	Object.keys(config.inner.filters).forEach(function(key) {
		if (key !== attribute) {
			newFilters[key] = config.inner.filters[key];
		}
	});

	config.inner.filters = newFilters;

	finishEditingFilter(config, cellNode, cellObj, filterObj);
}

function finishEditingFilter(config, cellNode, cellObj, filterObj) {
	cellElement.updateDataContainer(config, cellNode, cellElement.createFilterData(config, cellNode, cellObj, filterObj));

	filter(config);
}

function filterOutEmptyRows(config) {
	var dsLength = config.dataSource.length;

	document.querySelectorAll('.' + config.selectors.dataTable + ' tr.' + config.inner.selectors.dataRow).forEach(function(row, rowNumber) {
		row.classList.toggle(config.inner.selectors.filteredOutRow, dsLength <= rowNumber);
	});

	// Fixed cell data row update
	document.querySelectorAll('.' + config.selectors.fixedTable + ' tr.' + config.inner.selectors.dataRow).forEach(function(row, rowNumber) {
		row.classList.toggle(config.inner.selectors.filteredOutRow, dsLength <= rowNumber);
	});
}

module.exports = {
	startEditingFilter: startEditingFilter,
	filter: filter,
	clearFilter: clearFilter
};
},{"../elements/cell":4,"../elements/filter":5,"../modules/sort":21,"../modules/table":22,"../utils/configuration":30,"../utils/data":31}],20:[function(require,module,exports){
'use strict';

var globalConfig = require('../configs/global'),
	events       = require('../modules/events'),
	tableModule  = require('../modules/table'),
	configUtil   = require('../utils/configuration'),
	dataUtil     = require('../utils/data'),
	cellElement  = require('../elements/cell');

function generateTable(config, options) {
	globalConfig.init(config, options);

	initContainers(config);
	initTable(config);

	tableModule.updateTable(config);

	events.init(config);
}

function destroyTable(config) {
	events.remove(config);

	tableModule.destroyTable(config);
}

function initContainers(config) {
	var mainContainer = document.querySelector(config.selectors.mainContainer),
		dataContainer = document.createElement('div'),
		dataHeaderContainer = document.createElement('div'),
		dataTable = document.createElement('table'),
		dataHeaderTable = document.createElement('table'),
		fixedContainer = document.createElement('div'),
		fixedHeaderContainer = document.createElement('div'),
		fixedTable = document.createElement('table'),
		fixedHeaderTable = document.createElement('table');

	mainContainer.setAttribute('id', config.inner.selectors.uniqueId);

	dataContainer.classList.add(config.selectors.dataContainer);
	dataHeaderContainer.classList.add(config.selectors.dataHeaderContainer);
	dataTable.classList.add(config.selectors.dataTable);
	dataHeaderTable.classList.add(config.selectors.dataHeaderTable);
	fixedContainer.classList.add(config.selectors.fixedContainer);
	fixedHeaderContainer.classList.add(config.selectors.fixedHeaderContainer);
	fixedTable.classList.add(config.selectors.fixedTable);
	fixedHeaderTable.classList.add(config.selectors.fixedHeaderTable);

	mainContainer.appendChild(fixedHeaderContainer);
	fixedHeaderContainer.appendChild(fixedHeaderTable);

	mainContainer.appendChild(dataHeaderContainer);
	dataHeaderContainer.appendChild(dataHeaderTable);

	mainContainer.appendChild(fixedContainer);
	fixedContainer.appendChild(fixedTable);

	mainContainer.appendChild(dataContainer);
	dataContainer.appendChild(dataTable);

	dataContainer.style.maxHeight = config.dimensions.containerHeight + 'px';
	dataContainer.style.height = config.dimensions.containerHeight + 'px';

	fixedContainer.style.maxHeight = config.dimensions.containerHeight + 'px';
	fixedContainer.style.height = config.dimensions.containerHeight + 'px';
}

function initTable(config) {
	// Generate virtual table
	var virtualThead = document.createElement('thead'),
		virtualTbody = document.createElement('tbody'),
		columnsNumber = configUtil.getKeyHeader(config).length,
		rowsNumber = config.dataSource.length;

	var i, j, trHead, trBody, tdElement, cellObj, cellData;

	// Generate virtual header
	config.headers.forEach(function(headerRow, rowCount) {
		var isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.headerRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < columnsNumber; j++) {
			cellObj = headerRow[j];
			cellData = cellElement.createHeaderData(config, tdElement, cellObj, isLastRow);

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.headerCell);

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (isLastRow) {
				tdElement.classList.add(config.inner.selectors.sortCell);

				if (!config.sort.enabled || headerRow[j].sortDisabled) {
					tdElement.classList.add(config.inner.selectors.sortDisabled);
				}
			}

			trHead.appendChild(tdElement);
		}

		// A scrollbr miatti helyhiány miatt van szükség beszúrni a végére
		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferHeaderCell);

		trHead.appendChild(tdElement);

		virtualThead.appendChild(trHead);
	});

	// Generate virtual filter row
	if (config.filter.enabled) {
		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.filterRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < columnsNumber; j++) {
			cellObj = configUtil.getKeyHeader(config)[j];
			cellData = cellElement.createHeaderData(config, tdElement, cellObj, {});

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.filterCell);

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (cellObj.filterDisabled) {
				tdElement.classList.add(config.inner.selectors.filterDisabled);
			}

			trHead.appendChild(tdElement);
		}

		// A scrollbr miatti helyhiány miatt van szükség beszúrni a végére
		tdElement = document.createElement('td');
		tdElement.classList.add(config.inner.selectors.bufferHeaderCell);

		trHead.appendChild(tdElement);

		virtualThead.appendChild(trHead);
	}

	// Generate virtual body
	for (i = 0; i < rowsNumber; i++) {
		trBody = document.createElement('tr');
		trBody.classList.add(config.inner.selectors.dataRow);
		trBody.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < columnsNumber; j++) {
			cellObj = configUtil.getKeyHeader(config)[j];

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.dataCell);

			cellElement.createDataContainer(config, tdElement, cellObj);

			trBody.appendChild(tdElement);
		}

		virtualTbody.appendChild(trBody);
	}

	document.querySelector('.' + config.selectors.dataHeaderTable).appendChild(virtualThead);
	document.querySelector('.' + config.selectors.dataTable).appendChild(virtualTbody);

	// Generate fixed table

	if (config.fixedHeaders.length === 0 || config.fixedHeaders[0].length === 0) {
		document.querySelector('.' + config.selectors.fixedHeaderTable).remove();
		document.querySelector('.' + config.selectors.fixedHeaderContainer).remove();
		document.querySelector('.' + config.selectors.fixedTable).remove();
		document.querySelector('.' + config.selectors.fixedContainer).remove();

		return;
	}

	var fixedThead = document.createElement('thead'),
		fixedTbody = document.createElement('tbody');

	// Generate fixed header

	for (i = 0; i < config.fixedHeaders.length; i++) {
		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.headerRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[i].length; j++) {
			var isLastRow = j === config.fixedHeaders[i].length - 1;

			cellObj = config.fixedHeaders[i][j];
			cellData = cellElement.createHeaderData(config, tdElement, cellObj, isLastRow);

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.headerCell);

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (isLastRow) {
				tdElement.classList.add(config.inner.selectors.sortCell);

				if (!config.sort.enabled || config.fixedHeaders[i][j].sortDisabled) {
					tdElement.classList.add(config.inner.selectors.sortDisabled);
				}
			}

			trHead.appendChild(tdElement);
		}

		fixedThead.appendChild(trHead);
	}

	// Generate fixed filter row

	if (config.filter.enabled &&
		config.fixedHeaders.length > 0 &&
		config.fixedHeaders[config.inner.indexOfCellKeyHeader].length > 0) {

		trHead = document.createElement('tr');
		trHead.classList.add(config.inner.selectors.filterRow);
		trHead.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[config.inner.indexOfCellKeyHeader].length; j++) {
			cellObj = configUtil.getFixedKeyHeader(config)[j];
			cellData = cellElement.createFilterData(config, tdElement, cellObj, {});

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.filterCell);
			tdElement.style.minWidth = config.dimensions.cellWidth + 'px';

			cellElement.createDataContainer(config, tdElement, cellObj, cellData);

			if (cellObj.filterDisabled) {
				tdElement.classList.add(config.inner.selectors.filterDisabled);
			}

			trHead.appendChild(tdElement);
		}

		fixedThead.appendChild(trHead);
	}

	// Generate fixed body

	for (i = 0; i < rowsNumber; i++) {
		trBody = document.createElement('tr');
		trBody.classList.add(config.inner.selectors.dataRow);
		trBody.style.height = config.dimensions.cellHeight + 'px';

		for (j = 0; j < config.fixedHeaders[config.inner.indexOfCellKeyHeader].length; j++) {
			cellObj = configUtil.getFixedKeyHeader(config)[j];

			tdElement = document.createElement('td');
			tdElement.classList.add(config.inner.selectors.dataCell);

			cellElement.createDataContainer(config, tdElement, cellObj);

			trBody.appendChild(tdElement);
		}

		fixedTbody.appendChild(trBody);
	}

	document.querySelector('.' + config.selectors.fixedHeaderTable).appendChild(fixedThead);
	document.querySelector('.' + config.selectors.fixedTable).appendChild(fixedTbody);
}

function getDefaultOptions() {
	return dataUtil.cloneObject(globalConfig.DEFAULTS);
}

module.exports = {
	generateTable: generateTable,
	destroyTable: destroyTable,
	getDefaultOptions: getDefaultOptions
};
},{"../configs/global":3,"../elements/cell":4,"../modules/events":18,"../modules/table":22,"../utils/configuration":30,"../utils/data":31}],21:[function(require,module,exports){
'use strict';

var tableModule = require('../modules/table'),
	configUtil  = require('../utils/configuration'),
	dataUtil    = require('../utils/data');

function sortByColumn(config, column) {
	var attribute = column.getAttribute('data-attribute'),
		headerObj = configUtil.getHeaderObject(config, attribute),
		direction = 'up';

	if (config.inner.sort.attribute === attribute &&
		config.inner.sort.direction === 'up') {

		direction = 'down';
	}

	config.inner.sort.direction = direction;
	config.inner.sort.attribute = attribute;
	config.inner.sort.dataType = headerObj.dataType;

	sort(config);
}

function sort(config, updateTable) {
	updateTable = updateTable !== false;

	config.dataSource.sort(function(a, b) {
		if (config.sort.customSort !== null) {
			return config.sort.customSort(a, b, {
				attribute: config.inner.sort.attribute,
				direction: config.inner.sort.direction,
				dataType: config.inner.sort.dataType,
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}

		var attribute = config.inner.sort.attribute || config.sort.default,
			direction = config.inner.sort.direction || 'down',
			dataType = config.inner.sort.dataType || getSortType(config, config.sort.default);

		return dataUtil.defaultComparator(a, b, {
			attribute: attribute,
			direction: direction,
			dataType: dataType,
			editedValues: config.inner.editedValues,
			uniqueRowKey: config.uniqueRowKey,
			name: config.locale.name
		});
	});

	if (updateTable) {
		tableModule.updateTable(config);
	}
}

function resetSort(config) {
	config.inner.sort.attribute =
	config.inner.sort.direction =
	config.inner.sort.dataType = undefined; // eslint-disable-line no-undefined

	config.dataSource.sort(function(a, b) {
		if (config.sort.customSort !== null) {
			return config.sort.customSort(a, b, {
				attribute: config.sort.default,
				direction: 'down',
				dataType: getSortType(config, config.sort.default),
				editedValues: config.inner.editedValues,
				uniqueRowKey: config.uniqueRowKey
			});
		}

		return dataUtil.defaultComparator(a, b, {
			attribute: config.sort.default,
			direction: 'down',
			dataType: getSortType(config, config.sort.default),
			editedValues: config.inner.editedValues,
			uniqueRowKey: config.uniqueRowKey,
			name: config.locale.name
		});
	});

	tableModule.updateTable(config);
}

function getSortType(config, attribute) {
	var headerObj = configUtil.getHeaderObject(config, attribute);

	return typeof headerObj == 'undefined' || typeof headerObj.dataType == 'undefined' ? 'string' : headerObj.dataType;
}

module.exports = {
	sortByColumn: sortByColumn,
	sort: sort,
	resetSort: resetSort
};
},{"../modules/table":22,"../utils/configuration":30,"../utils/data":31}],22:[function(require,module,exports){
'use strict';

var tableUtil   = require('../utils/table'),
	configUtil  = require('../utils/configuration'),
	cellElement = require('../elements/cell');

function updateTable(config) {
	updateHeader(config);
	updateData(config);
}

function updateHeader(config) {
	var colspan = 1,
		dataHeaderRowList = document.querySelectorAll('.' + config.selectors.dataHeaderTable + ' tr.' + config.inner.selectors.headerRow),
		fixedHeaderRowList = document.querySelectorAll('.' + config.selectors.fixedHeaderTable + ' tr.' + config.inner.selectors.headerRow);

	// Header cell update
	dataHeaderRowList.forEach(function(row, rowCount) {
		row.querySelectorAll('td.' + config.inner.selectors.headerCell).forEach(function(cell, cellCount) {
			var cellObj = config.headers[rowCount][cellCount],
				isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

			if (colspan > 1) {
				cell.style.display = 'none';
				colspan--;
			} else {
				cellElement.updateDataContainer(config, cell, cellElement.createHeaderData(config, cell, cellObj, isLastRow));

				cell.style.display = 'table-cell';
			}

			if (typeof cellObj.colspan == 'undefined') {
				cell.removeAttribute('colspan');
			} else {
				cell.setAttribute('colspan', cellObj.colspan);

				colspan = cellObj.colspan;
			}
		});

		colspan = 1;
	});

	// Fixed header cell update
	fixedHeaderRowList.forEach(function(row, rowCount) {
		row.querySelectorAll('td.' + config.inner.selectors.headerCell).forEach(function(cell, cellCount) {
			var cellObj = config.fixedHeaders[rowCount][cellCount],
				isLastRow = config.inner.indexOfCellKeyHeader === rowCount;

			cellElement.updateDataContainer(config, cell, cellElement.createHeaderData(config, cell, cellObj, isLastRow));
		});

		updateFixedHeight(config, dataHeaderRowList, row, rowCount);
	});

	// Filter row update
	if (config.filter.enabled) {
		document.querySelectorAll('.' + config.selectors.dataHeaderTable + ' td.' + config.inner.selectors.filterCell).forEach(function(cell, cellCount) {
			var cellObj = configUtil.getKeyHeader(config)[cellCount],
				filterObj = config.inner.filters[cellObj.key] || {},
				currentFilterAttr = cell.getAttribute('data-attribute');

			if (cellObj.key === currentFilterAttr) {
				return;
			}

			cell.setAttribute('data-attribute', cellObj.key);
			cell.classList.toggle(config.inner.selectors.filterDisabled, cellObj.filterDisabled);

			cellElement.updateDataContainer(config, cell, cellElement.createFilterData(config, cell, cellObj, filterObj));
		});

		document.querySelectorAll('.' + config.selectors.fixedHeaderTable + ' td.' + config.inner.selectors.filterCell).forEach(function(cell, cellCount) {
			var cellObj = config.fixedHeaders[config.inner.indexOfCellKeyHeader][cellCount],
				filterObj = config.inner.filters[cellObj.key] || {},
				currentFilterAttr = cell.getAttribute('data-attribute');

			if (cellObj.key === currentFilterAttr) {
				return;
			}

			cell.setAttribute('data-attribute', cellObj.key);
			cell.classList.toggle(config.inner.selectors.filterDisabled, cellObj.filterDisabled);

			cellElement.updateDataContainer(config, cell, cellElement.createFilterData(config, cell, cellObj, filterObj));
		});
	}
}

function updateData(config) {
	var dataRowList = document.querySelectorAll('.' + config.selectors.dataTable + ' tr.' + config.inner.selectors.dataRow),
		fixedRowList = document.querySelectorAll('.' + config.selectors.fixedTable + ' tr.' + config.inner.selectors.dataRow);

	// Cell data row update
	dataRowList.forEach(function(row, rowNumber) {
		row.querySelectorAll('td.' + config.inner.selectors.dataCell).forEach(function(cell, cellNumber) {
			var cellData = tableUtil.getCellData(config, rowNumber, cellNumber);

			cellElement.updateCell(config, cell, cellData);
		});
	});

	// Fixed cell data row update
	fixedRowList.forEach(function(row, rowNumber) {
		row.querySelectorAll('td.' + config.inner.selectors.dataCell).forEach(function(cell, cellNumber) {
			var fixedCellData = tableUtil.getFixedCellData(config, rowNumber, cellNumber);

			cellElement.updateCell(config, cell, fixedCellData);
		});

		updateFixedHeight(config, dataRowList, row, rowNumber);
	});
}

function updateFixedHeight(config, dataRowList, fixedRow, rowNumber) {
	if (config.fixedHeaders.length === 0 || config.dimensions.lockCellHeight) {
		return;
	}

	var dataRow = dataRowList.length < rowNumber ? null : dataRowList[rowNumber];

	if (dataRow === null) {
		return; // It shouldn't be
	}

	var originalHeight = config.dimensions.cellHeight + 'px';

	if (dataRow.style.height !== originalHeight) {
		dataRow.style.height = originalHeight;
	}

	if (fixedRow.style.height !== originalHeight) {
		fixedRow.style.height = originalHeight;
	}

	var dataHeight = dataRow.clientHeight,
		fixedHeight = fixedRow.clientHeight;

	if (dataHeight === fixedHeight) {
		return; // No need for adjustment
	}

	if (dataHeight > fixedHeight) {
		fixedRow.style.height = dataHeight + 'px';
	} else {
		dataRow.style.height = fixedHeight + 'px';
	}
}

function scrollTables(config) {
	var dataContainer = document.querySelector('.' + config.selectors.dataContainer),
		fixedContainer = document.querySelector('.' + config.selectors.fixedContainer),
		dataHeaderContainer = document.querySelector('.' + config.selectors.dataHeaderContainer);

	if (dataContainer === null) {
		return;
	}

	if (fixedContainer !== null) {
		fixedContainer.scrollTop = dataContainer.scrollTop;
	}

	if (dataHeaderContainer !== null) {
		dataHeaderContainer.scrollLeft = dataContainer.scrollLeft;
	}
}

function resetEditingCell(config, eventHandlers) {
	document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.selectors.editingCell).forEach(function(editingCell) {
		var input = editingCell.querySelector('input');

		input.removeEventListener('blur', eventHandlers.onInputBlurEventHandler);
		input.removeEventListener('keyup', eventHandlers.onInputKeyUpEventHandler);

		cellElement.updateDataContainer(config, editingCell, input.value);

		editingCell.classList.remove(config.selectors.editingCell);
	});
}

function resetEditedCells(config) {
	document.querySelectorAll('.' + config.selectors.dataTable + ' td.' + config.selectors.editingCell).forEach(function(editedCell) {
		editedCell.classList.remove(config.selectors.editedCell);
	});
}

function destroyTable(config) {
	document.querySelector(config.selectors.mainContainer).innerHTML = '';
}

module.exports = {
	updateTable: updateTable,
	updateHeader: updateHeader,
	updateData: updateData,
	scrollTables: scrollTables,
	resetEditingCell: resetEditingCell,
	resetEditedCells: resetEditedCells,
	destroyTable: destroyTable
};
},{"../elements/cell":4,"../utils/configuration":30,"../utils/table":34}],23:[function(require,module,exports){
'use strict';

function show(config, options) {
	switch (options.type) {
		case 'info':
			showInfo(config, options);
			break;
		case 'warn':
			showWarn(config, options);
			break;
		case 'error':
			showError(config, options);
			break;
		default:
			config.modules.tooltip.show(options);
			break;
	}
}

function hide(config, element) {
	config.modules.tooltip.hide(element);
}

function hideAll(config) {
	config.modules.tooltip.hideAll();
}

function showInfo(config, options) {
	config.modules.tooltip.showInfo(options);
}

function showWarn(config, options) {
	config.modules.tooltip.showWarn(options);
}

function showError(config, options) {
	config.modules.tooltip.showError(options);
}

function onMouseEnterCellWithTitle(config, element) {
	var cellDataContainer = element === null ? null : element.querySelector('.' + config.inner.selectors.cellDataContainer);

	if (cellDataContainer === null || !element.classList.contains(config.inner.selectors.overflowedCell)) {
		return;
	}

	showInfo(config, {
		element: element,
		text: element.getAttribute('title')
	});
}

function onMouseLeaveCellWithTitle(config, element) {
	hide(config, element);
}

module.exports = {
	show: show,
	hide: hide,
	hideAll: hideAll,
	showInfo: showInfo,
	showWarn: showWarn,
	showError: showError,
	onMouseEnterCellWithTitle: onMouseEnterCellWithTitle,
	onMouseLeaveCellWithTitle: onMouseLeaveCellWithTitle
};
},{}],24:[function(require,module,exports){
'use strict';

var CUSTOM_VALIDATOR_ERROR_MSG = 'Custom validator error';

function validate(config, cellData) {
	if (!config.edit.validate) {
		return [];
	}

	var validationResult = [],
		customValidatorResult = cellData.customValidator === null ? null : cellData.customValidator(cellData);

	if (Array.isArray(customValidatorResult)) {
		validationResult = customValidatorResult;
	} else if (customValidatorResult === false) {
		validationResult.push(CUSTOM_VALIDATOR_ERROR_MSG);
	} else if (customValidatorResult !== null && customValidatorResult !== true) {
		validationResult.push(customValidatorResult);
	}

	return validationResult.concat(validateObject(cellData));
}

function validateObject(cellData) {
	var result = [],
		validatorObject = cellData.validatorObject;

	if (typeof validatorObject == 'undefined' || validatorObject === null) {
		return result;
	}

	Object.keys(validatorObject).forEach(function(key) {
		if (!checkValidationRules(cellData, key, validatorObject[key])) {
			var error = {};

			error[key] = validatorObject[key];

			result.push(error);
		}
	});

	return result;
}

function checkValidationRules(cellData, rule, referenceValue) {
	switch (rule) {
		case 'min':
			return cellData.getValue() >= referenceValue;
		case 'max':
			return cellData.getValue() <= referenceValue;
		default:
			return false;
	}
}

function showErrors(validationResult) {
	window.console.log(JSON.stringify(validationResult));
}

module.exports = {
	validate: validate,
	showErrors: showErrors
};
},{}],25:[function(require,module,exports){
'use strict';

if (typeof Array.prototype.find == 'undefined') {
	Array.prototype.find = function(predicate) { // eslint-disable-line no-extend-native
		if (this === null) {
			throw new TypeError('Array.prototype.find called on null or undefined');
		}

		if (typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}

		var list = Object(this);
		var length = list.length >>> 0;
		var thisArg = arguments[1];
		var value;

		for (var i = 0; i < length; i++) {
			value = list[i];
			if (predicate.call(thisArg, value, i, list)) {
				return value;
			}
		}

		return undefined; // eslint-disable-line no-undefined
	};
}
},{}],26:[function(require,module,exports){
'use strict';

if (!Element.prototype.matches) {
	Element.prototype.matches =
		Element.prototype.matchesSelector ||
		Element.prototype.mozMatchesSelector ||
		Element.prototype.msMatchesSelector ||
		Element.prototype.oMatchesSelector ||
		Element.prototype.webkitMatchesSelector ||
		function(s) {
			var matches = (this.document || this.ownerDocument).querySelectorAll(s),
				i = matches.length;

			while (--i >= 0 && matches.item(i) !== this) {} // eslint-disable-line
			return i > -1;
		};
}
},{}],27:[function(require,module,exports){
'use strict';

[ Element.prototype, CharacterData.prototype, DocumentType.prototype ].forEach(function(item) {
	if (item.hasOwnProperty('remove')) {
		return;
	}
	Object.defineProperty(item, 'remove', {
		configurable: true,
		enumerable: true,
		writable: true,
		value: function remove() {
			if (this.parentNode !== null) {
				this.parentNode.removeChild(this);
			}
		}
	});
});
},{}],28:[function(require,module,exports){
'use strict';

if (!NodeList.prototype.forEach) {
	NodeList.prototype.forEach = function(callback, argument) {
		argument = argument || window;

		for (var i = 0; i < this.length; i++) {
			callback.call(argument, this[i], i, this);
		}
	};
}
},{}],29:[function(require,module,exports){
'use strict';

if (typeof Object.assign != 'function') {
	// Must be writable: true, enumerable: false, configurable: true
	Object.defineProperty(Object, 'assign', {
		value: function assign(target) { // .length of function is 2
			if (target === null) { // TypeError if undefined or null
				throw new TypeError('Cannot convert undefined or null to object');
			}

			var to = Object(target);

			for (var index = 1; index < arguments.length; index++) {
				var nextSource = arguments[index];

				if (nextSource !== null) { // Skip over if undefined or null
					for (var nextKey in nextSource) {
						// Avoid bugs when hasOwnProperty is shadowed
						if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
							to[nextKey] = nextSource[nextKey];
						}
					}
				}
			}
			return to;
		},
		writable: true,
		configurable: true
	});
}
},{}],30:[function(require,module,exports){
'use strict';

function getDefaultContainerHeight(config) {
	return window.innerHeight - document.querySelector(config.selectors.mainContainer).getBoundingClientRect().top -
			(config.headers.length + (config.filter.enabled ? 1 : 0)) * config.dimensions.cellHeight - 52;
}

function getIndexOfCellKeyHeader(config) {
	return config.headers.length - 1;
}

function getSortDefault(config) {
	return config.uniqueRowKey;
}

// Firefox using MouseEvent.DOM_DELTA_LINE || MouseEvent.DOM_DELTA_PAGE instead of exact pixels, when measuring scroll delta values.
// This function will give the exact line height for the pixel conversion
function getScrollLineHeight() {
	var iframe = document.createElement('iframe');

	iframe.src = '#';
	document.body.appendChild(iframe);

	var iwin = iframe.contentWindow,
		idoc = iwin.document;

	idoc.open();
	idoc.write('<!DOCTYPE html><html><head></head><body><span>a</span></body></html>');
	idoc.close();

	var span = idoc.body.firstElementChild,
		r = span.offsetHeight;

	document.body.removeChild(iframe);

	return r;
}

// Firefox using MouseEvent.DOM_DELTA_LINE || MouseEvent.DOM_DELTA_PAGE instead of exact pixels, when measuring scroll delta values.
// This function will give the exact page height for the pixel conversion
function getScrollPageHeight() {
	return window.document.body.clientHeight;
}

function getCellFullWidth(config) {
	return config.dimensions.cellPaddingHorizontal * 2 + config.dimensions.cellWidth + config.dimensions.cellBorderWidth;
}

function getKeyHeader(config) {
	return config.headers[config.inner.indexOfCellKeyHeader];
}

function getFixedKeyHeader(config) {
	return config.fixedHeaders[config.inner.indexOfCellKeyHeader];
}

function getHeaderObject(config, attribute) {
	return getKeyHeader(config).find(function(column) {
		return column.key === attribute;
	}) || getFixedKeyHeader(config).find(function(column) {
		return column.key === attribute;
	});
}

function nil() {
	return function() {};
}

function wrapper(f) {
	return function() { return f; };
}

module.exports = {
	getDefaultContainerHeight: getDefaultContainerHeight,
	getIndexOfCellKeyHeader: getIndexOfCellKeyHeader,
	getSortDefault: getSortDefault,
	getScrollLineHeight: getScrollLineHeight,
	getScrollPageHeight: getScrollPageHeight,
	getCellFullWidth: getCellFullWidth,
	getKeyHeader: getKeyHeader,
	getFixedKeyHeader: getFixedKeyHeader,
	getHeaderObject: getHeaderObject,
	nil: nil,
	wrapper: wrapper
};
},{}],31:[function(require,module,exports){
'use strict';

var FILTER_TYPES = [ 'equals', 'equalsCaseInsensitive', 'like', 'likeCaseInsensitive', 'greaterThan', 'greaterOrEqual',
	'lessThan', 'lessOrEqual', 'between', 'betweenInclusive', 'contains' ];

function defaultComparator(a, b, options) {
	var attrA = getMergedValue(a, options.attribute, options.editedValues, options.uniqueRowKey),
		attrB = getMergedValue(b, options.attribute, options.editedValues, options.uniqueRowKey),
		isDown = options.direction === 'down';

	if (options.dataType === 'string') {
		var compareResult = 0;

		if (typeof attrA == 'undefined') {
			compareResult = -1;
		} else if (typeof attrB == 'undefined') {
			compareResult = 1;
		} else {
			attrA += '';
			attrB += '';

			compareResult = attrA.localeCompare(attrB, options.locale);
		}

		return isDown || compareResult === 0 ? compareResult : compareResult * -1;
	} else if (options.dataType === 'number') {
		attrA = parseFloat(attrA);
		attrB = parseFloat(attrB);

		if (isNaN(attrA)) {
			return isDown ? -1 : 1;
		}

		if (isNaN(attrB)) {
			return isDown ? 1 : -1;
		}
	}

	if (typeof attrA == 'undefined' && typeof attrB != 'undefined' || attrA < attrB) {
		return isDown ? -1 : 1;
	}

	if (typeof attrA != 'undefined' && typeof attrB == 'undefined' || attrA > attrB) {
		return isDown ? 1 : -1;
	}

	return 0;
}

function filterData(options) {
	if (FILTER_TYPES.indexOf(options.filterType) === -1) {
		window.console.error('Not a valid filter type! (' + options.filterType + ')');

		return options.dataSource;
	}

	switch (options.filterType) {
		case 'equals':
			return equalsFilter(options);
		case 'equalsCaseInsensitive':
			return equalsCaseInsensitiveFilter(options);
		case 'like':
			return likeFilter(options);
		case 'likeCaseInsensitive':
			return likeCaseInsensitiveFilter(options);
		case 'greaterThan':
			return greaterThanFilter(options);
		case 'greaterOrEqual':
			return greaterOrEqualFilter(options);
		case 'lessThan':
			return lessThanFilter(options);
		case 'lessOrEqual':
			return lessOrEqualFilter(options);
		case 'between':
			return betweenFilter(options);
		case 'betweenInclusive':
			return betweenInclusiveFilter(options);
		case 'contains':
			return containsFilter(options);
		default:
			return options.dataSource;
	}
}

function equalsFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) === options.valueOne;
	});
}

function equalsCaseInsensitiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).toUpperCase() === options.valueOne.toUpperCase();
	});
}

function likeFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).indexOf(options.valueOne) !== -1;
	});
}

function likeCaseInsensitiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey).toUpperCase().indexOf(options.valueOne.toUpperCase()) !== -1;
	});
}

function greaterThanFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) > options.valueOne;
	});
}

function greaterOrEqualFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) >= options.valueOne;
	});
}

function lessThanFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) < options.valueOne;
	});
}

function lessOrEqualFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) <= options.valueOne;
	});
}

function betweenFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) > options.valueOne && obj[options.attribute] < options.valueTwo;
	});
}

function betweenInclusiveFilter(options) {
	return options.dataSource.filter(function(obj) {
		return getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey) >= options.valueOne && obj[options.attribute] <= options.valueTwo;
	});
}

function containsFilter(options) {
	return options.dataSource.filter(function(obj) {
		return options.valueOne.indexOf(getMergedValue(obj, options.attribute, options.editedValues, options.uniqueRowKey)) !== -1;
	});
}

function getValueByType(value, dataType) {
	if (typeof value == 'undefined') {
		return value;
	}

	switch (dataType) {
		case 'string':
			return value.toString();
		case 'number':
			return parseFloat(value);
		default:
			return value;
	}
}

function getMergedValue(row, attribute, editedValues, uniqueRowKey) {
	var editedRow = editedValues[row[uniqueRowKey]];

	return typeof editedRow == 'undefined' || typeof editedRow[attribute] == 'undefined' ? row[attribute] : editedRow[attribute];
}

function cloneObject(obj) {
	return JSON.parse(JSON.stringify(obj));
}

module.exports = {
	defaultComparator: defaultComparator,
	filterData: filterData,
	getValueByType: getValueByType,
	cloneObject: cloneObject
};
},{}],32:[function(require,module,exports){
'use strict';

function indexOfElement(element) {
	var collection = element.parentNode.childNodes;

	for (var i = 0; i < collection.length; i++) {
		if (collection[i] === element) {
			return i;
		}
	}

	return -1;
}

function findParentNode(child, selector) {
	if (child.parentNode === null) {
		return null;
	} else if (child.parentNode.matches(selector)) {
		return child.parentNode;
	}

	return findParentNode(child.parentNode, selector);
}

function getRowNumber(config, cellNode) {
	return indexOfElement(cellNode.parentNode);
}

function getColumnNumber(config, cellNode) {
	return indexOfElement(cellNode);
}

function isEllipsisActive(element) {
	return element.offsetWidth < element.scrollWidth;
}

function isOverflown(element) {
	return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}

module.exports = {
	indexOfElement: indexOfElement,
	findParentNode: findParentNode,
	getRowNumber: getRowNumber,
	getColumnNumber: getColumnNumber,
	isEllipsisActive: isEllipsisActive,
	isOverflown: isOverflown
};
},{}],33:[function(require,module,exports){
'use strict';

var KEY_CODES = {
	ENTER: 13,
	ESCAPE: 27
};

function getKeyCode(event) {
	return event.keyCode || event.which;
}

module.exports = {
	getKeyCode: getKeyCode,
	KEY_CODES: KEY_CODES
};
},{}],34:[function(require,module,exports){
'use strict';

var Cell       = require('../models/data/cell'),
	configUtil = require('../utils/configuration');

function getCellData(config, rowNumber, columnNumber) {
	var cellData = null,
		headerObj = configUtil.getKeyHeader(config)[columnNumber],
		uniqueRowKey = null;

	// If the index is higher than the available rows number
	if (rowNumber >= config.dataSource.length) {
		cellData = new Cell({
			key: headerObj.key,
			value: '',
			dataType: headerObj.dataType
		});
	} else {
		uniqueRowKey = config.dataSource[rowNumber][config.uniqueRowKey];
		cellData = new Cell({
			key: headerObj.key,
			value: config.dataSource[rowNumber][headerObj.key],
			dataType: headerObj.dataType,
			rowNumber: rowNumber,
			columnNumber: columnNumber,
			validatorObject: headerObj.validatorObject,
			customValidator: headerObj.customValidator
		});

		if (typeof config.inner.editedValues[uniqueRowKey] != 'undefined' &&
			typeof config.inner.editedValues[uniqueRowKey][headerObj.key] != 'undefined') {

			cellData.class = config.selectors.editedCell;
			cellData.updateValue(config.inner.editedValues[uniqueRowKey][headerObj.key]);
		}
	}

	return cellData;
}

function getFixedCellData(config, rowNumber, columnNumber) {
	var cellData = null,
		headerObj = configUtil.getFixedKeyHeader(config)[columnNumber];

	// If the index is higher than the available rows number
	if (rowNumber >= config.dataSource.length) {
		cellData = new Cell({
			key: headerObj.key,
			value: '',
			dataType: headerObj.dataType
		});
	} else {
		cellData = new Cell({
			key: headerObj.key,
			value: config.dataSource[rowNumber][headerObj.key],
			dataType: headerObj.dataType,
			rowNumber: rowNumber,
			columnNumber: columnNumber,
			validatorObject: headerObj.validatorObject,
			customValidator: headerObj.customValidator
		});
	}

	return cellData;
}

function mergeEditedValuesInRow(config, row) {
	var mergedRowData = {},
		uniqueRowKey = row[config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] == 'undefined') {
		return row;
	}

	Object.keys(row).forEach(function(key) {
		mergedRowData[key] = config.inner.editedValues[uniqueRowKey][key] || row[key];
	});

	return mergedRowData;
}

function mergeEditedValuesInDataSource(config, ds) {
	var mergedDs = [];

	ds.forEach(function(row) {
		mergedDs.push(mergeEditedValuesInRow(config, row));
	});

	return mergedDs;
}

function separateValuesInDataSource(config, mergedDs) {
	var separatedDs = [];

	mergedDs.forEach(function(mergedRow) {
		var originalRow = config.inner.originalDataSource.find(function(row) {
			return row[config.uniqueRowKey] === mergedRow[config.uniqueRowKey];
		});

		if (typeof originalRow != 'undefined') {
			separatedDs.push(originalRow);
		}
	});

	return separatedDs;
}

function storeUpdatedCellValue(config, cellData) {
	var uniqueRowKey = config.dataSource[cellData.rowNumber][config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] == 'undefined') {
		config.inner.editedValues[uniqueRowKey] = {};
	}

	config.inner.editedValues[uniqueRowKey][cellData.key] = cellData.editedValue;
}

function persistRowValues(config, row) {
	var uniqueRowKey = row[config.uniqueRowKey];

	if (typeof config.inner.editedValues[uniqueRowKey] != 'undefined') {
		Object.keys(config.inner.editedValues[uniqueRowKey]).forEach(function(key) {
			row[key] = config.inner.editedValues[uniqueRowKey][key];
		});

		config.inner.editedValues[uniqueRowKey] = {};
	}
}

function persistBatchValues(config) {
	config.dataSource.forEach(function(row) {
		persistRowValues(config, row);
	});
}

module.exports = {
	getCellData: getCellData,
	getFixedCellData: getFixedCellData,
	mergeEditedValuesInRow: mergeEditedValuesInRow,
	mergeEditedValuesInDataSource: mergeEditedValuesInDataSource,
	separateValuesInDataSource: separateValuesInDataSource,
	storeUpdatedCellValue: storeUpdatedCellValue,
	persistRowValues: persistRowValues,
	persistBatchValues: persistBatchValues
};
},{"../models/data/cell":8,"../utils/configuration":30}],35:[function(require,module,exports){
!function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.Class=e()}(this,function(){"use strict";function t(){}var e="constructor",o="extend";return t[o]=function(t){function n(){i[e].apply(this,arguments)}var i=Object.create(this.prototype);return t.call(i,this.prototype),n.prototype=i,n[o]=this[o],n},t});
},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvYnJvd3Nlci5qcyIsImFwcC9jb25maWdzL2RlZmF1bHRzL3Rvb2x0aXAuanMiLCJhcHAvY29uZmlncy9nbG9iYWwuanMiLCJhcHAvZWxlbWVudHMvY2VsbC5qcyIsImFwcC9lbGVtZW50cy9maWx0ZXIuanMiLCJhcHAvZWxlbWVudHMvaW5wdXQuanMiLCJhcHAvbW9kZWxzL2Jhc2UuanMiLCJhcHAvbW9kZWxzL2RhdGEvY2VsbC5qcyIsImFwcC9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL2FmdGVyLWVkaXQuanMiLCJhcHAvbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9hZnRlci1zYXZlLmpzIiwiYXBwL21vZGVscy9ldmVudC1hcmd1bWVudHMvYmVmb3JlLWVkaXQuanMiLCJhcHAvbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9iZWZvcmUtc2F2ZS5qcyIsImFwcC9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL3NhdmUtcm93LmpzIiwiYXBwL21vZGVscy9ldmVudC1hcmd1bWVudHMvdmFsaWRhdGlvbi5qcyIsImFwcC9tb2RlbHMvbW9kdWxlL3ZpcnR1YWwtZGF0YS1ncmlkLmpzIiwiYXBwL21vZHVsZXMvZWRpdC5qcyIsImFwcC9tb2R1bGVzL2V2ZW50cy5qcyIsImFwcC9tb2R1bGVzL2ZpbHRlci5qcyIsImFwcC9tb2R1bGVzL2dlbmVyYXRvci5qcyIsImFwcC9tb2R1bGVzL3NvcnQuanMiLCJhcHAvbW9kdWxlcy90YWJsZS5qcyIsImFwcC9tb2R1bGVzL3Rvb2x0aXAuanMiLCJhcHAvbW9kdWxlcy92YWxpZGF0aW9uLmpzIiwiYXBwL3BvbGx5ZmlsbHMvQXJyYXkuZmluZC5qcyIsImFwcC9wb2xseWZpbGxzL0VsZW1lbnQubWF0Y2hlcy5qcyIsImFwcC9wb2xseWZpbGxzL0VsZW1lbnQucmVtb3ZlLmpzIiwiYXBwL3BvbGx5ZmlsbHMvTm9kZUxpc3QuZm9yRWFjaC5qcyIsImFwcC9wb2xseWZpbGxzL09iamVjdC5hc3NpZ24uanMiLCJhcHAvdXRpbHMvY29uZmlndXJhdGlvbi5qcyIsImFwcC91dGlscy9kYXRhLmpzIiwiYXBwL3V0aWxzL2RvbS5qcyIsImFwcC91dGlscy9rZXlib2FyZC5qcyIsImFwcC91dGlscy90YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jbGFzcy0yNTYuanMvZGlzdC9jbGFzcy51bWQubWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkEiLCJmaWxlIjoidmlydHVhbC1kYXRhLWdyaWQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vcG9sbHlmaWxscy9BcnJheS5maW5kLmpzJyk7cmVxdWlyZSgnLi9wb2xseWZpbGxzL0VsZW1lbnQubWF0Y2hlcy5qcycpO3JlcXVpcmUoJy4vcG9sbHlmaWxscy9FbGVtZW50LnJlbW92ZS5qcycpO3JlcXVpcmUoJy4vcG9sbHlmaWxscy9Ob2RlTGlzdC5mb3JFYWNoLmpzJyk7cmVxdWlyZSgnLi9wb2xseWZpbGxzL09iamVjdC5hc3NpZ24uanMnKTtcblxudmFyIFZpcnR1YWxEYXRhR3JpZCA9IHJlcXVpcmUoJy4vbW9kZWxzL21vZHVsZS92aXJ0dWFsLWRhdGEtZ3JpZCcpO1xuXG53aW5kb3cuVmlydHVhbERhdGFHcmlkID0gVmlydHVhbERhdGFHcmlkOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaW52b2tlRm4obmFtZSwgcGFyYW0xLCBwYXJhbTIpIHtcblx0aWYgKHR5cGVvZiB3aW5kb3cudGxpdGUgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR3aW5kb3cudGxpdGVbbmFtZV0ocGFyYW0xLCBwYXJhbTIpO1xufVxuXG5mdW5jdGlvbiBnZXRPcmllbnRhdGlvbkJ5UG9zaXRpb24oZWxlbWVudCkge1xuXHR2YXIgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LFxuXHRcdGNlbnRlckhlaWdodCA9IHdpbmRvd0hlaWdodCAvIDIsXG5cdFx0cG9zaXRpb24gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdHJldHVybiBjZW50ZXJIZWlnaHQgPCBwb3NpdGlvbi50b3AgPyAncycgOiAnbic7XG59XG5cbmZ1bmN0aW9uIHNob3cob3B0aW9ucykge1xuXHRzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuXHRcdGNhc2UgJ2luZm8nOlxuXHRcdFx0c2hvd0luZm8ob3B0aW9ucyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICd3YXJuJzpcblx0XHRcdHNob3dXYXJuKG9wdGlvbnMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZXJyb3InOlxuXHRcdFx0c2hvd0Vycm9yKG9wdGlvbnMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHNob3dJbmZvKG9wdGlvbnMpO1xuXHRcdFx0YnJlYWs7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGlkZShlbGVtZW50KSB7XG5cdGludm9rZUZuKCdoaWRlJywgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGhpZGVBbGwoKSB7XG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50bGl0ZScpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcblx0XHRoaWRlKGVsLnBhcmVudE5vZGUpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gc2hvd0luZm8ob3B0aW9ucykge1xuXHRpbnZva2VGbignc2hvdycsIG9wdGlvbnMuZWxlbWVudCwgeyBncmF2OiBnZXRPcmllbnRhdGlvbkJ5UG9zaXRpb24ob3B0aW9ucy5lbGVtZW50KSB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1dhcm4ob3B0aW9ucykge1xuXHRpbnZva2VGbignc2hvdycsIG9wdGlvbnMuZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHNob3dFcnJvcihvcHRpb25zKSB7XG5cdGludm9rZUZuKCdzaG93Jywgb3B0aW9ucy5lbGVtZW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHNob3c6IHNob3csXG5cdGhpZGU6IGhpZGUsXG5cdGhpZGVBbGw6IGhpZGVBbGwsXG5cdHNob3dJbmZvOiBzaG93SW5mbyxcblx0c2hvd1dhcm46IHNob3dXYXJuLFxuXHRzaG93RXJyb3I6IHNob3dFcnJvclxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb25maWdVdGlsICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24nKSxcblx0ZGF0YVV0aWwgICAgICAgPSByZXF1aXJlKCcuLi91dGlscy9kYXRhJyksXG5cdHRvb2x0aXBEZWZhdWx0ID0gcmVxdWlyZSgnLi4vY29uZmlncy9kZWZhdWx0cy90b29sdGlwJyk7XG5cbnZhciBERUZBVUxUUyA9IHtcblx0c2VsZWN0b3JzOiB7XG5cdFx0bWFpbkNvbnRhaW5lcjogJy5tYWluLWNvbnRhaW5lcicsXG5cblx0XHRmaXhlZENvbnRhaW5lcjogJ2ZpeGVkLWNvbnRhaW5lcicsXG5cdFx0Zml4ZWRIZWFkZXJDb250YWluZXI6ICdmaXhlZC1oZWFkZXItY29udGFpbmVyJyxcblx0XHRkYXRhQ29udGFpbmVyOiAnZGF0YS1jb250YWluZXInLFxuXHRcdGRhdGFIZWFkZXJDb250YWluZXI6ICdkYXRhLWhlYWRlci1jb250YWluZXInLFxuXG5cdFx0Zml4ZWRUYWJsZTogJ2ZpeGVkLXRhYmxlJyxcblx0XHRmaXhlZEhlYWRlclRhYmxlOiAnZml4ZWQtaGVhZGVyLXRhYmxlJyxcblx0XHRkYXRhVGFibGU6ICdkYXRhLXRhYmxlJyxcblx0XHRkYXRhSGVhZGVyVGFibGU6ICdkYXRhLWhlYWRlci10YWJsZScsXG5cblx0XHRlZGl0aW5nQ2VsbDogJ2VkaXRpbmctY2VsbCcsXG5cdFx0ZWRpdGVkQ2VsbDogJ2VkaXRlZC1jZWxsJyxcblx0XHRzYXZlQnV0dG9uOiBudWxsXG5cdH0sXG5cdGRpbWVuc2lvbnM6IHtcblx0XHRjZWxsV2lkdGg6IDE1MCxcblx0XHRjZWxsSGVpZ2h0OiA1MCxcblx0XHRjZWxsUGFkZGluZ1ZlcnRpY2FsOiA0LFxuXHRcdGNlbGxQYWRkaW5nSG9yaXpvbnRhbDogOCxcblx0XHRjZWxsQm9yZGVyV2lkdGg6IDEsXG5cdFx0Y29udGFpbmVySGVpZ2h0OiBjb25maWdVdGlsLmdldERlZmF1bHRDb250YWluZXJIZWlnaHQsXG5cdFx0bG9ja0NlbGxIZWlnaHQ6IGZhbHNlXG5cdH0sXG5cdGVkaXQ6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRtb2RlOiAnYmF0Y2gnLFxuXHRcdHZhbGlkYXRlOiBmYWxzZVxuXHR9LFxuXHRmaWx0ZXI6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRjdXN0b21GaWx0ZXI6IG51bGxcblx0fSxcblx0c29ydDoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGRlZmF1bHQ6IGNvbmZpZ1V0aWwuZ2V0U29ydERlZmF1bHQsXG5cdFx0Y3VzdG9tU29ydDogbnVsbFxuXHR9LFxuXHRldmVudEhhbmRsZXJzOiB7XG5cdFx0b25CZWZvcmVFZGl0OiBjb25maWdVdGlsLm5pbCxcblx0XHRvblZhbGlkYXRpb246IGNvbmZpZ1V0aWwubmlsLFxuXHRcdG9uQWZ0ZXJFZGl0OiBjb25maWdVdGlsLm5pbCxcblx0XHRvbkJlZm9yZVNhdmU6IGNvbmZpZ1V0aWwubmlsLFxuXHRcdG9uU2F2ZVJvdzogY29uZmlnVXRpbC5uaWwsXG5cdFx0b25TYXZlQmF0Y2g6IGNvbmZpZ1V0aWwubmlsLFxuXHRcdG9uQWZ0ZXJTYXZlOiBjb25maWdVdGlsLm5pbFxuXHR9LFxuXHRsb2NhbGU6IHtcblx0XHRuYW1lOiAnZW4nXG5cdH0sXG5cdGRhdGFTb3VyY2U6IFsgXSxcblx0aGVhZGVyczogWyBbIF0gXSxcblx0Zml4ZWRIZWFkZXJzOiBbIFsgXSBdLFxuXHR1bmlxdWVSb3dLZXk6ICdfX3VuaXF1ZVJvd0tleScsXG5cdGF1dG9SZXNpemU6IHRydWUsXG5cdGRlYnVnOiBmYWxzZSxcblx0dW5pcXVlSWQ6IDAsXG5cdG1vZHVsZXM6IHtcblx0XHR0b29sdGlwOiB7XG5cdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0c2hvdzogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LnNob3cpLFxuXHRcdFx0aGlkZTogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LmhpZGUpLFxuXHRcdFx0aGlkZUFsbDogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LmhpZGVBbGwpLFxuXHRcdFx0c2hvd0luZm86IGNvbmZpZ1V0aWwud3JhcHBlcih0b29sdGlwRGVmYXVsdC5zaG93SW5mbyksXG5cdFx0XHRzaG93V2FybjogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LnNob3dXYXJuKSxcblx0XHRcdHNob3dFcnJvcjogY29uZmlnVXRpbC53cmFwcGVyKHRvb2x0aXBEZWZhdWx0LnNob3dFcnJvcilcblx0XHR9XG5cdH0sXG5cdGlubmVyOiB7fVxufTtcblxudmFyIEhFQURFUl9ERUZBVUxUUyA9IHtcblx0ZGF0YVR5cGU6ICd0ZXh0Jyxcblx0ZmlsdGVyVHlwZTogJ2VxdWFscycsXG5cdGZpbHRlckRpc2FibGVkOiBmYWxzZSxcblx0c29ydERpc2FibGVkOiBmYWxzZSxcblx0dmFsaWRhdG9yT2JqZWN0OiB7fSxcblx0Y3VzdG9tVmFsaWRhdG9yOiBudWxsXG59O1xuXG52YXIgU1RBVElDX0lOTkVSX0FUVFJTID0ge1xuXHRzZWxlY3RvcnM6IHtcblx0XHR1bmlxdWVJZFByZWZpeDogJ3ZpcnR1YWwtZGF0YS1ncmlkLScsXG5cdFx0aGVhZGVyUm93OiAnaGVhZGVyLXJvdycsXG5cdFx0aGVhZGVyQ2VsbDogJ2hlYWRlci1jZWxsJyxcblx0XHRidWZmZXJIZWFkZXJDZWxsOiAnYnVmZmVyLWhlYWRlci1jZWxsJyxcblx0XHRzb3J0Q2VsbDogJ3NvcnQtY2VsbCcsXG5cdFx0c29ydEljb246ICdzb3J0LWljb24nLFxuXHRcdHNvcnREaXNhYmxlZDogJ3NvcnQtZGlzYWJsZWQnLFxuXHRcdGZpbHRlclJvdzogJ2ZpbHRlci1yb3cnLFxuXHRcdGZpbHRlckNlbGw6ICdmaWx0ZXItY2VsbCcsXG5cdFx0ZmlsdGVyRGlzYWJsZWQ6ICdmaWx0ZXItZGlzYWJsZWQnLFxuXHRcdGZpbHRlckNvbnRhaW5lcjogJ2ZpbHRlci1jb250YWluZXInLFxuXHRcdGZpbHRlclNlYXJjaEljb246ICdmaWx0ZXItc2VhcmNoLWljb24nLFxuXHRcdGZpbHRlckNsZWFySWNvbjogJ2ZpbHRlci1jbGVhci1pY29uJyxcblx0XHRmaWx0ZXJlZE91dFJvdzogJ2ZpbHRlcmVkLW91dCcsXG5cdFx0ZGF0YVJvdzogJ2RhdGEtcm93Jyxcblx0XHRkYXRhQ2VsbDogJ2RhdGEtY2VsbCcsXG5cdFx0Y2VsbERhdGFDb250YWluZXI6ICdjZWxsLWRhdGEtY29udGFpbmVyJyxcblx0XHRvdmVyZmxvd2VkQ2VsbDogJ292ZXJmbG93ZWQtY2VsbCdcblx0fSxcblx0ZGltZW5zaW9uczoge30sXG5cdGljb25zOiB7XG5cdFx0c29ydDoge1xuXHRcdFx0YXNjOiAnZmEgZmEtYXJyb3ctZG93bicsXG5cdFx0XHRkZXNjOiAnZmEgZmEtYXJyb3ctdXAnXG5cdFx0fSxcblx0XHRmaWx0ZXI6IHtcblx0XHRcdHNlYXJjaDogJ2ZhIGZhLXNlYXJjaCcsXG5cdFx0XHRjbGVhcjogJ2ZhIGZhLXRpbWVzJ1xuXHRcdH1cblx0fSxcblx0ZWRpdGVkVmFsdWVzOiB7IH0sXG5cdHNvcnQ6IHsgfSxcblx0ZmlsdGVyczogeyB9LFxuXHRtaW5CdWZmZXJXaWR0aDogMixcbn07XG5cbmZ1bmN0aW9uIGluaXQoY29uZmlnLCBvcHRpb25zKSB7XG5cdGluaXRDb25maWdPYmplY3QoY29uZmlnKTtcblxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzZWxlY3RvcnMubWFpbkNvbnRhaW5lcicpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzZWxlY3RvcnMuZml4ZWRDb250YWluZXInKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc2VsZWN0b3JzLmZpeGVkSGVhZGVyQ29udGFpbmVyJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5maXhlZFRhYmxlJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5maXhlZEhlYWRlclRhYmxlJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5kYXRhQ29udGFpbmVyJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5kYXRhSGVhZGVyQ29udGFpbmVyJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NlbGVjdG9ycy5kYXRhVGFibGUnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc2VsZWN0b3JzLmRhdGFIZWFkZXJUYWJsZScpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzZWxlY3RvcnMuZWRpdGluZ0NlbGwnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc2VsZWN0b3JzLmVkaXRlZENlbGwnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc2VsZWN0b3JzLnNhdmVCdXR0b24nKTtcblxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICd1bmlxdWVJZCcpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdoZWFkZXJzJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2xvY2FsZS5uYW1lJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2RhdGFTb3VyY2UnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZml4ZWRIZWFkZXJzJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3VuaXF1ZVJvd0tleScpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdhdXRvUmVzaXplJyk7XG5cblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZWRpdC5lbmFibGVkJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2VkaXQubW9kZScpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdlZGl0LnZhbGlkYXRlJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2ZpbHRlci5lbmFibGVkJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2ZpbHRlci5jdXN0b21GaWx0ZXInKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnc29ydC5lbmFibGVkJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ3NvcnQuZGVmYXVsdCcpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdzb3J0LmN1c3RvbVNvcnQnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZGVidWcnKTtcblxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkaW1lbnNpb25zLmNlbGxXaWR0aCcpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdkaW1lbnNpb25zLmNlbGxIZWlnaHQnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZGltZW5zaW9ucy5jZWxsUGFkZGluZ1ZlcnRpY2FsJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2RpbWVuc2lvbnMuY2VsbFBhZGRpbmdIb3Jpem9udGFsJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2RpbWVuc2lvbnMuY2VsbEJvcmRlcldpZHRoJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2RpbWVuc2lvbnMuY29udGFpbmVySGVpZ2h0Jyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2RpbWVuc2lvbnMubG9ja0NlbGxIZWlnaHQnKTtcblxuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdldmVudEhhbmRsZXJzLm9uQmVmb3JlRWRpdCcpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdldmVudEhhbmRsZXJzLm9uVmFsaWRhdGlvbicpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdldmVudEhhbmRsZXJzLm9uQWZ0ZXJFZGl0Jyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2V2ZW50SGFuZGxlcnMub25CZWZvcmVTYXZlJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2V2ZW50SGFuZGxlcnMub25TYXZlUm93Jyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ2V2ZW50SGFuZGxlcnMub25TYXZlQmF0Y2gnKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnZXZlbnRIYW5kbGVycy5vbkFmdGVyU2F2ZScpO1xuXG5cdC8vIFRvb2x0aXAgbW9kdWxlXG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ21vZHVsZXMudG9vbHRpcC5lbmFibGVkJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ21vZHVsZXMudG9vbHRpcC5zaG93Jyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ21vZHVsZXMudG9vbHRpcC5oaWRlJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ21vZHVsZXMudG9vbHRpcC5oaWRlQWxsJyk7XG5cdHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywgJ21vZHVsZXMudG9vbHRpcC5zaG93SW5mbycpO1xuXHR1cGRhdGVWYWx1ZShjb25maWcsIG9wdGlvbnMsICdtb2R1bGVzLnRvb2x0aXAuc2hvd1dhcm4nKTtcblx0dXBkYXRlVmFsdWUoY29uZmlnLCBvcHRpb25zLCAnbW9kdWxlcy50b29sdGlwLnNob3dFcnJvcicpO1xuXG5cdGNhbGN1bGF0ZVVuaXF1ZUlkU2VsZWN0b3IoY29uZmlnKTtcblxuXHRpbml0SGVhZGVyRGF0YShjb25maWcpO1xuXHRpbml0RGF0YVNvdXJjZShjb25maWcsIG9wdGlvbnMudW5pcXVlUm93S2V5KTtcblx0aW5pdENhbGN1bGF0ZWRWYWx1ZXMoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gaW5pdENvbmZpZ09iamVjdChjb25maWcpIHtcblx0Y29uZmlnLnNlbGVjdG9ycyA9IHt9O1xuXHRjb25maWcuZXZlbnRIYW5kbGVycyA9IHt9O1xuXHRjb25maWcubG9jYWxlID0ge307XG5cdGNvbmZpZy5pbm5lciA9IGRhdGFVdGlsLmNsb25lT2JqZWN0KFNUQVRJQ19JTk5FUl9BVFRSUyk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVVuaXF1ZUlkU2VsZWN0b3IoY29uZmlnKSB7XG5cdGNvbmZpZy5pbm5lci5zZWxlY3RvcnMudW5pcXVlSWQgPSBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkUHJlZml4ICsgY29uZmlnLnVuaXF1ZUlkO1xufVxuXG5mdW5jdGlvbiBpbml0Q2FsY3VsYXRlZFZhbHVlcyhjb25maWcpIHtcblx0Ly8gQW5uYWsgYSBoZWFkZXIgc29ybmFrIGF6IGluZGV4ZSwgYW1pIGEgY2VsbGEga3VsY3Nva2F0IGlzIG1lZ2hhdMOhcm96emEuIE1pdmVsIGV6IG1pbmRpZyBheiB1dG9sc8OzIGxlc3osIGV6w6lydCBUT0RPOiBLaXN6ZWRuaS/DoXRhbGFrw610YW5pXG5cdGNvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlciA9IGNvbmZpZ1V0aWwuZ2V0SW5kZXhPZkNlbGxLZXlIZWFkZXIoY29uZmlnKTtcblx0Y29uZmlnLmlubmVyLm9yaWdpbmFsRGF0YVNvdXJjZSA9IFtdLmNvbmNhdChjb25maWcuZGF0YVNvdXJjZSk7XG5cdGNvbmZpZy5pbm5lci5kaW1lbnNpb25zLnNjcm9sbExpbmVIZWlnaHQgPSBjb25maWdVdGlsLmdldFNjcm9sbExpbmVIZWlnaHQoKTtcblx0Y29uZmlnLmlubmVyLmRpbWVuc2lvbnMuc2Nyb2xsUGFnZUhlaWdodCA9IGNvbmZpZ1V0aWwuZ2V0U2Nyb2xsUGFnZUhlaWdodCgpO1xufVxuXG5mdW5jdGlvbiBpbml0SGVhZGVyRGF0YShjb25maWcpIHtcblx0dmFyIHByb2Nlc3NlZEhlYWRlcnMgPSBbXSxcblx0XHRwcm9jZXNzZWRGaXhlZEhlYWRlcnMgPSBbXTtcblxuXHRjb25maWcuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlclJvdykge1xuXHRcdHZhciBoUm93ID0gW107XG5cblx0XHRoZWFkZXJSb3cuZm9yRWFjaChmdW5jdGlvbihoZWFkZXJDZWxsKSB7XG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwuZGF0YVR5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aGVhZGVyQ2VsbC5kYXRhVHlwZSA9IEhFQURFUl9ERUZBVUxUUy5kYXRhVHlwZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmZpbHRlclR5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aGVhZGVyQ2VsbC5maWx0ZXJUeXBlID0gSEVBREVSX0RFRkFVTFRTLmZpbHRlclR5cGU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgaGVhZGVyQ2VsbC5maWx0ZXJEaXNhYmxlZCA9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRoZWFkZXJDZWxsLmZpbHRlckRpc2FibGVkID0gSEVBREVSX0RFRkFVTFRTLmZpbHRlckRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwuc29ydERpc2FibGVkID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGhlYWRlckNlbGwuc29ydERpc2FibGVkID0gSEVBREVSX0RFRkFVTFRTLnNvcnREaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLnZhbGlkYXRvck9iamVjdCA9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRoZWFkZXJDZWxsLnZhbGlkYXRvck9iamVjdCA9IEhFQURFUl9ERUZBVUxUUy52YWxpZGF0b3JPYmplY3Q7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgaGVhZGVyQ2VsbC5jdXN0b21WYWxpZGF0b3IgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aGVhZGVyQ2VsbC5jdXN0b21WYWxpZGF0b3IgPSBIRUFERVJfREVGQVVMVFMuY3VzdG9tVmFsaWRhdG9yO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwud2lkdGggPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aGVhZGVyQ2VsbC53aWR0aCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxXaWR0aDtcblx0XHRcdH1cblxuXHRcdFx0aFJvdy5wdXNoKGhlYWRlckNlbGwpO1xuXG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwuY29sc3BhbiAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IGhlYWRlckNlbGwuY29sc3BhbjsgaSsrKSB7XG5cdFx0XHRcdFx0aFJvdy5wdXNoKHt9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cHJvY2Vzc2VkSGVhZGVycy5wdXNoKGhSb3cpO1xuXHR9KTtcblxuXHRjb25maWcuZml4ZWRIZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyUm93KSB7XG5cdFx0dmFyIGhSb3cgPSBbXTtcblxuXHRcdGhlYWRlclJvdy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlckNlbGwpIHtcblx0XHRcdGlmICh0eXBlb2YgaGVhZGVyQ2VsbC5kYXRhVHlwZSA9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRoZWFkZXJDZWxsLmRhdGFUeXBlID0gSEVBREVSX0RFRkFVTFRTLmRhdGFUeXBlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwuZmlsdGVyVHlwZSA9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRoZWFkZXJDZWxsLmZpbHRlclR5cGUgPSBIRUFERVJfREVGQVVMVFMuZmlsdGVyVHlwZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBoZWFkZXJDZWxsLmZpbHRlckRpc2FibGVkID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGhlYWRlckNlbGwuZmlsdGVyRGlzYWJsZWQgPSBIRUFERVJfREVGQVVMVFMuZmlsdGVyRGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgaGVhZGVyQ2VsbC5zb3J0RGlzYWJsZWQgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aGVhZGVyQ2VsbC5zb3J0RGlzYWJsZWQgPSBIRUFERVJfREVGQVVMVFMuc29ydERpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwud2lkdGggPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aGVhZGVyQ2VsbC53aWR0aCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxXaWR0aDtcblx0XHRcdH1cblxuXHRcdFx0aFJvdy5wdXNoKGhlYWRlckNlbGwpO1xuXG5cdFx0XHRpZiAodHlwZW9mIGhlYWRlckNlbGwuY29sc3BhbiAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IGhlYWRlckNlbGwuY29sc3BhbjsgaSsrKSB7XG5cdFx0XHRcdFx0aFJvdy5wdXNoKHt9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cHJvY2Vzc2VkRml4ZWRIZWFkZXJzLnB1c2goaFJvdyk7XG5cdH0pO1xuXG5cdGNvbmZpZy5oZWFkZXJzID0gcHJvY2Vzc2VkSGVhZGVycztcblx0Y29uZmlnLmZpeGVkSGVhZGVycyA9IHByb2Nlc3NlZEZpeGVkSGVhZGVycztcbn1cblxuZnVuY3Rpb24gaW5pdERhdGFTb3VyY2UoY29uZmlnLCB1bmlxdWVSb3dLZXkpIHtcblx0aWYgKHR5cGVvZiB1bmlxdWVSb3dLZXkgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZy5kYXRhU291cmNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25maWcuZGF0YVNvdXJjZVtpXVtjb25maWcudW5pcXVlUm93S2V5XSA9IGk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlKGNvbmZpZywgb3B0aW9ucywga2V5KSB7XG5cdHZhciB0YXJnZXQgPSBnZXRJbm5lck9iamVjdChjb25maWcsIGtleSksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0XHR2YWx1ZSA9IGdldElubmVyVmFsdWUob3B0aW9ucywga2V5KSxcblx0XHRrZXlzID0ga2V5LnNwbGl0KCcuJyksXG5cdFx0bGFzdEtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcblxuXHRpZiAodHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnKSB7XG5cdFx0dGFyZ2V0W2xhc3RLZXldID0gdHlwZW9mIGdldElubmVyVmFsdWUoREVGQVVMVFMsIGtleSkgPT0gJ2Z1bmN0aW9uJyA/IGdldElubmVyVmFsdWUoREVGQVVMVFMsIGtleSkoY29uZmlnKSA6IGdldElubmVyVmFsdWUoREVGQVVMVFMsIGtleSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W2xhc3RLZXldID0gdmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5uZXJPYmplY3Qob2JqZWN0LCBrZXkpIHtcblx0aWYgKGtleS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG5cdFx0cmV0dXJuIG9iamVjdDtcblx0fVxuXG5cdHZhciBzdWJLZXkgPSBrZXkuc3BsaXQoJy4nKVswXSxcblx0XHRzdWJPYmplY3QgPSBvYmplY3Rbc3ViS2V5XTtcblxuXHRpZiAodHlwZW9mIHN1Yk9iamVjdCA9PSAndW5kZWZpbmVkJykge1xuXHRcdG9iamVjdFtzdWJLZXldID0ge307XG5cdFx0c3ViT2JqZWN0ID0gb2JqZWN0W3N1YktleV07XG5cdH1cblxuXHRyZXR1cm4gZ2V0SW5uZXJPYmplY3Qoc3ViT2JqZWN0LCBrZXkuc3Vic3RyaW5nKGtleS5pbmRleE9mKCcuJykgKyAxKSk7XG59XG5cbmZ1bmN0aW9uIGdldElubmVyVmFsdWUob2JqZWN0LCBrZXkpIHtcblx0aWYgKGtleS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG5cdFx0cmV0dXJuIG9iamVjdFtrZXldO1xuXHR9XG5cblx0dmFyIHN1YktleSA9IGtleS5zcGxpdCgnLicpWzBdLFxuXHRcdHN1Yk9iamVjdCA9IG9iamVjdFtzdWJLZXldO1xuXG5cdGlmICh0eXBlb2Ygc3ViT2JqZWN0ID09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIHN1Yk9iamVjdDtcblx0fVxuXG5cdHJldHVybiBnZXRJbm5lclZhbHVlKHN1Yk9iamVjdCwga2V5LnN1YnN0cmluZyhrZXkuaW5kZXhPZignLicpICsgMSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aW5pdDogaW5pdCxcblx0REVGQVVMVFM6IERFRkFVTFRTXG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGxOb2RlLCBjZWxsT2JqLCBkYXRhKSB7XG5cdHZhciBkYXRhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cblx0ZGF0YUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuY2VsbERhdGFDb250YWluZXIpO1xuXHRkYXRhQ29udGFpbmVyLnN0eWxlLm1pbldpZHRoID0gY2VsbE9iai53aWR0aCArICdweCc7XG5cdGRhdGFDb250YWluZXIuc3R5bGUud2lkdGggPSBjZWxsT2JqLndpZHRoICsgJ3B4Jztcblx0ZGF0YUNvbnRhaW5lci5zdHlsZS5wYWRkaW5nID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbFBhZGRpbmdWZXJ0aWNhbCArICdweCAnICsgY29uZmlnLmRpbWVuc2lvbnMuY2VsbFBhZGRpbmdIb3Jpem9udGFsICsgJ3B4JztcblxuXHRpZiAoY29uZmlnLmRpbWVuc2lvbnMubG9ja0NlbGxIZWlnaHQpIHtcblx0XHR2YXIgbWF4SGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCAtIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxCb3JkZXJXaWR0aCAtIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxQYWRkaW5nVmVydGljYWwgKiAyO1xuXG5cdFx0ZGF0YUNvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQgKyAncHgnO1xuXHR9XG5cblx0Y2VsbE5vZGUuYXBwZW5kQ2hpbGQoZGF0YUNvbnRhaW5lcik7XG5cblx0aWYgKHR5cGVvZiBkYXRhICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0dXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGxOb2RlLCBkYXRhKTtcblx0fVxuXG5cdHJldHVybiBkYXRhQ29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJEYXRhKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxPYmosIGlzTGFzdFJvdykge1xuXHR2YXIgaW5uZXJIVE1MID0gJycsXG5cdFx0Y29sdW1uVGV4dCA9IGNlbGxPYmoudGV4dCB8fCBjZWxsT2JqLmtleSB8fCAnJztcblxuXHRpZiAoY29uZmlnLnNvcnQuZW5hYmxlZCAmJiAhY2VsbE9iai5zb3J0RGlzYWJsZWQgJiYgaXNMYXN0Um93KSB7XG5cdFx0dmFyIGF0dHJpYnV0ZSA9IGNlbGxPYmoua2V5LFxuXHRcdFx0ZGlyZWN0aW9uID0gdHlwZW9mIGF0dHJpYnV0ZSAhPSAndW5kZWZpbmVkJyAmJiBjb25maWcuaW5uZXIuc29ydC5hdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZSA/IGNvbmZpZy5pbm5lci5zb3J0LmRpcmVjdGlvbiA6ICdub25lJyxcblx0XHRcdGlzU29ydGVkID0gZGlyZWN0aW9uICE9PSAnbm9uZScsXG5cdFx0XHRpY29uQ2xhc3MgPSBkaXJlY3Rpb24gPT09ICdkb3duJyA/IGNvbmZpZy5pbm5lci5pY29ucy5zb3J0LmFzYyA6IGNvbmZpZy5pbm5lci5pY29ucy5zb3J0LmRlc2MsXG5cdFx0XHRpY29uRWxlbWVudENsYXNzID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0SWNvbiArIChpc1NvcnRlZCA/ICcgJyArIGljb25DbGFzcyA6ICcgaGlkZGVuJyk7XG5cblx0XHRpbm5lckhUTUwgKz0gJzxpIGNsYXNzPVwiJyArIGljb25FbGVtZW50Q2xhc3MgKyAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7XG5cblx0XHRjZWxsTm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJywgYXR0cmlidXRlKTtcblx0fVxuXG5cdGlubmVySFRNTCArPSBjb2x1bW5UZXh0O1xuXG5cdHJldHVybiBpbm5lckhUTUw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbHRlckRhdGEoY29uZmlnLCBjZWxsTm9kZSwgY2VsbE9iaiwgZmlsdGVyT2JqKSB7XG5cdHZhciBpbm5lckhUTUwgPSAnJyxcblx0XHRpY29uQ2xhc3MgPSBjb25maWcuaW5uZXIuaWNvbnMuZmlsdGVyLnNlYXJjaCxcblx0XHRpY29uRWxlbWVudENsYXNzID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJTZWFyY2hJY29uICsgJyAnICsgaWNvbkNsYXNzLFxuXHRcdGNsZWFySWNvbkNsYXNzID0gY29uZmlnLmlubmVyLmljb25zLmZpbHRlci5jbGVhcixcblx0XHRjbGVhckljb25FbGVtZW50Q2xhc3MgPSBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckNsZWFySWNvbiArICcgJyArIGNsZWFySWNvbkNsYXNzO1xuXG5cdGlmICghY2VsbE9iai5maWx0ZXJEaXNhYmxlZCkge1xuXHRcdGlubmVySFRNTCArPSAnPGkgY2xhc3M9XCInICsgaWNvbkVsZW1lbnRDbGFzcyArICdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+Jztcblx0XHRpbm5lckhUTUwgKz0gZmlsdGVyT2JqLnZhbHVlIHx8ICcnO1xuXG5cdFx0aWYgKHR5cGVvZiBmaWx0ZXJPYmoudmFsdWUgIT0gJ3VuZGVmaW5lZCcgJiYgZmlsdGVyT2JqLnZhbHVlICE9PSAnJykge1xuXHRcdFx0aW5uZXJIVE1MICs9ICc8aSBjbGFzcz1cIicgKyBjbGVhckljb25FbGVtZW50Q2xhc3MgKyAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGlubmVySFRNTDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGxOb2RlLCBkYXRhKSB7XG5cdHZhciBkYXRhQ29udGFpbmVyID0gY2VsbE5vZGUucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmNlbGxEYXRhQ29udGFpbmVyKTtcblxuXHRpZiAodHlwZW9mIGRhdGEgPT0gJ3VuZGVmaW5lZCcgfHwgZGF0YSA9PT0gbnVsbCkge1xuXHRcdGRhdGFDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cdFx0Y2VsbE5vZGUudGl0bGUgPSAnJztcblx0fSBlbHNlIGlmIChkYXRhLm5vZGVUeXBlKSB7IC8vIElmIGl0cyBhbiBFbGVtZW50IG9iamVjdFxuXHRcdGRhdGFDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cdFx0ZGF0YUNvbnRhaW5lci5hcHBlbmRDaGlsZChkYXRhKTtcblx0XHRjZWxsTm9kZS50aXRsZSA9IGRhdGEudGV4dENvbnRlbnQ7XG5cdH0gZWxzZSB7IC8vIGVsc2UganVzdCBhZGQgdG8gdGhlIGNvbnRhaW5lcnMgaW5uZXJIVE1MXG5cdFx0ZGF0YUNvbnRhaW5lci5pbm5lckhUTUwgPSBkYXRhO1xuXHRcdGNlbGxOb2RlLnRpdGxlID0gZGF0YUNvbnRhaW5lci50ZXh0Q29udGVudDtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDZWxsKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxEYXRhKSB7XG5cdHVwZGF0ZURhdGFDb250YWluZXIoY29uZmlnLCBjZWxsTm9kZSwgY2VsbERhdGEuZ2V0VmFsdWUoKSk7XG5cblx0Y2VsbE5vZGUuY2xhc3NOYW1lID0gY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCArICcgJyArIChjZWxsRGF0YS5jbGFzcyB8fCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjcmVhdGVEYXRhQ29udGFpbmVyOiBjcmVhdGVEYXRhQ29udGFpbmVyLFxuXHRjcmVhdGVIZWFkZXJEYXRhOiBjcmVhdGVIZWFkZXJEYXRhLFxuXHRjcmVhdGVGaWx0ZXJEYXRhOiBjcmVhdGVGaWx0ZXJEYXRhLFxuXHR1cGRhdGVEYXRhQ29udGFpbmVyOiB1cGRhdGVEYXRhQ29udGFpbmVyLFxuXHR1cGRhdGVDZWxsOiB1cGRhdGVDZWxsXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRhdGFVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvZGF0YScpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXIoY29uZmlnKSB7XG5cdHZhciBmaWx0ZXJDb250YWluZXIgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcblx0XHRjbGVhckljb25DbGFzcyAgICAgICAgPSBjb25maWcuaW5uZXIuaWNvbnMuZmlsdGVyLmNsZWFyLFxuXHRcdGNsZWFySWNvbkVsZW1lbnRDbGFzcyA9IGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2xlYXJJY29uICsgJyAnICsgY2xlYXJJY29uQ2xhc3M7XG5cblx0ZmlsdGVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDb250YWluZXIpO1xuXHRmaWx0ZXJDb250YWluZXIuaW5uZXJIVE1MID0gJzxpbnB1dD48aSBjbGFzcz1cIicgKyBjbGVhckljb25FbGVtZW50Q2xhc3MgKyAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7XG5cblx0cmV0dXJuIGZpbHRlckNvbnRhaW5lcjtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSW5wdXQoY29uZmlnLCBjZWxsTm9kZSwgZmlsdGVyT2JqLCBoZWFkZXJPYmosIGZpbmlzaEVkaXRpbmdGaWx0ZXIpIHtcblx0dmFyIGZpbHRlckNvbnRhaW5lciA9IGNlbGxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDb250YWluZXIpLFxuXHRcdGZpbHRlcklucHV0ID0gZmlsdGVyQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG5cblx0ZmlsdGVySW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgZmlsdGVyT2JqLmRhdGFUeXBlKTtcblx0ZmlsdGVySW5wdXQudmFsdWUgPSBmaWx0ZXJPYmoudmFsdWU7XG5cdGZpbHRlcklucHV0LmZvY3VzKCk7XG5cdGZpbHRlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRpZiAoKGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2gpID09PSAxMykgeyAvLyBFbnRlciBrZXlcblx0XHRcdGZpbHRlck9iai52YWx1ZSA9IGRhdGFVdGlsLmdldFZhbHVlQnlUeXBlKGZpbHRlcklucHV0LnZhbHVlLCBmaWx0ZXJPYmouZGF0YVR5cGUpO1xuXG5cdFx0XHRmaW5pc2hFZGl0aW5nRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUsIGhlYWRlck9iaiwgZmlsdGVyT2JqKTtcblx0XHR9IGVsc2UgaWYgKChldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoKSA9PT0gMjcpIHsgLy8gRXNjYXBlIGtleVxuXHRcdFx0ZmluaXNoRWRpdGluZ0ZpbHRlcihjb25maWcsIGNlbGxOb2RlLCBoZWFkZXJPYmosIGZpbHRlck9iaik7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gZmlsdGVySW5wdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjcmVhdGVDb250YWluZXI6IGNyZWF0ZUNvbnRhaW5lcixcblx0dXBkYXRlSW5wdXQ6IHVwZGF0ZUlucHV0XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlSW5wdXROb2RlKGNlbGxEYXRhLCBldmVudEluc3RhbmNlcykge1xuXHR2YXIgaW5wdXROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblxuXHRpbnB1dE5vZGUudmFsdWUgPSBjZWxsRGF0YS5nZXRWYWx1ZSgpO1xuXHRpbnB1dE5vZGUuc3R5bGUubWluV2lkdGggPSAnMTBweCc7IC8vIFRPRE86IEtpc3plcnZlem5pIG9zenTDoWx5YmFcblx0aW5wdXROb2RlLnN0eWxlLndpZHRoID0gJzgwJSc7IC8vIFRPRE86IEtpc3plcnZlem5pIG9zenTDoWx5YmFcblx0aW5wdXROb2RlLnNldEF0dHJpYnV0ZSgndHlwZScsIGNlbGxEYXRhLmRhdGFUeXBlKTtcblx0aW5wdXROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBldmVudEluc3RhbmNlcy5vbklucHV0Qmx1ckV2ZW50SGFuZGxlcik7XG5cdGlucHV0Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50SW5zdGFuY2VzLm9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcik7XG5cblx0cmV0dXJuIGlucHV0Tm9kZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNyZWF0ZUlucHV0Tm9kZTogY3JlYXRlSW5wdXROb2RlXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIENsYXNzID0gcmVxdWlyZSgnY2xhc3MtMjU2LmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xhc3MuZXh0ZW5kKGZ1bmN0aW9uKCkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0c2VsZi5jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIHBhcmFtcykge1xuXHRcdGlmICh0eXBlb2YgYXR0cmlidXRlcyA9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbihhdHRyKSB7XG5cdFx0XHRzZWxmW2F0dHJdID0gdHlwZW9mIHBhcmFtcyA9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcGFyYW1zW2F0dHJdID09ICd1bmRlZmluZWQnID8gbnVsbCA6IHBhcmFtc1thdHRyXTtcblx0XHR9KTtcblx0fTtcblxuXHR0aGlzLnVwZGF0ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbihhdHRycykge1xuXHRcdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcblx0XHRcdGlmICh0eXBlb2YgYXR0cnNba10gIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHNlbGZba10gIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0c2VsZltrXSA9IGF0dHJzW2tdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBDZWxsT2JqZWN0KHApIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdGluaXRBdHRyKCdrZXknKTtcblx0aW5pdEF0dHIoJ3ZhbHVlJyk7XG5cdGluaXRBdHRyKCdlZGl0ZWRWYWx1ZScpO1xuXHRpbml0QXR0cignZGF0YVR5cGUnKTtcblx0aW5pdEF0dHIoJ2NsYXNzJyk7XG5cdGluaXRBdHRyKCdyb3dOdW1iZXInKTtcblx0aW5pdEF0dHIoJ2NvbHVtbk51bWJlcicpO1xuXHRpbml0QXR0cigndmFsaWRhdG9yT2JqZWN0Jyk7XG5cdGluaXRBdHRyKCdjdXN0b21WYWxpZGF0b3InKTtcblxuXHRmdW5jdGlvbiBpbml0QXR0cihuYW1lKSB7XG5cdFx0c2VsZltuYW1lXSA9IHR5cGVvZiBwID09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBwW25hbWVdID09ICd1bmRlZmluZWQnID8gbnVsbCA6IHBbbmFtZV07XG5cdH1cblxuXHR0aGlzLnVwZGF0ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbihhdHRycykge1xuXHRcdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcblx0XHRcdGlmICh0eXBlb2YgYXR0cnNba10gIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHNlbGZba10gIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0c2VsZltrXSA9IGF0dHJzW2tdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdHRoaXMuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2VsZi5jZWxsQ2hhbmdlZCA/IHNlbGYuZWRpdGVkVmFsdWUgOiBzZWxmLnZhbHVlO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmIChzZWxmLmRhdGFUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0dmFsdWUgPSBpc05hTihwYXJzZUZsb2F0KHZhbHVlKSkgPyAwIDogcGFyc2VGbG9hdCh2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYudmFsdWUgPT09IHZhbHVlIHx8IHNlbGYudmFsdWUgPT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRzZWxmLmVkaXRlZFZhbHVlID0gbnVsbDtcblx0XHRcdHNlbGYuY2VsbENoYW5nZWQgPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2VsZi5lZGl0ZWRWYWx1ZSA9IHZhbHVlO1xuXHRcdFx0c2VsZi5jZWxsQ2hhbmdlZCA9IHRydWU7XG5cdFx0fVxuXHR9O1xuXG5cdHRoaXMuZGlzY2FyZENoYW5nZWRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHNlbGYuZWRpdGVkVmFsdWUgPSBudWxsO1xuXHR9O1xuXG5cdHRoaXMuaXNDZWxsQ2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzZWxmLmNlbGxDaGFuZ2VkO1xuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENlbGxPYmplY3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmFzZUNsYXNzID0gcmVxdWlyZSgnLi4vYmFzZScpO1xuXG52YXIgQVRUUklCVVRFUyA9IFtcblx0J2NlbGxOb2RlJyxcblx0J2NlbGxEYXRhJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ2xhc3MuZXh0ZW5kKGZ1bmN0aW9uKHBhcmVudCkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0c2VsZi5jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XG5cdH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBCYXNlQ2xhc3MgPSByZXF1aXJlKCcuLi9iYXNlJyk7XG5cbnZhciBBVFRSSUJVVEVTID0gW1xuXHQnc2F2ZWRSb3dzJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ2xhc3MuZXh0ZW5kKGZ1bmN0aW9uKHBhcmVudCkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0c2VsZi5jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XG5cdH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBCYXNlQ2xhc3MgPSByZXF1aXJlKCcuLi9iYXNlJyk7XG5cbnZhciBBVFRSSUJVVEVTID0gW1xuXHQnY2VsbE5vZGUnLFxuXHQnY2VsbERhdGEnLFxuXHQnY2FuY2VsRXZlbnQnXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDbGFzcy5leHRlbmQoZnVuY3Rpb24ocGFyZW50KSB7XG5cdHZhciBzZWxmID0gdGhpcztcblxuXHRzZWxmLmNvbnN0cnVjdG9yID0gZnVuY3Rpb24ocGFyYW1zKSB7XG5cdFx0cGFyZW50LmNvbnN0cnVjdG9yLmNhbGwoc2VsZiwgQVRUUklCVVRFUywgcGFyYW1zKTtcblx0fTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJhc2VDbGFzcyA9IHJlcXVpcmUoJy4uL2Jhc2UnKTtcblxudmFyIEFUVFJJQlVURVMgPSBbXG5cdCdlZGl0ZWRSb3dzJyxcblx0J2NhbmNlbEV2ZW50J1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ2xhc3MuZXh0ZW5kKGZ1bmN0aW9uKHBhcmVudCkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0c2VsZi5jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XG5cdH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBCYXNlQ2xhc3MgPSByZXF1aXJlKCcuLi9iYXNlJyk7XG5cbnZhciBBVFRSSUJVVEVTID0gW1xuXHQnZWRpdGVkUm93Jyxcblx0J2NhbmNlbEV2ZW50J1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ2xhc3MuZXh0ZW5kKGZ1bmN0aW9uKHBhcmVudCkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0c2VsZi5jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdHBhcmVudC5jb25zdHJ1Y3Rvci5jYWxsKHNlbGYsIEFUVFJJQlVURVMsIHBhcmFtcyk7XG5cdH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBCYXNlQ2xhc3MgPSByZXF1aXJlKCcuLi9iYXNlJyk7XG5cbnZhciBBVFRSSUJVVEVTID0gW1xuXHQnY2VsbE5vZGUnLFxuXHQnY2VsbERhdGEnLFxuXHQnaXNEYXRhVmFsaWQnLFxuXHQndmFsaWRhdGlvblJlc3VsdCcsXG5cdCdjYW5jZWxFdmVudCdcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUNsYXNzLmV4dGVuZChmdW5jdGlvbihwYXJlbnQpIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdHNlbGYuY29uc3RydWN0b3IgPSBmdW5jdGlvbihwYXJhbXMpIHtcblx0XHRwYXJlbnQuY29uc3RydWN0b3IuY2FsbChzZWxmLCBBVFRSSUJVVEVTLCBwYXJhbXMpO1xuXHR9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2VuZXJhdG9yID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9nZW5lcmF0b3InKTtcblxudmFyIHVuaXF1ZUlkU2VxdWVuY2UgPSAxO1xuXG5mdW5jdGlvbiBWaXJ0dWFsRGF0YUdyaWQoKSB7XG5cdHZhciBzZWxmID0gdGhpcztcblxuXHRzZWxmLmNvbmZpZ3VyYXRpb24gPSB7fTtcblx0c2VsZi51bmlxdWVJZCA9IHVuaXF1ZUlkU2VxdWVuY2UrKztcblx0c2VsZi5ERUZBVUxUX09QVElPTlMgPSBnZW5lcmF0b3IuZ2V0RGVmYXVsdE9wdGlvbnMoKTtcblx0c2VsZi5nZW5lcmF0ZVRhYmxlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdG9wdGlvbnMudW5pcXVlSWQgPSBzZWxmLnVuaXF1ZUlkO1xuXG5cdFx0Z2VuZXJhdG9yLmdlbmVyYXRlVGFibGUoc2VsZi5jb25maWd1cmF0aW9uLCBvcHRpb25zKTtcblx0fTtcblx0c2VsZi5kZXN0cm95VGFibGUgPSBmdW5jdGlvbigpIHtcblx0XHRnZW5lcmF0b3IuZGVzdHJveVRhYmxlKHNlbGYuY29uZmlndXJhdGlvbik7XG5cdH07XG5cdHNlbGYuZ2V0SWQgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2VsZi51bmlxdWVJZDtcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWaXJ0dWFsRGF0YUdyaWQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmVmb3JlRWRpdEFyZ3MgPSByZXF1aXJlKCcuLi9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL2JlZm9yZS1lZGl0JyksXG5cdEJlZm9yZVNhdmVBcmdzID0gcmVxdWlyZSgnLi4vbW9kZWxzL2V2ZW50LWFyZ3VtZW50cy9iZWZvcmUtc2F2ZScpLFxuXHRWYWxpZGF0aW9uQXJncyA9IHJlcXVpcmUoJy4uL21vZGVscy9ldmVudC1hcmd1bWVudHMvdmFsaWRhdGlvbicpLFxuXHRTYXZlUm93QXJncyAgICA9IHJlcXVpcmUoJy4uL21vZGVscy9ldmVudC1hcmd1bWVudHMvc2F2ZS1yb3cnKSxcblx0U2F2ZUJhdGNoQXJncyAgPSByZXF1aXJlKCcuLi9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL3NhdmUtYmF0Y2gnKSxcblx0QWZ0ZXJFZGl0QXJncyAgPSByZXF1aXJlKCcuLi9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL2FmdGVyLWVkaXQnKSxcblx0QWZ0ZXJTYXZlQXJncyAgPSByZXF1aXJlKCcuLi9tb2RlbHMvZXZlbnQtYXJndW1lbnRzL2FmdGVyLXNhdmUnKSxcblx0Y2VsbEVsZW1lbnQgICAgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9jZWxsJyksXG5cdGlucHV0RWxlbWVudCAgID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvaW5wdXQnKSxcblx0dGFibGVNb2R1bGUgICAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3RhYmxlJyksXG5cdHZhbGlkYXRpb24gICAgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy92YWxpZGF0aW9uJyksXG5cdHRhYmxlVXRpbCAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvdGFibGUnKSxcblx0ZG9tVXRpbCAgICAgICAgPSByZXF1aXJlKCcuLi91dGlscy9kb20nKSxcblx0ZmlsdGVyTW9kdWxlICAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2ZpbHRlcicpO1xuXG5mdW5jdGlvbiBzdGFydEVkaXRpbmdDZWxsKGNvbmZpZywgY2VsbE5vZGUsIGluc3RhbmNlcywgZXZlbnRIYW5kbGVycykge1xuXHRpZiAoIWNvbmZpZy5lZGl0LmVuYWJsZWQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgcm93TnVtYmVyID0gZG9tVXRpbC5nZXRSb3dOdW1iZXIoY29uZmlnLCBjZWxsTm9kZSksXG5cdFx0Y29sdW1uTnVtYmVyID0gZG9tVXRpbC5nZXRDb2x1bW5OdW1iZXIoY29uZmlnLCBjZWxsTm9kZSk7XG5cblx0aWYgKHJvd051bWJlciA+PSBjb25maWcuZGF0YVNvdXJjZS5sZW5ndGgpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgY2VsbERhdGEgPSB0YWJsZVV0aWwuZ2V0Q2VsbERhdGEoY29uZmlnLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlcik7XG5cblx0dmFyIGJlZm9yZUVkaXRBcmdzID0gbmV3IEJlZm9yZUVkaXRBcmdzKHtcblx0XHRjZWxsTm9kZTogY2VsbE5vZGUsXG5cdFx0Y2VsbERhdGE6IGNlbGxEYXRhLFxuXHRcdGNhbmNlbEV2ZW50OiBmYWxzZVxuXHR9KTtcblxuXHRjb25maWcuZXZlbnRIYW5kbGVycy5vbkJlZm9yZUVkaXQoYmVmb3JlRWRpdEFyZ3MpO1xuXG5cdGlmICghYmVmb3JlRWRpdEFyZ3MuY2FuY2VsRXZlbnQpIHtcblx0XHRjZWxsTm9kZS5jbGFzc0xpc3QuYWRkKGNvbmZpZy5zZWxlY3RvcnMuZWRpdGluZ0NlbGwpO1xuXHRcdGNlbGxOb2RlLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLnNlbGVjdG9ycy5lZGl0ZWRDZWxsKTtcblxuXHRcdGluc3RhbmNlcy5vbklucHV0Qmx1ckV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7IGV2ZW50SGFuZGxlcnMub25JbnB1dEJsdXJFdmVudEhhbmRsZXIoZXYsIGNvbmZpZyk7IH07XG5cdFx0aW5zdGFuY2VzLm9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7IGV2ZW50SGFuZGxlcnMub25JbnB1dEtleVVwRXZlbnRIYW5kbGVyKGV2LCBjb25maWcpOyB9O1xuXG5cdFx0dmFyIGlucHV0Tm9kZSA9IGlucHV0RWxlbWVudC5jcmVhdGVJbnB1dE5vZGUoY2VsbERhdGEsIGluc3RhbmNlcyk7XG5cblx0XHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbE5vZGUsIGlucHV0Tm9kZSk7XG5cblx0XHRpbnB1dE5vZGUuZm9jdXMoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBmaW5pc2hFZGl0aW5nQ2VsbChjb25maWcsIGlucHV0Tm9kZSwgZXZlbnRIYW5kbGVycykge1xuXHR2YXIgY2VsbE5vZGUgPSBpbnB1dE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLFxuXHRcdHJvd051bWJlciA9IGRvbVV0aWwuZ2V0Um93TnVtYmVyKGNvbmZpZywgY2VsbE5vZGUpLFxuXHRcdGNvbHVtbk51bWJlciA9IGRvbVV0aWwuZ2V0Q29sdW1uTnVtYmVyKGNvbmZpZywgY2VsbE5vZGUpLFxuXHRcdGNlbGxEYXRhID0gdGFibGVVdGlsLmdldENlbGxEYXRhKGNvbmZpZywgcm93TnVtYmVyLCBjb2x1bW5OdW1iZXIpLFxuXHRcdHVwZGF0ZWRWYWx1ZSA9IGlucHV0Tm9kZS52YWx1ZTtcblxuXHRjZWxsRGF0YS51cGRhdGVBdHRyaWJ1dGVzKHsgY2xhc3M6IGNvbmZpZy5zZWxlY3RvcnMuZWRpdGVkQ2VsbCB9KTtcblx0Y2VsbERhdGEudXBkYXRlVmFsdWUodXBkYXRlZFZhbHVlKTtcblxuXHRpZiAoIWNlbGxEYXRhLmlzQ2VsbENoYW5nZWQoKSkge1xuXHRcdHRhYmxlTW9kdWxlLnJlc2V0RWRpdGluZ0NlbGwoY29uZmlnLCBldmVudEhhbmRsZXJzKTtcblxuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciB2YWxpZGF0aW9uRW5hYmxlZCA9IGNvbmZpZy5lZGl0LnZhbGlkYXRlO1xuXG5cdHZhciB2YWxpZGF0aW9uUmVzdWx0ID0gdmFsaWRhdGlvbi52YWxpZGF0ZShjb25maWcsIGNlbGxEYXRhKSxcblx0XHRpc0RhdGFWYWxpZCA9IHZhbGlkYXRpb25SZXN1bHQubGVuZ3RoID09PSAwLFxuXHRcdHZhbGlkYXRpb25BcmdzID0gbmV3IFZhbGlkYXRpb25BcmdzKHtcblx0XHRcdGNlbGxOb2RlOiBjZWxsTm9kZSxcblx0XHRcdGNlbGxEYXRhOiBjZWxsRGF0YSxcblx0XHRcdGlzRGF0YVZhbGlkOiBpc0RhdGFWYWxpZCxcblx0XHRcdHZhbGlkYXRpb25SZXN1bHQ6IHZhbGlkYXRpb25SZXN1bHQsXG5cdFx0XHRjYW5jZWxFdmVudDogIWlzRGF0YVZhbGlkXG5cdFx0fSk7XG5cblx0aWYgKHZhbGlkYXRpb25FbmFibGVkKSB7XG5cdFx0Y29uZmlnLmV2ZW50SGFuZGxlcnMub25WYWxpZGF0aW9uKHZhbGlkYXRpb25BcmdzKTtcblx0fVxuXG5cdGlmICh2YWxpZGF0aW9uQXJncy5jYW5jZWxFdmVudCAhPT0gdHJ1ZSkge1xuXHRcdHRhYmxlVXRpbC5zdG9yZVVwZGF0ZWRDZWxsVmFsdWUoY29uZmlnLCBjZWxsRGF0YSk7XG5cdFx0Y2VsbEVsZW1lbnQudXBkYXRlQ2VsbChjb25maWcsIGNlbGxOb2RlLCBjZWxsRGF0YSk7XG5cblx0XHR2YXIgYWZ0ZXJFZGl0QXJncyA9IG5ldyBBZnRlckVkaXRBcmdzKHtcblx0XHRcdGNlbGxOb2RlOiBjZWxsTm9kZSxcblx0XHRcdGNlbGxEYXRhOiBjZWxsRGF0YVxuXHRcdH0pO1xuXG5cdFx0Y29uZmlnLmV2ZW50SGFuZGxlcnMub25BZnRlckVkaXQoYWZ0ZXJFZGl0QXJncyk7XG5cblx0XHRmaWx0ZXJNb2R1bGUuZmlsdGVyKGNvbmZpZyk7XG5cdH0gZWxzZSBpZiAodmFsaWRhdGlvbkVuYWJsZWQgJiYgIWlzRGF0YVZhbGlkKSB7XG5cdFx0dmFsaWRhdGlvbi5zaG93RXJyb3JzKHZhbGlkYXRpb25SZXN1bHQpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNhbmNlbEVkaXRpbmdDZWxsKCkge1xuXHRyZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHNhdmVDZWxscyhjb25maWcpIHtcblx0aWYgKCFjb25maWcuZWRpdC5lbmFibGVkKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIGJlZm9yZVNhdmVBcmdzID0gbmV3IEJlZm9yZVNhdmVBcmdzKHtcblx0XHRlZGl0ZWRSb3dzOiBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzLFxuXHRcdGNhbmNlbEV2ZW50OiBmYWxzZVxuXHR9KTtcblxuXHRjb25maWcuZXZlbnRIYW5kbGVycy5vbkJlZm9yZVNhdmUoYmVmb3JlU2F2ZUFyZ3MpO1xuXG5cdGlmIChiZWZvcmVTYXZlQXJncy5jYW5jZWxFdmVudCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChjb25maWcuZWRpdC5tb2RlID09PSAncm93JykgeyAvLyBSb3cgbW9kZVxuXHRcdHZhciBzYXZlUm93QXJncyA9IG5ldyBTYXZlUm93QXJncyh7IGNhbmNlbEV2ZW50OiBmYWxzZSB9KTtcblxuXHRcdGNvbmZpZy5kYXRhU291cmNlLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG5cdFx0XHRzYXZlUm93QXJncyA9IG5ldyBTYXZlUm93QXJncyh7XG5cdFx0XHRcdGVkaXRlZFJvdzogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcblx0XHRcdFx0Y2FuY2VsRXZlbnQ6IGZhbHNlXG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCFzYXZlUm93QXJncy5jYW5jZWxFdmVudCkge1xuXHRcdFx0XHRjb25maWcuZXZlbnRIYW5kbGVycy5vblNhdmluZ1JvdyhzYXZlUm93QXJncyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghc2F2ZVJvd0FyZ3MuY2FuY2VsRXZlbnQpIHtcblx0XHRcdFx0dGFibGVVdGlsLnBlcnNpc3RSb3dWYWx1ZXMoY29uZmlnLCByb3cpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKCFzYXZlUm93QXJncy5jYW5jZWxFdmVudCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fSBlbHNlIGlmIChjb25maWcuZWRpdC5tb2RlID09PSAnYmF0Y2gnKSB7IC8vIEJhdGNoIG1vZGVcblx0XHR2YXIgc2F2ZUJhdGNoQXJncyA9IG5ldyBTYXZlQmF0Y2hBcmdzKHtcblx0XHRcdGVkaXRlZFJvd3M6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXG5cdFx0XHRjYW5jZWxFdmVudDogZmFsc2Vcblx0XHR9KTtcblxuXHRcdGNvbmZpZy5ldmVudEhhbmRsZXJzLm9uU2F2aW5nQmF0Y2goc2F2ZUJhdGNoQXJncyk7XG5cblx0XHRpZiAoc2F2ZUJhdGNoQXJncy5jYW5jZWxFdmVudCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRhYmxlVXRpbC5wZXJzaXN0QmF0Y2hWYWx1ZXMoY29uZmlnKTtcblx0fVxuXG5cdHZhciBhZnRlclNhdmVBcmdzID0gbmV3IEFmdGVyU2F2ZUFyZ3Moe1xuXHRcdHNhdmVkUm93czogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1xuXHR9KTtcblxuXHR0YWJsZU1vZHVsZS5yZXNldEVkaXRlZENlbGxzKGNvbmZpZyk7XG5cblx0Y29uZmlnLmV2ZW50SGFuZGxlcnMub25BZnRlclNhdmUoYWZ0ZXJTYXZlQXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdGFydEVkaXRpbmdDZWxsOiBzdGFydEVkaXRpbmdDZWxsLFxuXHRmaW5pc2hFZGl0aW5nQ2VsbDogZmluaXNoRWRpdGluZ0NlbGwsXG5cdGNhbmNlbEVkaXRpbmdDZWxsOiBjYW5jZWxFZGl0aW5nQ2VsbCxcblx0c2F2ZUNlbGxzOiBzYXZlQ2VsbHNcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZG9tVXRpbCAgICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpLFxuXHRrZXlib2FyZFV0aWwgID0gcmVxdWlyZSgnLi4vdXRpbHMva2V5Ym9hcmQnKSxcblx0c29ydE1vZHVsZSAgICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvc29ydCcpLFxuXHRlZGl0TW9kdWxlICAgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lZGl0JyksXG5cdHRhYmxlTW9kdWxlICAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3RhYmxlJyksXG5cdGZpbHRlck1vZHVsZSAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2ZpbHRlcicpLFxuXHR0b29sdGlwTW9kdWxlID0gcmVxdWlyZSgnLi4vbW9kdWxlcy90b29sdGlwJyk7XG5cbnZhciBjb250YWluZXI7XG5cbnZhciBpbnN0YW5jZXMgPSB7XG5cdG9uU2Nyb2xsRXZlbnRIYW5kbGVyOiBmdW5jdGlvbigpIHt9LFxuXHRvbldoZWVsRXZlbnRIYW5kbGVyOiBmdW5jdGlvbigpIHt9LFxuXHRvbklucHV0Qmx1ckV2ZW50SGFuZGxlcjogZnVuY3Rpb24oKSB7fSxcblx0b25DbGlja0NlbGxFdmVudEhhbmRsZXI6IGZ1bmN0aW9uKCkge30sXG5cdG9uQ2xpY2tTYXZlQnV0dG9uRXZlbnRIYW5kbGVyOiBmdW5jdGlvbigpIHt9LFxuXHRvbkNsaWNrU29ydEhlYWRlcjogZnVuY3Rpb24oKSB7fSxcblx0b25DbGlja0ZpbHRlckhlYWRlcjogZnVuY3Rpb24oKSB7fSxcblx0b25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZTogZnVuY3Rpb24oKSB7fSxcblx0b25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZTogZnVuY3Rpb24oKSB7fSxcbn07XG5cbmZ1bmN0aW9uIG9uV2hlZWxFdmVudEhhbmRsZXIoZXZlbnQsIGNvbmZpZykge1xuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdGlmIChldmVudC5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX1BJWEVMKSB7XG5cdFx0Y29udGFpbmVyLnNjcm9sbFRvcCArPSBldmVudC5kZWx0YVk7XG5cdFx0Y29udGFpbmVyLnNjcm9sbExlZnQgKz0gZXZlbnQuZGVsdGFYO1xuXHR9IGVsc2UgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfTElORSkge1xuXHRcdGNvbnRhaW5lci5zY3JvbGxUb3AgKz0gZXZlbnQuZGVsdGFZICogY29uZmlnLmlubmVyLmRpbWVuc2lvbnMuc2Nyb2xsTGluZUhlaWdodDtcblx0XHRjb250YWluZXIuc2Nyb2xsTGVmdCArPSBldmVudC5kZWx0YVggKiBjb25maWcuaW5uZXIuZGltZW5zaW9ucy5zY3JvbGxMaW5lSGVpZ2h0O1xuXHR9IGVsc2UgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfUEFHRSkge1xuXHRcdGNvbnRhaW5lci5zY3JvbGxUb3AgKz0gZXZlbnQuZGVsdGFZICogY29uZmlnLmlubmVyLmRpbWVuc2lvbnMuc2Nyb2xsUGFnZUhlaWdodDtcblx0XHRjb250YWluZXIuc2Nyb2xsTGVmdCArPSBldmVudC5kZWx0YVggKiBjb25maWcuaW5uZXIuZGltZW5zaW9ucy5zY3JvbGxQYWdlSGVpZ2h0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIG9uU2Nyb2xsRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcblx0dG9vbHRpcE1vZHVsZS5oaWRlQWxsKGNvbmZpZyk7XG5cblx0dGFibGVNb2R1bGUuc2Nyb2xsVGFibGVzKGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2tDZWxsRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcblx0aWYgKCFldmVudC50YXJnZXQubWF0Y2hlcygnLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmNlbGxEYXRhQ29udGFpbmVyKSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGVkaXRNb2R1bGUuc3RhcnRFZGl0aW5nQ2VsbChjb25maWcsIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLCBpbnN0YW5jZXMsIHtcblx0XHRvbklucHV0Qmx1ckV2ZW50SGFuZGxlcjogb25JbnB1dEJsdXJFdmVudEhhbmRsZXIsXG5cdFx0b25JbnB1dEtleVVwRXZlbnRIYW5kbGVyOiBvbklucHV0S2V5VXBFdmVudEhhbmRsZXJcblx0fSk7XG59XG5cbmZ1bmN0aW9uIG9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcblx0ZWRpdE1vZHVsZS5maW5pc2hFZGl0aW5nQ2VsbChjb25maWcsIGV2ZW50LnRhcmdldCwge1xuXHRcdG9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyOiBvbklucHV0Qmx1ckV2ZW50SGFuZGxlcixcblx0XHRvbklucHV0S2V5VXBFdmVudEhhbmRsZXI6IG9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlclxuXHR9KTtcbn1cblxuZnVuY3Rpb24gb25JbnB1dEtleVVwRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcblx0dmFyIGtleUNvZGUgPSBrZXlib2FyZFV0aWwuZ2V0S2V5Q29kZShldmVudCk7XG5cblx0c3dpdGNoIChrZXlDb2RlKSB7XG5cdFx0Y2FzZSBrZXlib2FyZFV0aWwuS0VZX0NPREVTLkVOVEVSOlxuXHRcdFx0ZXZlbnQudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBpbnN0YW5jZXMub25JbnB1dEJsdXJFdmVudEhhbmRsZXIpO1xuXHRcdFx0ZWRpdE1vZHVsZS5maW5pc2hFZGl0aW5nQ2VsbChjb25maWcsIGV2ZW50LnRhcmdldCwge1xuXHRcdFx0XHRvbklucHV0Qmx1ckV2ZW50SGFuZGxlcjogb25JbnB1dEJsdXJFdmVudEhhbmRsZXIsXG5cdFx0XHRcdG9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcjogb25JbnB1dEtleVVwRXZlbnRIYW5kbGVyXG5cdFx0XHR9KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2Uga2V5Ym9hcmRVdGlsLktFWV9DT0RFUy5FU0NBUEU6XG5cdFx0XHRlZGl0TW9kdWxlLmNhbmNlbEVkaXRpbmdDZWxsKGNvbmZpZywgZXZlbnQudGFyZ2V0LCB7XG5cdFx0XHRcdG9uSW5wdXRCbHVyRXZlbnRIYW5kbGVyOiBvbklucHV0Qmx1ckV2ZW50SGFuZGxlcixcblx0XHRcdFx0b25JbnB1dEtleVVwRXZlbnRIYW5kbGVyOiBvbklucHV0S2V5VXBFdmVudEhhbmRsZXJcblx0XHRcdH0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJyZWFrO1xuXHR9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2tTYXZlQnV0dG9uRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpIHtcblx0ZWRpdE1vZHVsZS5zYXZlQ2VsbHMoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gb25DbGlja1NvcnRIZWFkZXIoZXZlbnQsIGNvbmZpZykge1xuXHR2YXIgc29ydENlbGxTZWxlY3RvciA9ICcuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuc29ydENlbGwsXG5cdFx0c29ydENvbnRhaW5lclNlbGVjdG9yID0gc29ydENlbGxTZWxlY3RvciArICcgLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmNlbGxEYXRhQ29udGFpbmVyLFxuXHRcdHNvcnREaXNhYmxlZFNlbGVjdG9yID0gJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0RGlzYWJsZWQsXG5cdFx0c29ydEljb25TZWxlY3RvciA9IHNvcnRDZWxsU2VsZWN0b3IgKyAnIC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0SWNvbjtcblxuXHRpZiAoIWV2ZW50LnRhcmdldC5tYXRjaGVzKHNvcnRDb250YWluZXJTZWxlY3RvcikgJiZcblx0XHQhZXZlbnQudGFyZ2V0Lm1hdGNoZXMoc29ydEljb25TZWxlY3RvcikgfHxcblx0XHRldmVudC50YXJnZXQubWF0Y2hlcyhzb3J0RGlzYWJsZWRTZWxlY3RvcikpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoc29ydEljb25TZWxlY3RvcikpIHtcblx0XHRzb3J0TW9kdWxlLnJlc2V0U29ydChjb25maWcpO1xuXHR9XG5cblx0aWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKHNvcnRDb250YWluZXJTZWxlY3RvcikpIHtcblx0XHRzb3J0TW9kdWxlLnNvcnRCeUNvbHVtbihjb25maWcsIGRvbVV0aWwuZmluZFBhcmVudE5vZGUoZXZlbnQudGFyZ2V0LCBzb3J0Q2VsbFNlbGVjdG9yKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gb25DbGlja0ZpbHRlckhlYWRlcihldmVudCwgY29uZmlnKSB7XG5cdHZhciBmaWx0ZXJDZWxsU2VsZWN0b3IgPSAnLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckNlbGwsXG5cdFx0ZmlsdGVyQ29udGFpbmVyU2VsZWN0b3IgPSBmaWx0ZXJDZWxsU2VsZWN0b3IgKyAnIC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5jZWxsRGF0YUNvbnRhaW5lcixcblx0XHRmaWx0ZXJEaXNhYmxlZFNlbGVjdG9yID0gJy4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJEaXNhYmxlZCxcblx0XHRmaWx0ZXJTZWFyY2hJY29uU2VsZWN0b3IgPSBmaWx0ZXJDZWxsU2VsZWN0b3IgKyAnIC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJTZWFyY2hJY29uLFxuXHRcdGZpbHRlckNsZWFySWNvblNlbGVjdG9yID0gZmlsdGVyQ2VsbFNlbGVjdG9yICsgJyAuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2xlYXJJY29uLFxuXHRcdGNlbGxOb2RlID0gZG9tVXRpbC5maW5kUGFyZW50Tm9kZShldmVudC50YXJnZXQsIGZpbHRlckNlbGxTZWxlY3Rvcik7XG5cblx0aWYgKCFldmVudC50YXJnZXQubWF0Y2hlcyhmaWx0ZXJDb250YWluZXJTZWxlY3RvcikgJiZcblx0XHQhZXZlbnQudGFyZ2V0Lm1hdGNoZXMoZmlsdGVyU2VhcmNoSWNvblNlbGVjdG9yKSAmJlxuXHRcdCFldmVudC50YXJnZXQubWF0Y2hlcyhmaWx0ZXJDbGVhckljb25TZWxlY3RvcikgfHxcblx0XHRjZWxsTm9kZS5tYXRjaGVzKGZpbHRlckRpc2FibGVkU2VsZWN0b3IpKSB7XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoZmlsdGVyQ2xlYXJJY29uU2VsZWN0b3IpKSB7XG5cdFx0ZmlsdGVyTW9kdWxlLmNsZWFyRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUpO1xuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0ZmlsdGVyTW9kdWxlLnN0YXJ0RWRpdGluZ0ZpbHRlcihjb25maWcsIGNlbGxOb2RlKTtcbn1cblxuZnVuY3Rpb24gb25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZShldmVudCwgY29uZmlnKSB7XG5cdHRvb2x0aXBNb2R1bGUub25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZShjb25maWcsIGV2ZW50LnRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIG9uTW91c2VMZWF2ZUNlbGxXaXRoVGl0bGUoZXZlbnQsIGNvbmZpZykge1xuXHR0b29sdGlwTW9kdWxlLm9uTW91c2VMZWF2ZUNlbGxXaXRoVGl0bGUoY29uZmlnLCBldmVudC50YXJnZXQpO1xufVxuXG5mdW5jdGlvbiBpbml0KGNvbmZpZykge1xuXHRjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YUNvbnRhaW5lcik7XG5cblx0aW5zdGFuY2VzLm9uU2Nyb2xsRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHsgb25TY3JvbGxFdmVudEhhbmRsZXIoZXZlbnQsIGNvbmZpZyk7IH07XG5cdGluc3RhbmNlcy5vbldoZWVsRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHsgb25XaGVlbEV2ZW50SGFuZGxlcihldmVudCwgY29uZmlnKTsgfTtcblx0aW5zdGFuY2VzLm9uQ2xpY2tDZWxsRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHsgb25DbGlja0NlbGxFdmVudEhhbmRsZXIoZXZlbnQsIGNvbmZpZyk7IH07XG5cdGluc3RhbmNlcy5vbkNsaWNrU2F2ZUJ1dHRvbkV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7IG9uQ2xpY2tTYXZlQnV0dG9uRXZlbnRIYW5kbGVyKGV2ZW50LCBjb25maWcpOyB9O1xuXHRpbnN0YW5jZXMub25DbGlja1NvcnRIZWFkZXIgPSBmdW5jdGlvbihldmVudCkgeyBvbkNsaWNrU29ydEhlYWRlcihldmVudCwgY29uZmlnKTsgfTtcblx0aW5zdGFuY2VzLm9uQ2xpY2tGaWx0ZXJIZWFkZXIgPSBmdW5jdGlvbihldmVudCkgeyBvbkNsaWNrRmlsdGVySGVhZGVyKGV2ZW50LCBjb25maWcpOyB9O1xuXHRpbnN0YW5jZXMub25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZSA9IGZ1bmN0aW9uKGV2ZW50KSB7IG9uTW91c2VFbnRlckNlbGxXaXRoVGl0bGUoZXZlbnQsIGNvbmZpZyk7IH07XG5cdGluc3RhbmNlcy5vbk1vdXNlTGVhdmVDZWxsV2l0aFRpdGxlID0gZnVuY3Rpb24oZXZlbnQpIHsgb25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZShldmVudCwgY29uZmlnKTsgfTtcblxuXHRpZiAoY29udGFpbmVyICE9PSBudWxsKSB7XG5cdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaW5zdGFuY2VzLm9uV2hlZWxFdmVudEhhbmRsZXIsIHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IHRydWUgfSk7XG5cdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlcy5vblNjcm9sbEV2ZW50SGFuZGxlcik7XG5cdH1cblxuXHRpZiAoY29uZmlnLm1vZHVsZXMudG9vbHRpcC5lbmFibGVkKSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3RpdGxlXScpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcblx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBpbnN0YW5jZXMub25Nb3VzZUVudGVyQ2VsbFdpdGhUaXRsZSk7XG5cdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaW5zdGFuY2VzLm9uTW91c2VMZWF2ZUNlbGxXaXRoVGl0bGUpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKGNvbmZpZy5lZGl0LmVuYWJsZWQgJiYgY29uZmlnLnNlbGVjdG9ycy5zYXZlQnV0dG9uICE9PSBudWxsKSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc2VsZWN0b3JzLnNhdmVCdXR0b24pLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW5zdGFuY2VzLm9uQ2xpY2tTYXZlQnV0dG9uRXZlbnRIYW5kbGVyKTtcblx0fVxuXG5cdGlmIChjb25maWcuZWRpdC5lbmFibGVkKSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLmRhdGFUYWJsZSArICcgdGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZGF0YUNlbGwpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcblx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW5zdGFuY2VzLm9uQ2xpY2tDZWxsRXZlbnRIYW5kbGVyKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChjb25maWcuc29ydC5lbmFibGVkKSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnIycgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0Q2VsbCkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbnN0YW5jZXMub25DbGlja1NvcnRIZWFkZXIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKGNvbmZpZy5maWx0ZXIuZW5hYmxlZCkge1xuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy51bmlxdWVJZCArICcgdGQuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbnN0YW5jZXMub25DbGlja0ZpbHRlckhlYWRlcik7XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlKGNvbmZpZykge1xuXHRjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YUNvbnRhaW5lcik7XG5cblx0aWYgKGNvbnRhaW5lciAhPT0gbnVsbCkge1xuXHRcdGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIGluc3RhbmNlcy5vbldoZWVsRXZlbnRIYW5kbGVyKTtcblx0XHRjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2VzLm9uU2Nyb2xsRXZlbnRIYW5kbGVyKTtcblx0fVxuXG5cdGlmIChjb25maWcubW9kdWxlcy50b29sdGlwLmVuYWJsZWQpIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbdGl0bGVdJykuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuXHRcdFx0ZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGluc3RhbmNlcy5vbk1vdXNlRW50ZXJDZWxsV2l0aFRpdGxlKTtcblx0XHRcdGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBpbnN0YW5jZXMub25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoY29uZmlnLmVkaXQuZW5hYmxlZCAmJiBjb25maWcuc2VsZWN0b3JzLnNhdmVCdXR0b24gIT09IG51bGwpIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zZWxlY3RvcnMuc2F2ZUJ1dHRvbikucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbnN0YW5jZXMub25DbGlja1NhdmVCdXR0b25FdmVudEhhbmRsZXIpO1xuXHR9XG5cblx0aWYgKGNvbmZpZy5lZGl0LmVuYWJsZWQpIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YVRhYmxlICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuXHRcdFx0ZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbnN0YW5jZXMub25DbGlja0NlbGxFdmVudEhhbmRsZXIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKGNvbmZpZy5zb3J0LmVuYWJsZWQpIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMudW5pcXVlSWQgKyAnIHRkLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnNvcnRDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG5cdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGluc3RhbmNlcy5vbkNsaWNrU29ydEhlYWRlcik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoY29uZmlnLmZpbHRlci5lbmFibGVkKSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnIycgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLnVuaXF1ZUlkICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG5cdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGluc3RhbmNlcy5vbkNsaWNrRmlsdGVySGVhZGVyKTtcblx0XHR9KTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aW5pdDogaW5pdCxcblx0cmVtb3ZlOiByZW1vdmVcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGFibGVNb2R1bGUgICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvdGFibGUnKSxcblx0c29ydE1vZHVsZSAgICA9IHJlcXVpcmUoJy4uL21vZHVsZXMvc29ydCcpLFxuXHRkYXRhVXRpbCAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvZGF0YScpLFxuXHRjb25maWdVdGlsICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlndXJhdGlvbicpLFxuXHRjZWxsRWxlbWVudCAgID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvY2VsbCcpLFxuXHRmaWx0ZXJFbGVtZW50ID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvZmlsdGVyJyk7XG5cbmZ1bmN0aW9uIHN0YXJ0RWRpdGluZ0ZpbHRlcihjb25maWcsIGNlbGxOb2RlKSB7XG5cdGlmIChjZWxsTm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ29udGFpbmVyKSAhPT0gbnVsbCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciBhdHRyaWJ1dGUgPSBjZWxsTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJyksXG5cdFx0ZmlsdGVyT2JqID0gY29uZmlnLmlubmVyLmZpbHRlcnNbYXR0cmlidXRlXSB8fCB7fSxcblx0XHRoZWFkZXJPYmogPSBjb25maWdVdGlsLmdldEhlYWRlck9iamVjdChjb25maWcsIGF0dHJpYnV0ZSk7XG5cblx0ZmlsdGVyT2JqLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcblx0ZmlsdGVyT2JqLmRhdGFUeXBlID0gaGVhZGVyT2JqLmRhdGFUeXBlO1xuXHRmaWx0ZXJPYmouZmlsdGVyVHlwZSA9IGhlYWRlck9iai5maWx0ZXJUeXBlO1xuXHRmaWx0ZXJPYmoudmFsdWUgPSBmaWx0ZXJPYmoudmFsdWUgfHwgJyc7XG5cblx0Y29uZmlnLmlubmVyLmZpbHRlcnNbYXR0cmlidXRlXSA9IGZpbHRlck9iajtcblxuXHR2YXIgZmlsdGVyQ29udGFpbmVyID0gZmlsdGVyRWxlbWVudC5jcmVhdGVDb250YWluZXIoY29uZmlnKTtcblxuXHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbE5vZGUsIGZpbHRlckNvbnRhaW5lcik7XG5cblx0dmFyIGZpbHRlcklucHV0ID0gZmlsdGVyRWxlbWVudC51cGRhdGVJbnB1dChjb25maWcsIGNlbGxOb2RlLCBmaWx0ZXJPYmosIGhlYWRlck9iaiwgZmluaXNoRWRpdGluZ0ZpbHRlcik7XG5cblx0ZmlsdGVySW5wdXQuZm9jdXMoKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGNvbmZpZywgc29ydEFmdGVyRmlsdGVyaW5nKSB7XG5cdHNvcnRBZnRlckZpbHRlcmluZyA9IHNvcnRBZnRlckZpbHRlcmluZyAhPT0gZmFsc2U7XG5cblx0Y29uZmlnLmRhdGFTb3VyY2UgPSBjb25maWcuaW5uZXIub3JpZ2luYWxEYXRhU291cmNlO1xuXG5cdE9iamVjdC5rZXlzKGNvbmZpZy5pbm5lci5maWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdHZhciBmaWx0ZXJPYmogPSBjb25maWcuaW5uZXIuZmlsdGVyc1trZXldO1xuXG5cdFx0aWYgKHR5cGVvZiBmaWx0ZXJPYmoudmFsdWUgPT0gJ3VuZGVmaW5lZCcgfHwgZmlsdGVyT2JqLnZhbHVlID09PSAnJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChmaWx0ZXJPYmouZmlsdGVyVHlwZSA9PT0gJ2N1c3RvbScpIHtcblx0XHRcdGlmIChjb25maWcuZmlsdGVyLmN1c3RvbUZpbHRlciAhPT0gbnVsbCkge1xuXHRcdFx0XHRjb25maWcuZGF0YVNvdXJjZSA9IGNvbmZpZy5maWx0ZXIuY3VzdG9tRmlsdGVyKHtcblx0XHRcdFx0XHRkYXRhU291cmNlOiBjb25maWcuZGF0YVNvdXJjZSxcblx0XHRcdFx0XHRhdHRyaWJ1dGU6IGZpbHRlck9iai5hdHRyaWJ1dGUsXG5cdFx0XHRcdFx0dmFsdWU6IGZpbHRlck9iai52YWx1ZSxcblx0XHRcdFx0XHRlZGl0ZWRWYWx1ZXM6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXG5cdFx0XHRcdFx0dW5pcXVlUm93S2V5OiBjb25maWcudW5pcXVlUm93S2V5XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25maWcuZGF0YVNvdXJjZSA9IGRhdGFVdGlsLmZpbHRlckRhdGEoe1xuXHRcdFx0XHRkYXRhU291cmNlOiBjb25maWcuZGF0YVNvdXJjZSxcblx0XHRcdFx0YXR0cmlidXRlOiBmaWx0ZXJPYmouYXR0cmlidXRlLFxuXHRcdFx0XHRmaWx0ZXJUeXBlOiBmaWx0ZXJPYmouZmlsdGVyVHlwZSxcblx0XHRcdFx0dmFsdWVPbmU6IGZpbHRlck9iai52YWx1ZSxcblx0XHRcdFx0dmFsdWVUd286IGZpbHRlck9iai52YWx1ZVR3byxcblx0XHRcdFx0ZWRpdGVkVmFsdWVzOiBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzLFxuXHRcdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXlcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0ZmlsdGVyT3V0RW1wdHlSb3dzKGNvbmZpZyk7XG5cblx0aWYgKHNvcnRBZnRlckZpbHRlcmluZykge1xuXHRcdHNvcnRNb2R1bGUuc29ydChjb25maWcsIGZhbHNlKTtcblx0fVxuXG5cdHRhYmxlTW9kdWxlLnVwZGF0ZVRhYmxlKGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUpIHtcblx0dmFyIGF0dHJpYnV0ZSA9IGNlbGxOb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnKSxcblx0XHRjZWxsT2JqID0gY29uZmlnVXRpbC5nZXRIZWFkZXJPYmplY3QoY29uZmlnLCBhdHRyaWJ1dGUpLFxuXHRcdGZpbHRlck9iaiA9IGNvbmZpZy5pbm5lci5maWx0ZXJzW2F0dHJpYnV0ZV07XG5cblx0ZmlsdGVyT2JqLnZhbHVlID0gJyc7XG5cblx0dmFyIG5ld0ZpbHRlcnMgPSB7fTtcblxuXHRPYmplY3Qua2V5cyhjb25maWcuaW5uZXIuZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAoa2V5ICE9PSBhdHRyaWJ1dGUpIHtcblx0XHRcdG5ld0ZpbHRlcnNba2V5XSA9IGNvbmZpZy5pbm5lci5maWx0ZXJzW2tleV07XG5cdFx0fVxuXHR9KTtcblxuXHRjb25maWcuaW5uZXIuZmlsdGVycyA9IG5ld0ZpbHRlcnM7XG5cblx0ZmluaXNoRWRpdGluZ0ZpbHRlcihjb25maWcsIGNlbGxOb2RlLCBjZWxsT2JqLCBmaWx0ZXJPYmopO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hFZGl0aW5nRmlsdGVyKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxPYmosIGZpbHRlck9iaikge1xuXHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbE5vZGUsIGNlbGxFbGVtZW50LmNyZWF0ZUZpbHRlckRhdGEoY29uZmlnLCBjZWxsTm9kZSwgY2VsbE9iaiwgZmlsdGVyT2JqKSk7XG5cblx0ZmlsdGVyKGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck91dEVtcHR5Um93cyhjb25maWcpIHtcblx0dmFyIGRzTGVuZ3RoID0gY29uZmlnLmRhdGFTb3VyY2UubGVuZ3RoO1xuXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5kYXRhVGFibGUgKyAnIHRyLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmRhdGFSb3cpLmZvckVhY2goZnVuY3Rpb24ocm93LCByb3dOdW1iZXIpIHtcblx0XHRyb3cuY2xhc3NMaXN0LnRvZ2dsZShjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlcmVkT3V0Um93LCBkc0xlbmd0aCA8PSByb3dOdW1iZXIpO1xuXHR9KTtcblxuXHQvLyBGaXhlZCBjZWxsIGRhdGEgcm93IHVwZGF0ZVxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZml4ZWRUYWJsZSArICcgdHIuJyArIGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZGF0YVJvdykuZm9yRWFjaChmdW5jdGlvbihyb3csIHJvd051bWJlcikge1xuXHRcdHJvdy5jbGFzc0xpc3QudG9nZ2xlKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyZWRPdXRSb3csIGRzTGVuZ3RoIDw9IHJvd051bWJlcik7XG5cdH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3RhcnRFZGl0aW5nRmlsdGVyOiBzdGFydEVkaXRpbmdGaWx0ZXIsXG5cdGZpbHRlcjogZmlsdGVyLFxuXHRjbGVhckZpbHRlcjogY2xlYXJGaWx0ZXJcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2xvYmFsQ29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlncy9nbG9iYWwnKSxcblx0ZXZlbnRzICAgICAgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9ldmVudHMnKSxcblx0dGFibGVNb2R1bGUgID0gcmVxdWlyZSgnLi4vbW9kdWxlcy90YWJsZScpLFxuXHRjb25maWdVdGlsICAgPSByZXF1aXJlKCcuLi91dGlscy9jb25maWd1cmF0aW9uJyksXG5cdGRhdGFVdGlsICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGEnKSxcblx0Y2VsbEVsZW1lbnQgID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvY2VsbCcpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVRhYmxlKGNvbmZpZywgb3B0aW9ucykge1xuXHRnbG9iYWxDb25maWcuaW5pdChjb25maWcsIG9wdGlvbnMpO1xuXG5cdGluaXRDb250YWluZXJzKGNvbmZpZyk7XG5cdGluaXRUYWJsZShjb25maWcpO1xuXG5cdHRhYmxlTW9kdWxlLnVwZGF0ZVRhYmxlKGNvbmZpZyk7XG5cblx0ZXZlbnRzLmluaXQoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveVRhYmxlKGNvbmZpZykge1xuXHRldmVudHMucmVtb3ZlKGNvbmZpZyk7XG5cblx0dGFibGVNb2R1bGUuZGVzdHJveVRhYmxlKGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIGluaXRDb250YWluZXJzKGNvbmZpZykge1xuXHR2YXIgbWFpbkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnNlbGVjdG9ycy5tYWluQ29udGFpbmVyKSxcblx0XHRkYXRhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG5cdFx0ZGF0YUhlYWRlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuXHRcdGRhdGFUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyksXG5cdFx0ZGF0YUhlYWRlclRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKSxcblx0XHRmaXhlZENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuXHRcdGZpeGVkSGVhZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG5cdFx0Zml4ZWRUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyksXG5cdFx0Zml4ZWRIZWFkZXJUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG5cblx0bWFpbkNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgY29uZmlnLmlubmVyLnNlbGVjdG9ycy51bmlxdWVJZCk7XG5cblx0ZGF0YUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNvbmZpZy5zZWxlY3RvcnMuZGF0YUNvbnRhaW5lcik7XG5cdGRhdGFIZWFkZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmRhdGFIZWFkZXJDb250YWluZXIpO1xuXHRkYXRhVGFibGUuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmRhdGFUYWJsZSk7XG5cdGRhdGFIZWFkZXJUYWJsZS5jbGFzc0xpc3QuYWRkKGNvbmZpZy5zZWxlY3RvcnMuZGF0YUhlYWRlclRhYmxlKTtcblx0Zml4ZWRDb250YWluZXIuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmZpeGVkQ29udGFpbmVyKTtcblx0Zml4ZWRIZWFkZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmZpeGVkSGVhZGVyQ29udGFpbmVyKTtcblx0Zml4ZWRUYWJsZS5jbGFzc0xpc3QuYWRkKGNvbmZpZy5zZWxlY3RvcnMuZml4ZWRUYWJsZSk7XG5cdGZpeGVkSGVhZGVyVGFibGUuY2xhc3NMaXN0LmFkZChjb25maWcuc2VsZWN0b3JzLmZpeGVkSGVhZGVyVGFibGUpO1xuXG5cdG1haW5Db250YWluZXIuYXBwZW5kQ2hpbGQoZml4ZWRIZWFkZXJDb250YWluZXIpO1xuXHRmaXhlZEhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChmaXhlZEhlYWRlclRhYmxlKTtcblxuXHRtYWluQ29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGFIZWFkZXJDb250YWluZXIpO1xuXHRkYXRhSGVhZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGFIZWFkZXJUYWJsZSk7XG5cblx0bWFpbkNvbnRhaW5lci5hcHBlbmRDaGlsZChmaXhlZENvbnRhaW5lcik7XG5cdGZpeGVkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpeGVkVGFibGUpO1xuXG5cdG1haW5Db250YWluZXIuYXBwZW5kQ2hpbGQoZGF0YUNvbnRhaW5lcik7XG5cdGRhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZGF0YVRhYmxlKTtcblxuXHRkYXRhQ29udGFpbmVyLnN0eWxlLm1heEhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNvbnRhaW5lckhlaWdodCArICdweCc7XG5cdGRhdGFDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY29udGFpbmVySGVpZ2h0ICsgJ3B4JztcblxuXHRmaXhlZENvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSBjb25maWcuZGltZW5zaW9ucy5jb250YWluZXJIZWlnaHQgKyAncHgnO1xuXHRmaXhlZENvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb25maWcuZGltZW5zaW9ucy5jb250YWluZXJIZWlnaHQgKyAncHgnO1xufVxuXG5mdW5jdGlvbiBpbml0VGFibGUoY29uZmlnKSB7XG5cdC8vIEdlbmVyYXRlIHZpcnR1YWwgdGFibGVcblx0dmFyIHZpcnR1YWxUaGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyksXG5cdFx0dmlydHVhbFRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKSxcblx0XHRjb2x1bW5zTnVtYmVyID0gY29uZmlnVXRpbC5nZXRLZXlIZWFkZXIoY29uZmlnKS5sZW5ndGgsXG5cdFx0cm93c051bWJlciA9IGNvbmZpZy5kYXRhU291cmNlLmxlbmd0aDtcblxuXHR2YXIgaSwgaiwgdHJIZWFkLCB0ckJvZHksIHRkRWxlbWVudCwgY2VsbE9iaiwgY2VsbERhdGE7XG5cblx0Ly8gR2VuZXJhdGUgdmlydHVhbCBoZWFkZXJcblx0Y29uZmlnLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXJSb3csIHJvd0NvdW50KSB7XG5cdFx0dmFyIGlzTGFzdFJvdyA9IGNvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlciA9PT0gcm93Q291bnQ7XG5cblx0XHR0ckhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXHRcdHRySGVhZC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuaGVhZGVyUm93KTtcblx0XHR0ckhlYWQuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgY29sdW1uc051bWJlcjsgaisrKSB7XG5cdFx0XHRjZWxsT2JqID0gaGVhZGVyUm93W2pdO1xuXHRcdFx0Y2VsbERhdGEgPSBjZWxsRWxlbWVudC5jcmVhdGVIZWFkZXJEYXRhKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsT2JqLCBpc0xhc3RSb3cpO1xuXG5cdFx0XHR0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5oZWFkZXJDZWxsKTtcblxuXHRcdFx0Y2VsbEVsZW1lbnQuY3JlYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIHRkRWxlbWVudCwgY2VsbE9iaiwgY2VsbERhdGEpO1xuXG5cdFx0XHRpZiAoaXNMYXN0Um93KSB7XG5cdFx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuc29ydENlbGwpO1xuXG5cdFx0XHRcdGlmICghY29uZmlnLnNvcnQuZW5hYmxlZCB8fCBoZWFkZXJSb3dbal0uc29ydERpc2FibGVkKSB7XG5cdFx0XHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0RGlzYWJsZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xuXHRcdH1cblxuXHRcdC8vIEEgc2Nyb2xsYnIgbWlhdHRpIGhlbHloacOhbnkgbWlhdHQgdmFuIHN6w7xrc8OpZyBiZXN6w7pybmkgYSB2w6lnw6lyZVxuXHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG5cdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJIZWFkZXJDZWxsKTtcblxuXHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xuXG5cdFx0dmlydHVhbFRoZWFkLmFwcGVuZENoaWxkKHRySGVhZCk7XG5cdH0pO1xuXG5cdC8vIEdlbmVyYXRlIHZpcnR1YWwgZmlsdGVyIHJvd1xuXHRpZiAoY29uZmlnLmZpbHRlci5lbmFibGVkKSB7XG5cdFx0dHJIZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblx0XHR0ckhlYWQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlclJvdyk7XG5cdFx0dHJIZWFkLnN0eWxlLmhlaWdodCA9IGNvbmZpZy5kaW1lbnNpb25zLmNlbGxIZWlnaHQgKyAncHgnO1xuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGNvbHVtbnNOdW1iZXI7IGorKykge1xuXHRcdFx0Y2VsbE9iaiA9IGNvbmZpZ1V0aWwuZ2V0S2V5SGVhZGVyKGNvbmZpZylbal07XG5cdFx0XHRjZWxsRGF0YSA9IGNlbGxFbGVtZW50LmNyZWF0ZUhlYWRlckRhdGEoY29uZmlnLCB0ZEVsZW1lbnQsIGNlbGxPYmosIHt9KTtcblxuXHRcdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCk7XG5cblx0XHRcdGNlbGxFbGVtZW50LmNyZWF0ZURhdGFDb250YWluZXIoY29uZmlnLCB0ZEVsZW1lbnQsIGNlbGxPYmosIGNlbGxEYXRhKTtcblxuXHRcdFx0aWYgKGNlbGxPYmouZmlsdGVyRGlzYWJsZWQpIHtcblx0XHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJEaXNhYmxlZCk7XG5cdFx0XHR9XG5cblx0XHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xuXHRcdH1cblxuXHRcdC8vIEEgc2Nyb2xsYnIgbWlhdHRpIGhlbHloacOhbnkgbWlhdHQgdmFuIHN6w7xrc8OpZyBiZXN6w7pybmkgYSB2w6lnw6lyZVxuXHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG5cdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5idWZmZXJIZWFkZXJDZWxsKTtcblxuXHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xuXG5cdFx0dmlydHVhbFRoZWFkLmFwcGVuZENoaWxkKHRySGVhZCk7XG5cdH1cblxuXHQvLyBHZW5lcmF0ZSB2aXJ0dWFsIGJvZHlcblx0Zm9yIChpID0gMDsgaSA8IHJvd3NOdW1iZXI7IGkrKykge1xuXHRcdHRyQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cdFx0dHJCb2R5LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhUm93KTtcblx0XHR0ckJvZHkuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgY29sdW1uc051bWJlcjsgaisrKSB7XG5cdFx0XHRjZWxsT2JqID0gY29uZmlnVXRpbC5nZXRLZXlIZWFkZXIoY29uZmlnKVtqXTtcblxuXHRcdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZGF0YUNlbGwpO1xuXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsT2JqKTtcblxuXHRcdFx0dHJCb2R5LmFwcGVuZENoaWxkKHRkRWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0dmlydHVhbFRib2R5LmFwcGVuZENoaWxkKHRyQm9keSk7XG5cdH1cblxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YUhlYWRlclRhYmxlKS5hcHBlbmRDaGlsZCh2aXJ0dWFsVGhlYWQpO1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YVRhYmxlKS5hcHBlbmRDaGlsZCh2aXJ0dWFsVGJvZHkpO1xuXG5cdC8vIEdlbmVyYXRlIGZpeGVkIHRhYmxlXG5cblx0aWYgKGNvbmZpZy5maXhlZEhlYWRlcnMubGVuZ3RoID09PSAwIHx8IGNvbmZpZy5maXhlZEhlYWRlcnNbMF0ubGVuZ3RoID09PSAwKSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkSGVhZGVyVGFibGUpLnJlbW92ZSgpO1xuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5maXhlZEhlYWRlckNvbnRhaW5lcikucmVtb3ZlKCk7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkVGFibGUpLnJlbW92ZSgpO1xuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5maXhlZENvbnRhaW5lcikucmVtb3ZlKCk7XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgZml4ZWRUaGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyksXG5cdFx0Zml4ZWRUYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG5cblx0Ly8gR2VuZXJhdGUgZml4ZWQgaGVhZGVyXG5cblx0Zm9yIChpID0gMDsgaSA8IGNvbmZpZy5maXhlZEhlYWRlcnMubGVuZ3RoOyBpKyspIHtcblx0XHR0ckhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXHRcdHRySGVhZC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuaGVhZGVyUm93KTtcblx0XHR0ckhlYWQuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgY29uZmlnLmZpeGVkSGVhZGVyc1tpXS5sZW5ndGg7IGorKykge1xuXHRcdFx0dmFyIGlzTGFzdFJvdyA9IGogPT09IGNvbmZpZy5maXhlZEhlYWRlcnNbaV0ubGVuZ3RoIC0gMTtcblxuXHRcdFx0Y2VsbE9iaiA9IGNvbmZpZy5maXhlZEhlYWRlcnNbaV1bal07XG5cdFx0XHRjZWxsRGF0YSA9IGNlbGxFbGVtZW50LmNyZWF0ZUhlYWRlckRhdGEoY29uZmlnLCB0ZEVsZW1lbnQsIGNlbGxPYmosIGlzTGFzdFJvdyk7XG5cblx0XHRcdHRkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG5cdFx0XHR0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlckNlbGwpO1xuXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsT2JqLCBjZWxsRGF0YSk7XG5cblx0XHRcdGlmIChpc0xhc3RSb3cpIHtcblx0XHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0Q2VsbCk7XG5cblx0XHRcdFx0aWYgKCFjb25maWcuc29ydC5lbmFibGVkIHx8IGNvbmZpZy5maXhlZEhlYWRlcnNbaV1bal0uc29ydERpc2FibGVkKSB7XG5cdFx0XHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5zb3J0RGlzYWJsZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRySGVhZC5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQpO1xuXHRcdH1cblxuXHRcdGZpeGVkVGhlYWQuYXBwZW5kQ2hpbGQodHJIZWFkKTtcblx0fVxuXG5cdC8vIEdlbmVyYXRlIGZpeGVkIGZpbHRlciByb3dcblxuXHRpZiAoY29uZmlnLmZpbHRlci5lbmFibGVkICYmXG5cdFx0Y29uZmlnLmZpeGVkSGVhZGVycy5sZW5ndGggPiAwICYmXG5cdFx0Y29uZmlnLmZpeGVkSGVhZGVyc1tjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXJdLmxlbmd0aCA+IDApIHtcblxuXHRcdHRySGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cdFx0dHJIZWFkLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJSb3cpO1xuXHRcdHRySGVhZC5zdHlsZS5oZWlnaHQgPSBjb25maWcuZGltZW5zaW9ucy5jZWxsSGVpZ2h0ICsgJ3B4JztcblxuXHRcdGZvciAoaiA9IDA7IGogPCBjb25maWcuZml4ZWRIZWFkZXJzW2NvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlcl0ubGVuZ3RoOyBqKyspIHtcblx0XHRcdGNlbGxPYmogPSBjb25maWdVdGlsLmdldEZpeGVkS2V5SGVhZGVyKGNvbmZpZylbal07XG5cdFx0XHRjZWxsRGF0YSA9IGNlbGxFbGVtZW50LmNyZWF0ZUZpbHRlckRhdGEoY29uZmlnLCB0ZEVsZW1lbnQsIGNlbGxPYmosIHt9KTtcblxuXHRcdFx0dGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcblx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyQ2VsbCk7XG5cdFx0XHR0ZEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBjb25maWcuZGltZW5zaW9ucy5jZWxsV2lkdGggKyAncHgnO1xuXG5cdFx0XHRjZWxsRWxlbWVudC5jcmVhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgdGRFbGVtZW50LCBjZWxsT2JqLCBjZWxsRGF0YSk7XG5cblx0XHRcdGlmIChjZWxsT2JqLmZpbHRlckRpc2FibGVkKSB7XG5cdFx0XHRcdHRkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyRGlzYWJsZWQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0ckhlYWQuYXBwZW5kQ2hpbGQodGRFbGVtZW50KTtcblx0XHR9XG5cblx0XHRmaXhlZFRoZWFkLmFwcGVuZENoaWxkKHRySGVhZCk7XG5cdH1cblxuXHQvLyBHZW5lcmF0ZSBmaXhlZCBib2R5XG5cblx0Zm9yIChpID0gMDsgaSA8IHJvd3NOdW1iZXI7IGkrKykge1xuXHRcdHRyQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cdFx0dHJCb2R5LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhUm93KTtcblx0XHR0ckJvZHkuc3R5bGUuaGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgY29uZmlnLmZpeGVkSGVhZGVyc1tjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXJdLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRjZWxsT2JqID0gY29uZmlnVXRpbC5nZXRGaXhlZEtleUhlYWRlcihjb25maWcpW2pdO1xuXG5cdFx0XHR0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0dGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhQ2VsbCk7XG5cblx0XHRcdGNlbGxFbGVtZW50LmNyZWF0ZURhdGFDb250YWluZXIoY29uZmlnLCB0ZEVsZW1lbnQsIGNlbGxPYmopO1xuXG5cdFx0XHR0ckJvZHkuYXBwZW5kQ2hpbGQodGRFbGVtZW50KTtcblx0XHR9XG5cblx0XHRmaXhlZFRib2R5LmFwcGVuZENoaWxkKHRyQm9keSk7XG5cdH1cblxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZml4ZWRIZWFkZXJUYWJsZSkuYXBwZW5kQ2hpbGQoZml4ZWRUaGVhZCk7XG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5maXhlZFRhYmxlKS5hcHBlbmRDaGlsZChmaXhlZFRib2R5KTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG5cdHJldHVybiBkYXRhVXRpbC5jbG9uZU9iamVjdChnbG9iYWxDb25maWcuREVGQVVMVFMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Z2VuZXJhdGVUYWJsZTogZ2VuZXJhdGVUYWJsZSxcblx0ZGVzdHJveVRhYmxlOiBkZXN0cm95VGFibGUsXG5cdGdldERlZmF1bHRPcHRpb25zOiBnZXREZWZhdWx0T3B0aW9uc1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0YWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL21vZHVsZXMvdGFibGUnKSxcblx0Y29uZmlnVXRpbCAgPSByZXF1aXJlKCcuLi91dGlscy9jb25maWd1cmF0aW9uJyksXG5cdGRhdGFVdGlsICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvZGF0YScpO1xuXG5mdW5jdGlvbiBzb3J0QnlDb2x1bW4oY29uZmlnLCBjb2x1bW4pIHtcblx0dmFyIGF0dHJpYnV0ZSA9IGNvbHVtbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJyksXG5cdFx0aGVhZGVyT2JqID0gY29uZmlnVXRpbC5nZXRIZWFkZXJPYmplY3QoY29uZmlnLCBhdHRyaWJ1dGUpLFxuXHRcdGRpcmVjdGlvbiA9ICd1cCc7XG5cblx0aWYgKGNvbmZpZy5pbm5lci5zb3J0LmF0dHJpYnV0ZSA9PT0gYXR0cmlidXRlICYmXG5cdFx0Y29uZmlnLmlubmVyLnNvcnQuZGlyZWN0aW9uID09PSAndXAnKSB7XG5cblx0XHRkaXJlY3Rpb24gPSAnZG93bic7XG5cdH1cblxuXHRjb25maWcuaW5uZXIuc29ydC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG5cdGNvbmZpZy5pbm5lci5zb3J0LmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcblx0Y29uZmlnLmlubmVyLnNvcnQuZGF0YVR5cGUgPSBoZWFkZXJPYmouZGF0YVR5cGU7XG5cblx0c29ydChjb25maWcpO1xufVxuXG5mdW5jdGlvbiBzb3J0KGNvbmZpZywgdXBkYXRlVGFibGUpIHtcblx0dXBkYXRlVGFibGUgPSB1cGRhdGVUYWJsZSAhPT0gZmFsc2U7XG5cblx0Y29uZmlnLmRhdGFTb3VyY2Uuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0aWYgKGNvbmZpZy5zb3J0LmN1c3RvbVNvcnQgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiBjb25maWcuc29ydC5jdXN0b21Tb3J0KGEsIGIsIHtcblx0XHRcdFx0YXR0cmlidXRlOiBjb25maWcuaW5uZXIuc29ydC5hdHRyaWJ1dGUsXG5cdFx0XHRcdGRpcmVjdGlvbjogY29uZmlnLmlubmVyLnNvcnQuZGlyZWN0aW9uLFxuXHRcdFx0XHRkYXRhVHlwZTogY29uZmlnLmlubmVyLnNvcnQuZGF0YVR5cGUsXG5cdFx0XHRcdGVkaXRlZFZhbHVlczogY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlcyxcblx0XHRcdFx0dW5pcXVlUm93S2V5OiBjb25maWcudW5pcXVlUm93S2V5XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgYXR0cmlidXRlID0gY29uZmlnLmlubmVyLnNvcnQuYXR0cmlidXRlIHx8IGNvbmZpZy5zb3J0LmRlZmF1bHQsXG5cdFx0XHRkaXJlY3Rpb24gPSBjb25maWcuaW5uZXIuc29ydC5kaXJlY3Rpb24gfHwgJ2Rvd24nLFxuXHRcdFx0ZGF0YVR5cGUgPSBjb25maWcuaW5uZXIuc29ydC5kYXRhVHlwZSB8fCBnZXRTb3J0VHlwZShjb25maWcsIGNvbmZpZy5zb3J0LmRlZmF1bHQpO1xuXG5cdFx0cmV0dXJuIGRhdGFVdGlsLmRlZmF1bHRDb21wYXJhdG9yKGEsIGIsIHtcblx0XHRcdGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuXHRcdFx0ZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG5cdFx0XHRkYXRhVHlwZTogZGF0YVR5cGUsXG5cdFx0XHRlZGl0ZWRWYWx1ZXM6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXG5cdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXksXG5cdFx0XHRuYW1lOiBjb25maWcubG9jYWxlLm5hbWVcblx0XHR9KTtcblx0fSk7XG5cblx0aWYgKHVwZGF0ZVRhYmxlKSB7XG5cdFx0dGFibGVNb2R1bGUudXBkYXRlVGFibGUoY29uZmlnKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZXNldFNvcnQoY29uZmlnKSB7XG5cdGNvbmZpZy5pbm5lci5zb3J0LmF0dHJpYnV0ZSA9XG5cdGNvbmZpZy5pbm5lci5zb3J0LmRpcmVjdGlvbiA9XG5cdGNvbmZpZy5pbm5lci5zb3J0LmRhdGFUeXBlID0gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuXG5cdGNvbmZpZy5kYXRhU291cmNlLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdGlmIChjb25maWcuc29ydC5jdXN0b21Tb3J0ICE9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gY29uZmlnLnNvcnQuY3VzdG9tU29ydChhLCBiLCB7XG5cdFx0XHRcdGF0dHJpYnV0ZTogY29uZmlnLnNvcnQuZGVmYXVsdCxcblx0XHRcdFx0ZGlyZWN0aW9uOiAnZG93bicsXG5cdFx0XHRcdGRhdGFUeXBlOiBnZXRTb3J0VHlwZShjb25maWcsIGNvbmZpZy5zb3J0LmRlZmF1bHQpLFxuXHRcdFx0XHRlZGl0ZWRWYWx1ZXM6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXG5cdFx0XHRcdHVuaXF1ZVJvd0tleTogY29uZmlnLnVuaXF1ZVJvd0tleVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGFVdGlsLmRlZmF1bHRDb21wYXJhdG9yKGEsIGIsIHtcblx0XHRcdGF0dHJpYnV0ZTogY29uZmlnLnNvcnQuZGVmYXVsdCxcblx0XHRcdGRpcmVjdGlvbjogJ2Rvd24nLFxuXHRcdFx0ZGF0YVR5cGU6IGdldFNvcnRUeXBlKGNvbmZpZywgY29uZmlnLnNvcnQuZGVmYXVsdCksXG5cdFx0XHRlZGl0ZWRWYWx1ZXM6IGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXMsXG5cdFx0XHR1bmlxdWVSb3dLZXk6IGNvbmZpZy51bmlxdWVSb3dLZXksXG5cdFx0XHRuYW1lOiBjb25maWcubG9jYWxlLm5hbWVcblx0XHR9KTtcblx0fSk7XG5cblx0dGFibGVNb2R1bGUudXBkYXRlVGFibGUoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U29ydFR5cGUoY29uZmlnLCBhdHRyaWJ1dGUpIHtcblx0dmFyIGhlYWRlck9iaiA9IGNvbmZpZ1V0aWwuZ2V0SGVhZGVyT2JqZWN0KGNvbmZpZywgYXR0cmlidXRlKTtcblxuXHRyZXR1cm4gdHlwZW9mIGhlYWRlck9iaiA9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgaGVhZGVyT2JqLmRhdGFUeXBlID09ICd1bmRlZmluZWQnID8gJ3N0cmluZycgOiBoZWFkZXJPYmouZGF0YVR5cGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzb3J0QnlDb2x1bW46IHNvcnRCeUNvbHVtbixcblx0c29ydDogc29ydCxcblx0cmVzZXRTb3J0OiByZXNldFNvcnRcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGFibGVVdGlsICAgPSByZXF1aXJlKCcuLi91dGlscy90YWJsZScpLFxuXHRjb25maWdVdGlsICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24nKSxcblx0Y2VsbEVsZW1lbnQgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9jZWxsJyk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVRhYmxlKGNvbmZpZykge1xuXHR1cGRhdGVIZWFkZXIoY29uZmlnKTtcblx0dXBkYXRlRGF0YShjb25maWcpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVIZWFkZXIoY29uZmlnKSB7XG5cdHZhciBjb2xzcGFuID0gMSxcblx0XHRkYXRhSGVhZGVyUm93TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5kYXRhSGVhZGVyVGFibGUgKyAnIHRyLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlclJvdyksXG5cdFx0Zml4ZWRIZWFkZXJSb3dMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkSGVhZGVyVGFibGUgKyAnIHRyLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmhlYWRlclJvdyk7XG5cblx0Ly8gSGVhZGVyIGNlbGwgdXBkYXRlXG5cdGRhdGFIZWFkZXJSb3dMaXN0LmZvckVhY2goZnVuY3Rpb24ocm93LCByb3dDb3VudCkge1xuXHRcdHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5oZWFkZXJDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGNlbGxDb3VudCkge1xuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWcuaGVhZGVyc1tyb3dDb3VudF1bY2VsbENvdW50XSxcblx0XHRcdFx0aXNMYXN0Um93ID0gY29uZmlnLmlubmVyLmluZGV4T2ZDZWxsS2V5SGVhZGVyID09PSByb3dDb3VudDtcblxuXHRcdFx0aWYgKGNvbHNwYW4gPiAxKSB7XG5cdFx0XHRcdGNlbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0Y29sc3Bhbi0tO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2VsbEVsZW1lbnQudXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGwsIGNlbGxFbGVtZW50LmNyZWF0ZUhlYWRlckRhdGEoY29uZmlnLCBjZWxsLCBjZWxsT2JqLCBpc0xhc3RSb3cpKTtcblxuXHRcdFx0XHRjZWxsLnN0eWxlLmRpc3BsYXkgPSAndGFibGUtY2VsbCc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgY2VsbE9iai5jb2xzcGFuID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGNlbGwucmVtb3ZlQXR0cmlidXRlKCdjb2xzcGFuJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjZWxsLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsIGNlbGxPYmouY29sc3Bhbik7XG5cblx0XHRcdFx0Y29sc3BhbiA9IGNlbGxPYmouY29sc3Bhbjtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGNvbHNwYW4gPSAxO1xuXHR9KTtcblxuXHQvLyBGaXhlZCBoZWFkZXIgY2VsbCB1cGRhdGVcblx0Zml4ZWRIZWFkZXJSb3dMaXN0LmZvckVhY2goZnVuY3Rpb24ocm93LCByb3dDb3VudCkge1xuXHRcdHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5oZWFkZXJDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGNlbGxDb3VudCkge1xuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWcuZml4ZWRIZWFkZXJzW3Jvd0NvdW50XVtjZWxsQ291bnRdLFxuXHRcdFx0XHRpc0xhc3RSb3cgPSBjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXIgPT09IHJvd0NvdW50O1xuXG5cdFx0XHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbCwgY2VsbEVsZW1lbnQuY3JlYXRlSGVhZGVyRGF0YShjb25maWcsIGNlbGwsIGNlbGxPYmosIGlzTGFzdFJvdykpO1xuXHRcdH0pO1xuXG5cdFx0dXBkYXRlRml4ZWRIZWlnaHQoY29uZmlnLCBkYXRhSGVhZGVyUm93TGlzdCwgcm93LCByb3dDb3VudCk7XG5cdH0pO1xuXG5cdC8vIEZpbHRlciByb3cgdXBkYXRlXG5cdGlmIChjb25maWcuZmlsdGVyLmVuYWJsZWQpIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YUhlYWRlclRhYmxlICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGNlbGxDb3VudCkge1xuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWdVdGlsLmdldEtleUhlYWRlcihjb25maWcpW2NlbGxDb3VudF0sXG5cdFx0XHRcdGZpbHRlck9iaiA9IGNvbmZpZy5pbm5lci5maWx0ZXJzW2NlbGxPYmoua2V5XSB8fCB7fSxcblx0XHRcdFx0Y3VycmVudEZpbHRlckF0dHIgPSBjZWxsLmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnKTtcblxuXHRcdFx0aWYgKGNlbGxPYmoua2V5ID09PSBjdXJyZW50RmlsdGVyQXR0cikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLWF0dHJpYnV0ZScsIGNlbGxPYmoua2V5KTtcblx0XHRcdGNlbGwuY2xhc3NMaXN0LnRvZ2dsZShjb25maWcuaW5uZXIuc2VsZWN0b3JzLmZpbHRlckRpc2FibGVkLCBjZWxsT2JqLmZpbHRlckRpc2FibGVkKTtcblxuXHRcdFx0Y2VsbEVsZW1lbnQudXBkYXRlRGF0YUNvbnRhaW5lcihjb25maWcsIGNlbGwsIGNlbGxFbGVtZW50LmNyZWF0ZUZpbHRlckRhdGEoY29uZmlnLCBjZWxsLCBjZWxsT2JqLCBmaWx0ZXJPYmopKTtcblx0XHR9KTtcblxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5maXhlZEhlYWRlclRhYmxlICsgJyB0ZC4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5maWx0ZXJDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGNlbGxDb3VudCkge1xuXHRcdFx0dmFyIGNlbGxPYmogPSBjb25maWcuZml4ZWRIZWFkZXJzW2NvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlcl1bY2VsbENvdW50XSxcblx0XHRcdFx0ZmlsdGVyT2JqID0gY29uZmlnLmlubmVyLmZpbHRlcnNbY2VsbE9iai5rZXldIHx8IHt9LFxuXHRcdFx0XHRjdXJyZW50RmlsdGVyQXR0ciA9IGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLWF0dHJpYnV0ZScpO1xuXG5cdFx0XHRpZiAoY2VsbE9iai5rZXkgPT09IGN1cnJlbnRGaWx0ZXJBdHRyKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYXR0cmlidXRlJywgY2VsbE9iai5rZXkpO1xuXHRcdFx0Y2VsbC5jbGFzc0xpc3QudG9nZ2xlKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMuZmlsdGVyRGlzYWJsZWQsIGNlbGxPYmouZmlsdGVyRGlzYWJsZWQpO1xuXG5cdFx0XHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgY2VsbCwgY2VsbEVsZW1lbnQuY3JlYXRlRmlsdGVyRGF0YShjb25maWcsIGNlbGwsIGNlbGxPYmosIGZpbHRlck9iaikpO1xuXHRcdH0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURhdGEoY29uZmlnKSB7XG5cdHZhciBkYXRhUm93TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5kYXRhVGFibGUgKyAnIHRyLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmRhdGFSb3cpLFxuXHRcdGZpeGVkUm93TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgY29uZmlnLnNlbGVjdG9ycy5maXhlZFRhYmxlICsgJyB0ci4nICsgY29uZmlnLmlubmVyLnNlbGVjdG9ycy5kYXRhUm93KTtcblxuXHQvLyBDZWxsIGRhdGEgcm93IHVwZGF0ZVxuXHRkYXRhUm93TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHJvdywgcm93TnVtYmVyKSB7XG5cdFx0cm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmRhdGFDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGNlbGxOdW1iZXIpIHtcblx0XHRcdHZhciBjZWxsRGF0YSA9IHRhYmxlVXRpbC5nZXRDZWxsRGF0YShjb25maWcsIHJvd051bWJlciwgY2VsbE51bWJlcik7XG5cblx0XHRcdGNlbGxFbGVtZW50LnVwZGF0ZUNlbGwoY29uZmlnLCBjZWxsLCBjZWxsRGF0YSk7XG5cdFx0fSk7XG5cdH0pO1xuXG5cdC8vIEZpeGVkIGNlbGwgZGF0YSByb3cgdXBkYXRlXG5cdGZpeGVkUm93TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHJvdywgcm93TnVtYmVyKSB7XG5cdFx0cm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmRhdGFDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGNlbGxOdW1iZXIpIHtcblx0XHRcdHZhciBmaXhlZENlbGxEYXRhID0gdGFibGVVdGlsLmdldEZpeGVkQ2VsbERhdGEoY29uZmlnLCByb3dOdW1iZXIsIGNlbGxOdW1iZXIpO1xuXG5cdFx0XHRjZWxsRWxlbWVudC51cGRhdGVDZWxsKGNvbmZpZywgY2VsbCwgZml4ZWRDZWxsRGF0YSk7XG5cdFx0fSk7XG5cblx0XHR1cGRhdGVGaXhlZEhlaWdodChjb25maWcsIGRhdGFSb3dMaXN0LCByb3csIHJvd051bWJlcik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVGaXhlZEhlaWdodChjb25maWcsIGRhdGFSb3dMaXN0LCBmaXhlZFJvdywgcm93TnVtYmVyKSB7XG5cdGlmIChjb25maWcuZml4ZWRIZWFkZXJzLmxlbmd0aCA9PT0gMCB8fCBjb25maWcuZGltZW5zaW9ucy5sb2NrQ2VsbEhlaWdodCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciBkYXRhUm93ID0gZGF0YVJvd0xpc3QubGVuZ3RoIDwgcm93TnVtYmVyID8gbnVsbCA6IGRhdGFSb3dMaXN0W3Jvd051bWJlcl07XG5cblx0aWYgKGRhdGFSb3cgPT09IG51bGwpIHtcblx0XHRyZXR1cm47IC8vIEl0IHNob3VsZG4ndCBiZVxuXHR9XG5cblx0dmFyIG9yaWdpbmFsSGVpZ2h0ID0gY29uZmlnLmRpbWVuc2lvbnMuY2VsbEhlaWdodCArICdweCc7XG5cblx0aWYgKGRhdGFSb3cuc3R5bGUuaGVpZ2h0ICE9PSBvcmlnaW5hbEhlaWdodCkge1xuXHRcdGRhdGFSb3cuc3R5bGUuaGVpZ2h0ID0gb3JpZ2luYWxIZWlnaHQ7XG5cdH1cblxuXHRpZiAoZml4ZWRSb3cuc3R5bGUuaGVpZ2h0ICE9PSBvcmlnaW5hbEhlaWdodCkge1xuXHRcdGZpeGVkUm93LnN0eWxlLmhlaWdodCA9IG9yaWdpbmFsSGVpZ2h0O1xuXHR9XG5cblx0dmFyIGRhdGFIZWlnaHQgPSBkYXRhUm93LmNsaWVudEhlaWdodCxcblx0XHRmaXhlZEhlaWdodCA9IGZpeGVkUm93LmNsaWVudEhlaWdodDtcblxuXHRpZiAoZGF0YUhlaWdodCA9PT0gZml4ZWRIZWlnaHQpIHtcblx0XHRyZXR1cm47IC8vIE5vIG5lZWQgZm9yIGFkanVzdG1lbnRcblx0fVxuXG5cdGlmIChkYXRhSGVpZ2h0ID4gZml4ZWRIZWlnaHQpIHtcblx0XHRmaXhlZFJvdy5zdHlsZS5oZWlnaHQgPSBkYXRhSGVpZ2h0ICsgJ3B4Jztcblx0fSBlbHNlIHtcblx0XHRkYXRhUm93LnN0eWxlLmhlaWdodCA9IGZpeGVkSGVpZ2h0ICsgJ3B4Jztcblx0fVxufVxuXG5mdW5jdGlvbiBzY3JvbGxUYWJsZXMoY29uZmlnKSB7XG5cdHZhciBkYXRhQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLmRhdGFDb250YWluZXIpLFxuXHRcdGZpeGVkQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLmZpeGVkQ29udGFpbmVyKSxcblx0XHRkYXRhSGVhZGVyQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuc2VsZWN0b3JzLmRhdGFIZWFkZXJDb250YWluZXIpO1xuXG5cdGlmIChkYXRhQ29udGFpbmVyID09PSBudWxsKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKGZpeGVkQ29udGFpbmVyICE9PSBudWxsKSB7XG5cdFx0Zml4ZWRDb250YWluZXIuc2Nyb2xsVG9wID0gZGF0YUNvbnRhaW5lci5zY3JvbGxUb3A7XG5cdH1cblxuXHRpZiAoZGF0YUhlYWRlckNvbnRhaW5lciAhPT0gbnVsbCkge1xuXHRcdGRhdGFIZWFkZXJDb250YWluZXIuc2Nyb2xsTGVmdCA9IGRhdGFDb250YWluZXIuc2Nyb2xsTGVmdDtcblx0fVxufVxuXG5mdW5jdGlvbiByZXNldEVkaXRpbmdDZWxsKGNvbmZpZywgZXZlbnRIYW5kbGVycykge1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YVRhYmxlICsgJyB0ZC4nICsgY29uZmlnLnNlbGVjdG9ycy5lZGl0aW5nQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlZGl0aW5nQ2VsbCkge1xuXHRcdHZhciBpbnB1dCA9IGVkaXRpbmdDZWxsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG5cblx0XHRpbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnRIYW5kbGVycy5vbklucHV0Qmx1ckV2ZW50SGFuZGxlcik7XG5cdFx0aW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudEhhbmRsZXJzLm9uSW5wdXRLZXlVcEV2ZW50SGFuZGxlcik7XG5cblx0XHRjZWxsRWxlbWVudC51cGRhdGVEYXRhQ29udGFpbmVyKGNvbmZpZywgZWRpdGluZ0NlbGwsIGlucHV0LnZhbHVlKTtcblxuXHRcdGVkaXRpbmdDZWxsLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLnNlbGVjdG9ycy5lZGl0aW5nQ2VsbCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiByZXNldEVkaXRlZENlbGxzKGNvbmZpZykge1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNvbmZpZy5zZWxlY3RvcnMuZGF0YVRhYmxlICsgJyB0ZC4nICsgY29uZmlnLnNlbGVjdG9ycy5lZGl0aW5nQ2VsbCkuZm9yRWFjaChmdW5jdGlvbihlZGl0ZWRDZWxsKSB7XG5cdFx0ZWRpdGVkQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKGNvbmZpZy5zZWxlY3RvcnMuZWRpdGVkQ2VsbCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95VGFibGUoY29uZmlnKSB7XG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnNlbGVjdG9ycy5tYWluQ29udGFpbmVyKS5pbm5lckhUTUwgPSAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHVwZGF0ZVRhYmxlOiB1cGRhdGVUYWJsZSxcblx0dXBkYXRlSGVhZGVyOiB1cGRhdGVIZWFkZXIsXG5cdHVwZGF0ZURhdGE6IHVwZGF0ZURhdGEsXG5cdHNjcm9sbFRhYmxlczogc2Nyb2xsVGFibGVzLFxuXHRyZXNldEVkaXRpbmdDZWxsOiByZXNldEVkaXRpbmdDZWxsLFxuXHRyZXNldEVkaXRlZENlbGxzOiByZXNldEVkaXRlZENlbGxzLFxuXHRkZXN0cm95VGFibGU6IGRlc3Ryb3lUYWJsZVxufTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNob3coY29uZmlnLCBvcHRpb25zKSB7XG5cdHN3aXRjaCAob3B0aW9ucy50eXBlKSB7XG5cdFx0Y2FzZSAnaW5mbyc6XG5cdFx0XHRzaG93SW5mbyhjb25maWcsIG9wdGlvbnMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnd2Fybic6XG5cdFx0XHRzaG93V2Fybihjb25maWcsIG9wdGlvbnMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZXJyb3InOlxuXHRcdFx0c2hvd0Vycm9yKGNvbmZpZywgb3B0aW9ucyk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uZmlnLm1vZHVsZXMudG9vbHRpcC5zaG93KG9wdGlvbnMpO1xuXHRcdFx0YnJlYWs7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGlkZShjb25maWcsIGVsZW1lbnQpIHtcblx0Y29uZmlnLm1vZHVsZXMudG9vbHRpcC5oaWRlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBoaWRlQWxsKGNvbmZpZykge1xuXHRjb25maWcubW9kdWxlcy50b29sdGlwLmhpZGVBbGwoKTtcbn1cblxuZnVuY3Rpb24gc2hvd0luZm8oY29uZmlnLCBvcHRpb25zKSB7XG5cdGNvbmZpZy5tb2R1bGVzLnRvb2x0aXAuc2hvd0luZm8ob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHNob3dXYXJuKGNvbmZpZywgb3B0aW9ucykge1xuXHRjb25maWcubW9kdWxlcy50b29sdGlwLnNob3dXYXJuKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBzaG93RXJyb3IoY29uZmlnLCBvcHRpb25zKSB7XG5cdGNvbmZpZy5tb2R1bGVzLnRvb2x0aXAuc2hvd0Vycm9yKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBvbk1vdXNlRW50ZXJDZWxsV2l0aFRpdGxlKGNvbmZpZywgZWxlbWVudCkge1xuXHR2YXIgY2VsbERhdGFDb250YWluZXIgPSBlbGVtZW50ID09PSBudWxsID8gbnVsbCA6IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuaW5uZXIuc2VsZWN0b3JzLmNlbGxEYXRhQ29udGFpbmVyKTtcblxuXHRpZiAoY2VsbERhdGFDb250YWluZXIgPT09IG51bGwgfHwgIWVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNvbmZpZy5pbm5lci5zZWxlY3RvcnMub3ZlcmZsb3dlZENlbGwpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0c2hvd0luZm8oY29uZmlnLCB7XG5cdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHR0ZXh0OiBlbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gb25Nb3VzZUxlYXZlQ2VsbFdpdGhUaXRsZShjb25maWcsIGVsZW1lbnQpIHtcblx0aGlkZShjb25maWcsIGVsZW1lbnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c2hvdzogc2hvdyxcblx0aGlkZTogaGlkZSxcblx0aGlkZUFsbDogaGlkZUFsbCxcblx0c2hvd0luZm86IHNob3dJbmZvLFxuXHRzaG93V2Fybjogc2hvd1dhcm4sXG5cdHNob3dFcnJvcjogc2hvd0Vycm9yLFxuXHRvbk1vdXNlRW50ZXJDZWxsV2l0aFRpdGxlOiBvbk1vdXNlRW50ZXJDZWxsV2l0aFRpdGxlLFxuXHRvbk1vdXNlTGVhdmVDZWxsV2l0aFRpdGxlOiBvbk1vdXNlTGVhdmVDZWxsV2l0aFRpdGxlXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIENVU1RPTV9WQUxJREFUT1JfRVJST1JfTVNHID0gJ0N1c3RvbSB2YWxpZGF0b3IgZXJyb3InO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZShjb25maWcsIGNlbGxEYXRhKSB7XG5cdGlmICghY29uZmlnLmVkaXQudmFsaWRhdGUpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHR2YXIgdmFsaWRhdGlvblJlc3VsdCA9IFtdLFxuXHRcdGN1c3RvbVZhbGlkYXRvclJlc3VsdCA9IGNlbGxEYXRhLmN1c3RvbVZhbGlkYXRvciA9PT0gbnVsbCA/IG51bGwgOiBjZWxsRGF0YS5jdXN0b21WYWxpZGF0b3IoY2VsbERhdGEpO1xuXG5cdGlmIChBcnJheS5pc0FycmF5KGN1c3RvbVZhbGlkYXRvclJlc3VsdCkpIHtcblx0XHR2YWxpZGF0aW9uUmVzdWx0ID0gY3VzdG9tVmFsaWRhdG9yUmVzdWx0O1xuXHR9IGVsc2UgaWYgKGN1c3RvbVZhbGlkYXRvclJlc3VsdCA9PT0gZmFsc2UpIHtcblx0XHR2YWxpZGF0aW9uUmVzdWx0LnB1c2goQ1VTVE9NX1ZBTElEQVRPUl9FUlJPUl9NU0cpO1xuXHR9IGVsc2UgaWYgKGN1c3RvbVZhbGlkYXRvclJlc3VsdCAhPT0gbnVsbCAmJiBjdXN0b21WYWxpZGF0b3JSZXN1bHQgIT09IHRydWUpIHtcblx0XHR2YWxpZGF0aW9uUmVzdWx0LnB1c2goY3VzdG9tVmFsaWRhdG9yUmVzdWx0KTtcblx0fVxuXG5cdHJldHVybiB2YWxpZGF0aW9uUmVzdWx0LmNvbmNhdCh2YWxpZGF0ZU9iamVjdChjZWxsRGF0YSkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU9iamVjdChjZWxsRGF0YSkge1xuXHR2YXIgcmVzdWx0ID0gW10sXG5cdFx0dmFsaWRhdG9yT2JqZWN0ID0gY2VsbERhdGEudmFsaWRhdG9yT2JqZWN0O1xuXG5cdGlmICh0eXBlb2YgdmFsaWRhdG9yT2JqZWN0ID09ICd1bmRlZmluZWQnIHx8IHZhbGlkYXRvck9iamVjdCA9PT0gbnVsbCkge1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRPYmplY3Qua2V5cyh2YWxpZGF0b3JPYmplY3QpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFjaGVja1ZhbGlkYXRpb25SdWxlcyhjZWxsRGF0YSwga2V5LCB2YWxpZGF0b3JPYmplY3Rba2V5XSkpIHtcblx0XHRcdHZhciBlcnJvciA9IHt9O1xuXG5cdFx0XHRlcnJvcltrZXldID0gdmFsaWRhdG9yT2JqZWN0W2tleV07XG5cblx0XHRcdHJlc3VsdC5wdXNoKGVycm9yKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsaWRhdGlvblJ1bGVzKGNlbGxEYXRhLCBydWxlLCByZWZlcmVuY2VWYWx1ZSkge1xuXHRzd2l0Y2ggKHJ1bGUpIHtcblx0XHRjYXNlICdtaW4nOlxuXHRcdFx0cmV0dXJuIGNlbGxEYXRhLmdldFZhbHVlKCkgPj0gcmVmZXJlbmNlVmFsdWU7XG5cdFx0Y2FzZSAnbWF4Jzpcblx0XHRcdHJldHVybiBjZWxsRGF0YS5nZXRWYWx1ZSgpIDw9IHJlZmVyZW5jZVZhbHVlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gc2hvd0Vycm9ycyh2YWxpZGF0aW9uUmVzdWx0KSB7XG5cdHdpbmRvdy5jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh2YWxpZGF0aW9uUmVzdWx0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHR2YWxpZGF0ZTogdmFsaWRhdGUsXG5cdHNob3dFcnJvcnM6IHNob3dFcnJvcnNcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIEFycmF5LnByb3RvdHlwZS5maW5kID09ICd1bmRlZmluZWQnKSB7XG5cdEFycmF5LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZVxuXHRcdGlmICh0aGlzID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblxuXHRcdHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuXHRcdHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aCA+Pj4gMDtcblx0XHR2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcblx0XHR2YXIgdmFsdWU7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YWx1ZSA9IGxpc3RbaV07XG5cdFx0XHRpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuXHR9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG5cdEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPVxuXHRcdEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0RWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGZ1bmN0aW9uKHMpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxuXHRcdFx0XHRpID0gbWF0Y2hlcy5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdHJldHVybiBpID4gLTE7XG5cdFx0fTtcbn0iLCIndXNlIHN0cmljdCc7XG5cblsgRWxlbWVudC5wcm90b3R5cGUsIENoYXJhY3RlckRhdGEucHJvdG90eXBlLCBEb2N1bWVudFR5cGUucHJvdG90eXBlIF0uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG5cdGlmIChpdGVtLmhhc093blByb3BlcnR5KCdyZW1vdmUnKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ3JlbW92ZScsIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHRcdFx0aWYgKHRoaXMucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCkge1xuXHROb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBhcmd1bWVudCkge1xuXHRcdGFyZ3VtZW50ID0gYXJndW1lbnQgfHwgd2luZG93O1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjYWxsYmFjay5jYWxsKGFyZ3VtZW50LCB0aGlzW2ldLCBpLCB0aGlzKTtcblx0XHR9XG5cdH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT0gJ2Z1bmN0aW9uJykge1xuXHQvLyBNdXN0IGJlIHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHsgLy8gLmxlbmd0aCBvZiBmdW5jdGlvbiBpcyAyXG5cdFx0XHRpZiAodGFyZ2V0ID09PSBudWxsKSB7IC8vIFR5cGVFcnJvciBpZiB1bmRlZmluZWQgb3IgbnVsbFxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG5cblx0XHRcdGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcblxuXHRcdFx0XHRpZiAobmV4dFNvdXJjZSAhPT0gbnVsbCkgeyAvLyBTa2lwIG92ZXIgaWYgdW5kZWZpbmVkIG9yIG51bGxcblx0XHRcdFx0XHRmb3IgKHZhciBuZXh0S2V5IGluIG5leHRTb3VyY2UpIHtcblx0XHRcdFx0XHRcdC8vIEF2b2lkIGJ1Z3Mgd2hlbiBoYXNPd25Qcm9wZXJ0eSBpcyBzaGFkb3dlZFxuXHRcdFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXh0U291cmNlLCBuZXh0S2V5KSkge1xuXHRcdFx0XHRcdFx0XHR0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdG87XG5cdFx0fSxcblx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRjb25maWd1cmFibGU6IHRydWVcblx0fSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0Q29udGFpbmVySGVpZ2h0KGNvbmZpZykge1xuXHRyZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IC0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc2VsZWN0b3JzLm1haW5Db250YWluZXIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtXG5cdFx0XHQoY29uZmlnLmhlYWRlcnMubGVuZ3RoICsgKGNvbmZpZy5maWx0ZXIuZW5hYmxlZCA/IDEgOiAwKSkgKiBjb25maWcuZGltZW5zaW9ucy5jZWxsSGVpZ2h0IC0gNTI7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4T2ZDZWxsS2V5SGVhZGVyKGNvbmZpZykge1xuXHRyZXR1cm4gY29uZmlnLmhlYWRlcnMubGVuZ3RoIC0gMTtcbn1cblxuZnVuY3Rpb24gZ2V0U29ydERlZmF1bHQoY29uZmlnKSB7XG5cdHJldHVybiBjb25maWcudW5pcXVlUm93S2V5O1xufVxuXG4vLyBGaXJlZm94IHVzaW5nIE1vdXNlRXZlbnQuRE9NX0RFTFRBX0xJTkUgfHwgTW91c2VFdmVudC5ET01fREVMVEFfUEFHRSBpbnN0ZWFkIG9mIGV4YWN0IHBpeGVscywgd2hlbiBtZWFzdXJpbmcgc2Nyb2xsIGRlbHRhIHZhbHVlcy5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBnaXZlIHRoZSBleGFjdCBsaW5lIGhlaWdodCBmb3IgdGhlIHBpeGVsIGNvbnZlcnNpb25cbmZ1bmN0aW9uIGdldFNjcm9sbExpbmVIZWlnaHQoKSB7XG5cdHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcblxuXHRpZnJhbWUuc3JjID0gJyMnO1xuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cblx0dmFyIGl3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdyxcblx0XHRpZG9jID0gaXdpbi5kb2N1bWVudDtcblxuXHRpZG9jLm9wZW4oKTtcblx0aWRvYy53cml0ZSgnPCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PjxzcGFuPmE8L3NwYW4+PC9ib2R5PjwvaHRtbD4nKTtcblx0aWRvYy5jbG9zZSgpO1xuXG5cdHZhciBzcGFuID0gaWRvYy5ib2R5LmZpcnN0RWxlbWVudENoaWxkLFxuXHRcdHIgPSBzcGFuLm9mZnNldEhlaWdodDtcblxuXHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG5cblx0cmV0dXJuIHI7XG59XG5cbi8vIEZpcmVmb3ggdXNpbmcgTW91c2VFdmVudC5ET01fREVMVEFfTElORSB8fCBNb3VzZUV2ZW50LkRPTV9ERUxUQV9QQUdFIGluc3RlYWQgb2YgZXhhY3QgcGl4ZWxzLCB3aGVuIG1lYXN1cmluZyBzY3JvbGwgZGVsdGEgdmFsdWVzLlxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGdpdmUgdGhlIGV4YWN0IHBhZ2UgaGVpZ2h0IGZvciB0aGUgcGl4ZWwgY29udmVyc2lvblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFnZUhlaWdodCgpIHtcblx0cmV0dXJuIHdpbmRvdy5kb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2VsbEZ1bGxXaWR0aChjb25maWcpIHtcblx0cmV0dXJuIGNvbmZpZy5kaW1lbnNpb25zLmNlbGxQYWRkaW5nSG9yaXpvbnRhbCAqIDIgKyBjb25maWcuZGltZW5zaW9ucy5jZWxsV2lkdGggKyBjb25maWcuZGltZW5zaW9ucy5jZWxsQm9yZGVyV2lkdGg7XG59XG5cbmZ1bmN0aW9uIGdldEtleUhlYWRlcihjb25maWcpIHtcblx0cmV0dXJuIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5pbm5lci5pbmRleE9mQ2VsbEtleUhlYWRlcl07XG59XG5cbmZ1bmN0aW9uIGdldEZpeGVkS2V5SGVhZGVyKGNvbmZpZykge1xuXHRyZXR1cm4gY29uZmlnLmZpeGVkSGVhZGVyc1tjb25maWcuaW5uZXIuaW5kZXhPZkNlbGxLZXlIZWFkZXJdO1xufVxuXG5mdW5jdGlvbiBnZXRIZWFkZXJPYmplY3QoY29uZmlnLCBhdHRyaWJ1dGUpIHtcblx0cmV0dXJuIGdldEtleUhlYWRlcihjb25maWcpLmZpbmQoZnVuY3Rpb24oY29sdW1uKSB7XG5cdFx0cmV0dXJuIGNvbHVtbi5rZXkgPT09IGF0dHJpYnV0ZTtcblx0fSkgfHwgZ2V0Rml4ZWRLZXlIZWFkZXIoY29uZmlnKS5maW5kKGZ1bmN0aW9uKGNvbHVtbikge1xuXHRcdHJldHVybiBjb2x1bW4ua2V5ID09PSBhdHRyaWJ1dGU7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBuaWwoKSB7XG5cdHJldHVybiBmdW5jdGlvbigpIHt9O1xufVxuXG5mdW5jdGlvbiB3cmFwcGVyKGYpIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gZjsgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGdldERlZmF1bHRDb250YWluZXJIZWlnaHQ6IGdldERlZmF1bHRDb250YWluZXJIZWlnaHQsXG5cdGdldEluZGV4T2ZDZWxsS2V5SGVhZGVyOiBnZXRJbmRleE9mQ2VsbEtleUhlYWRlcixcblx0Z2V0U29ydERlZmF1bHQ6IGdldFNvcnREZWZhdWx0LFxuXHRnZXRTY3JvbGxMaW5lSGVpZ2h0OiBnZXRTY3JvbGxMaW5lSGVpZ2h0LFxuXHRnZXRTY3JvbGxQYWdlSGVpZ2h0OiBnZXRTY3JvbGxQYWdlSGVpZ2h0LFxuXHRnZXRDZWxsRnVsbFdpZHRoOiBnZXRDZWxsRnVsbFdpZHRoLFxuXHRnZXRLZXlIZWFkZXI6IGdldEtleUhlYWRlcixcblx0Z2V0Rml4ZWRLZXlIZWFkZXI6IGdldEZpeGVkS2V5SGVhZGVyLFxuXHRnZXRIZWFkZXJPYmplY3Q6IGdldEhlYWRlck9iamVjdCxcblx0bmlsOiBuaWwsXG5cdHdyYXBwZXI6IHdyYXBwZXJcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRklMVEVSX1RZUEVTID0gWyAnZXF1YWxzJywgJ2VxdWFsc0Nhc2VJbnNlbnNpdGl2ZScsICdsaWtlJywgJ2xpa2VDYXNlSW5zZW5zaXRpdmUnLCAnZ3JlYXRlclRoYW4nLCAnZ3JlYXRlck9yRXF1YWwnLFxuXHQnbGVzc1RoYW4nLCAnbGVzc09yRXF1YWwnLCAnYmV0d2VlbicsICdiZXR3ZWVuSW5jbHVzaXZlJywgJ2NvbnRhaW5zJyBdO1xuXG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyYXRvcihhLCBiLCBvcHRpb25zKSB7XG5cdHZhciBhdHRyQSA9IGdldE1lcmdlZFZhbHVlKGEsIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpLFxuXHRcdGF0dHJCID0gZ2V0TWVyZ2VkVmFsdWUoYiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSksXG5cdFx0aXNEb3duID0gb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdkb3duJztcblxuXHRpZiAob3B0aW9ucy5kYXRhVHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHR2YXIgY29tcGFyZVJlc3VsdCA9IDA7XG5cblx0XHRpZiAodHlwZW9mIGF0dHJBID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRjb21wYXJlUmVzdWx0ID0gLTE7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgYXR0ckIgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdGNvbXBhcmVSZXN1bHQgPSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhdHRyQSArPSAnJztcblx0XHRcdGF0dHJCICs9ICcnO1xuXG5cdFx0XHRjb21wYXJlUmVzdWx0ID0gYXR0ckEubG9jYWxlQ29tcGFyZShhdHRyQiwgb3B0aW9ucy5sb2NhbGUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpc0Rvd24gfHwgY29tcGFyZVJlc3VsdCA9PT0gMCA/IGNvbXBhcmVSZXN1bHQgOiBjb21wYXJlUmVzdWx0ICogLTE7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRhdHRyQSA9IHBhcnNlRmxvYXQoYXR0ckEpO1xuXHRcdGF0dHJCID0gcGFyc2VGbG9hdChhdHRyQik7XG5cblx0XHRpZiAoaXNOYU4oYXR0ckEpKSB7XG5cdFx0XHRyZXR1cm4gaXNEb3duID8gLTEgOiAxO1xuXHRcdH1cblxuXHRcdGlmIChpc05hTihhdHRyQikpIHtcblx0XHRcdHJldHVybiBpc0Rvd24gPyAxIDogLTE7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHR5cGVvZiBhdHRyQSA9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYXR0ckIgIT0gJ3VuZGVmaW5lZCcgfHwgYXR0ckEgPCBhdHRyQikge1xuXHRcdHJldHVybiBpc0Rvd24gPyAtMSA6IDE7XG5cdH1cblxuXHRpZiAodHlwZW9mIGF0dHJBICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiBhdHRyQiA9PSAndW5kZWZpbmVkJyB8fCBhdHRyQSA+IGF0dHJCKSB7XG5cdFx0cmV0dXJuIGlzRG93biA/IDEgOiAtMTtcblx0fVxuXG5cdHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJEYXRhKG9wdGlvbnMpIHtcblx0aWYgKEZJTFRFUl9UWVBFUy5pbmRleE9mKG9wdGlvbnMuZmlsdGVyVHlwZSkgPT09IC0xKSB7XG5cdFx0d2luZG93LmNvbnNvbGUuZXJyb3IoJ05vdCBhIHZhbGlkIGZpbHRlciB0eXBlISAoJyArIG9wdGlvbnMuZmlsdGVyVHlwZSArICcpJyk7XG5cblx0XHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlO1xuXHR9XG5cblx0c3dpdGNoIChvcHRpb25zLmZpbHRlclR5cGUpIHtcblx0XHRjYXNlICdlcXVhbHMnOlxuXHRcdFx0cmV0dXJuIGVxdWFsc0ZpbHRlcihvcHRpb25zKTtcblx0XHRjYXNlICdlcXVhbHNDYXNlSW5zZW5zaXRpdmUnOlxuXHRcdFx0cmV0dXJuIGVxdWFsc0Nhc2VJbnNlbnNpdGl2ZUZpbHRlcihvcHRpb25zKTtcblx0XHRjYXNlICdsaWtlJzpcblx0XHRcdHJldHVybiBsaWtlRmlsdGVyKG9wdGlvbnMpO1xuXHRcdGNhc2UgJ2xpa2VDYXNlSW5zZW5zaXRpdmUnOlxuXHRcdFx0cmV0dXJuIGxpa2VDYXNlSW5zZW5zaXRpdmVGaWx0ZXIob3B0aW9ucyk7XG5cdFx0Y2FzZSAnZ3JlYXRlclRoYW4nOlxuXHRcdFx0cmV0dXJuIGdyZWF0ZXJUaGFuRmlsdGVyKG9wdGlvbnMpO1xuXHRcdGNhc2UgJ2dyZWF0ZXJPckVxdWFsJzpcblx0XHRcdHJldHVybiBncmVhdGVyT3JFcXVhbEZpbHRlcihvcHRpb25zKTtcblx0XHRjYXNlICdsZXNzVGhhbic6XG5cdFx0XHRyZXR1cm4gbGVzc1RoYW5GaWx0ZXIob3B0aW9ucyk7XG5cdFx0Y2FzZSAnbGVzc09yRXF1YWwnOlxuXHRcdFx0cmV0dXJuIGxlc3NPckVxdWFsRmlsdGVyKG9wdGlvbnMpO1xuXHRcdGNhc2UgJ2JldHdlZW4nOlxuXHRcdFx0cmV0dXJuIGJldHdlZW5GaWx0ZXIob3B0aW9ucyk7XG5cdFx0Y2FzZSAnYmV0d2VlbkluY2x1c2l2ZSc6XG5cdFx0XHRyZXR1cm4gYmV0d2VlbkluY2x1c2l2ZUZpbHRlcihvcHRpb25zKTtcblx0XHRjYXNlICdjb250YWlucyc6XG5cdFx0XHRyZXR1cm4gY29udGFpbnNGaWx0ZXIob3B0aW9ucyk7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gZXF1YWxzRmlsdGVyKG9wdGlvbnMpIHtcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkgPT09IG9wdGlvbnMudmFsdWVPbmU7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBlcXVhbHNDYXNlSW5zZW5zaXRpdmVGaWx0ZXIob3B0aW9ucykge1xuXHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlLmZpbHRlcihmdW5jdGlvbihvYmopIHtcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KS50b1VwcGVyQ2FzZSgpID09PSBvcHRpb25zLnZhbHVlT25lLnRvVXBwZXJDYXNlKCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBsaWtlRmlsdGVyKG9wdGlvbnMpIHtcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkuaW5kZXhPZihvcHRpb25zLnZhbHVlT25lKSAhPT0gLTE7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBsaWtlQ2FzZUluc2Vuc2l0aXZlRmlsdGVyKG9wdGlvbnMpIHtcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkudG9VcHBlckNhc2UoKS5pbmRleE9mKG9wdGlvbnMudmFsdWVPbmUudG9VcHBlckNhc2UoKSkgIT09IC0xO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ3JlYXRlclRoYW5GaWx0ZXIob3B0aW9ucykge1xuXHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlLmZpbHRlcihmdW5jdGlvbihvYmopIHtcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSA+IG9wdGlvbnMudmFsdWVPbmU7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBncmVhdGVyT3JFcXVhbEZpbHRlcihvcHRpb25zKSB7XG5cdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2UuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xuXHRcdHJldHVybiBnZXRNZXJnZWRWYWx1ZShvYmosIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpID49IG9wdGlvbnMudmFsdWVPbmU7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBsZXNzVGhhbkZpbHRlcihvcHRpb25zKSB7XG5cdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2UuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xuXHRcdHJldHVybiBnZXRNZXJnZWRWYWx1ZShvYmosIG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLmVkaXRlZFZhbHVlcywgb3B0aW9ucy51bmlxdWVSb3dLZXkpIDwgb3B0aW9ucy52YWx1ZU9uZTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGxlc3NPckVxdWFsRmlsdGVyKG9wdGlvbnMpIHtcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkgPD0gb3B0aW9ucy52YWx1ZU9uZTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGJldHdlZW5GaWx0ZXIob3B0aW9ucykge1xuXHRyZXR1cm4gb3B0aW9ucy5kYXRhU291cmNlLmZpbHRlcihmdW5jdGlvbihvYmopIHtcblx0XHRyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSA+IG9wdGlvbnMudmFsdWVPbmUgJiYgb2JqW29wdGlvbnMuYXR0cmlidXRlXSA8IG9wdGlvbnMudmFsdWVUd287XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBiZXR3ZWVuSW5jbHVzaXZlRmlsdGVyKG9wdGlvbnMpIHtcblx0cmV0dXJuIG9wdGlvbnMuZGF0YVNvdXJjZS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIGdldE1lcmdlZFZhbHVlKG9iaiwgb3B0aW9ucy5hdHRyaWJ1dGUsIG9wdGlvbnMuZWRpdGVkVmFsdWVzLCBvcHRpb25zLnVuaXF1ZVJvd0tleSkgPj0gb3B0aW9ucy52YWx1ZU9uZSAmJiBvYmpbb3B0aW9ucy5hdHRyaWJ1dGVdIDw9IG9wdGlvbnMudmFsdWVUd287XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0ZpbHRlcihvcHRpb25zKSB7XG5cdHJldHVybiBvcHRpb25zLmRhdGFTb3VyY2UuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xuXHRcdHJldHVybiBvcHRpb25zLnZhbHVlT25lLmluZGV4T2YoZ2V0TWVyZ2VkVmFsdWUob2JqLCBvcHRpb25zLmF0dHJpYnV0ZSwgb3B0aW9ucy5lZGl0ZWRWYWx1ZXMsIG9wdGlvbnMudW5pcXVlUm93S2V5KSkgIT09IC0xO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVCeVR5cGUodmFsdWUsIGRhdGFUeXBlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRzd2l0Y2ggKGRhdGFUeXBlKSB7XG5cdFx0Y2FzZSAnc3RyaW5nJzpcblx0XHRcdHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuXHRcdGNhc2UgJ251bWJlcic6XG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZShyb3csIGF0dHJpYnV0ZSwgZWRpdGVkVmFsdWVzLCB1bmlxdWVSb3dLZXkpIHtcblx0dmFyIGVkaXRlZFJvdyA9IGVkaXRlZFZhbHVlc1tyb3dbdW5pcXVlUm93S2V5XV07XG5cblx0cmV0dXJuIHR5cGVvZiBlZGl0ZWRSb3cgPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGVkaXRlZFJvd1thdHRyaWJ1dGVdID09ICd1bmRlZmluZWQnID8gcm93W2F0dHJpYnV0ZV0gOiBlZGl0ZWRSb3dbYXR0cmlidXRlXTtcbn1cblxuZnVuY3Rpb24gY2xvbmVPYmplY3Qob2JqKSB7XG5cdHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0ZGVmYXVsdENvbXBhcmF0b3I6IGRlZmF1bHRDb21wYXJhdG9yLFxuXHRmaWx0ZXJEYXRhOiBmaWx0ZXJEYXRhLFxuXHRnZXRWYWx1ZUJ5VHlwZTogZ2V0VmFsdWVCeVR5cGUsXG5cdGNsb25lT2JqZWN0OiBjbG9uZU9iamVjdFxufTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGluZGV4T2ZFbGVtZW50KGVsZW1lbnQpIHtcblx0dmFyIGNvbGxlY3Rpb24gPSBlbGVtZW50LnBhcmVudE5vZGUuY2hpbGROb2RlcztcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoY29sbGVjdGlvbltpXSA9PT0gZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBmaW5kUGFyZW50Tm9kZShjaGlsZCwgc2VsZWN0b3IpIHtcblx0aWYgKGNoaWxkLnBhcmVudE5vZGUgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIGlmIChjaGlsZC5wYXJlbnROb2RlLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG5cdFx0cmV0dXJuIGNoaWxkLnBhcmVudE5vZGU7XG5cdH1cblxuXHRyZXR1cm4gZmluZFBhcmVudE5vZGUoY2hpbGQucGFyZW50Tm9kZSwgc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBnZXRSb3dOdW1iZXIoY29uZmlnLCBjZWxsTm9kZSkge1xuXHRyZXR1cm4gaW5kZXhPZkVsZW1lbnQoY2VsbE5vZGUucGFyZW50Tm9kZSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbHVtbk51bWJlcihjb25maWcsIGNlbGxOb2RlKSB7XG5cdHJldHVybiBpbmRleE9mRWxlbWVudChjZWxsTm9kZSk7XG59XG5cbmZ1bmN0aW9uIGlzRWxsaXBzaXNBY3RpdmUoZWxlbWVudCkge1xuXHRyZXR1cm4gZWxlbWVudC5vZmZzZXRXaWR0aCA8IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XG59XG5cbmZ1bmN0aW9uIGlzT3ZlcmZsb3duKGVsZW1lbnQpIHtcblx0cmV0dXJuIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgZWxlbWVudC5zY3JvbGxXaWR0aCA+IGVsZW1lbnQuY2xpZW50V2lkdGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpbmRleE9mRWxlbWVudDogaW5kZXhPZkVsZW1lbnQsXG5cdGZpbmRQYXJlbnROb2RlOiBmaW5kUGFyZW50Tm9kZSxcblx0Z2V0Um93TnVtYmVyOiBnZXRSb3dOdW1iZXIsXG5cdGdldENvbHVtbk51bWJlcjogZ2V0Q29sdW1uTnVtYmVyLFxuXHRpc0VsbGlwc2lzQWN0aXZlOiBpc0VsbGlwc2lzQWN0aXZlLFxuXHRpc092ZXJmbG93bjogaXNPdmVyZmxvd25cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgS0VZX0NPREVTID0ge1xuXHRFTlRFUjogMTMsXG5cdEVTQ0FQRTogMjdcbn07XG5cbmZ1bmN0aW9uIGdldEtleUNvZGUoZXZlbnQpIHtcblx0cmV0dXJuIGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRnZXRLZXlDb2RlOiBnZXRLZXlDb2RlLFxuXHRLRVlfQ09ERVM6IEtFWV9DT0RFU1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBDZWxsICAgICAgID0gcmVxdWlyZSgnLi4vbW9kZWxzL2RhdGEvY2VsbCcpLFxuXHRjb25maWdVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlndXJhdGlvbicpO1xuXG5mdW5jdGlvbiBnZXRDZWxsRGF0YShjb25maWcsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSB7XG5cdHZhciBjZWxsRGF0YSA9IG51bGwsXG5cdFx0aGVhZGVyT2JqID0gY29uZmlnVXRpbC5nZXRLZXlIZWFkZXIoY29uZmlnKVtjb2x1bW5OdW1iZXJdLFxuXHRcdHVuaXF1ZVJvd0tleSA9IG51bGw7XG5cblx0Ly8gSWYgdGhlIGluZGV4IGlzIGhpZ2hlciB0aGFuIHRoZSBhdmFpbGFibGUgcm93cyBudW1iZXJcblx0aWYgKHJvd051bWJlciA+PSBjb25maWcuZGF0YVNvdXJjZS5sZW5ndGgpIHtcblx0XHRjZWxsRGF0YSA9IG5ldyBDZWxsKHtcblx0XHRcdGtleTogaGVhZGVyT2JqLmtleSxcblx0XHRcdHZhbHVlOiAnJyxcblx0XHRcdGRhdGFUeXBlOiBoZWFkZXJPYmouZGF0YVR5cGVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR1bmlxdWVSb3dLZXkgPSBjb25maWcuZGF0YVNvdXJjZVtyb3dOdW1iZXJdW2NvbmZpZy51bmlxdWVSb3dLZXldO1xuXHRcdGNlbGxEYXRhID0gbmV3IENlbGwoe1xuXHRcdFx0a2V5OiBoZWFkZXJPYmoua2V5LFxuXHRcdFx0dmFsdWU6IGNvbmZpZy5kYXRhU291cmNlW3Jvd051bWJlcl1baGVhZGVyT2JqLmtleV0sXG5cdFx0XHRkYXRhVHlwZTogaGVhZGVyT2JqLmRhdGFUeXBlLFxuXHRcdFx0cm93TnVtYmVyOiByb3dOdW1iZXIsXG5cdFx0XHRjb2x1bW5OdW1iZXI6IGNvbHVtbk51bWJlcixcblx0XHRcdHZhbGlkYXRvck9iamVjdDogaGVhZGVyT2JqLnZhbGlkYXRvck9iamVjdCxcblx0XHRcdGN1c3RvbVZhbGlkYXRvcjogaGVhZGVyT2JqLmN1c3RvbVZhbGlkYXRvclxuXHRcdH0pO1xuXG5cdFx0aWYgKHR5cGVvZiBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzW3VuaXF1ZVJvd0tleV0gIT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRcdHR5cGVvZiBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzW3VuaXF1ZVJvd0tleV1baGVhZGVyT2JqLmtleV0gIT0gJ3VuZGVmaW5lZCcpIHtcblxuXHRcdFx0Y2VsbERhdGEuY2xhc3MgPSBjb25maWcuc2VsZWN0b3JzLmVkaXRlZENlbGw7XG5cdFx0XHRjZWxsRGF0YS51cGRhdGVWYWx1ZShjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzW3VuaXF1ZVJvd0tleV1baGVhZGVyT2JqLmtleV0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjZWxsRGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0Rml4ZWRDZWxsRGF0YShjb25maWcsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSB7XG5cdHZhciBjZWxsRGF0YSA9IG51bGwsXG5cdFx0aGVhZGVyT2JqID0gY29uZmlnVXRpbC5nZXRGaXhlZEtleUhlYWRlcihjb25maWcpW2NvbHVtbk51bWJlcl07XG5cblx0Ly8gSWYgdGhlIGluZGV4IGlzIGhpZ2hlciB0aGFuIHRoZSBhdmFpbGFibGUgcm93cyBudW1iZXJcblx0aWYgKHJvd051bWJlciA+PSBjb25maWcuZGF0YVNvdXJjZS5sZW5ndGgpIHtcblx0XHRjZWxsRGF0YSA9IG5ldyBDZWxsKHtcblx0XHRcdGtleTogaGVhZGVyT2JqLmtleSxcblx0XHRcdHZhbHVlOiAnJyxcblx0XHRcdGRhdGFUeXBlOiBoZWFkZXJPYmouZGF0YVR5cGVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRjZWxsRGF0YSA9IG5ldyBDZWxsKHtcblx0XHRcdGtleTogaGVhZGVyT2JqLmtleSxcblx0XHRcdHZhbHVlOiBjb25maWcuZGF0YVNvdXJjZVtyb3dOdW1iZXJdW2hlYWRlck9iai5rZXldLFxuXHRcdFx0ZGF0YVR5cGU6IGhlYWRlck9iai5kYXRhVHlwZSxcblx0XHRcdHJvd051bWJlcjogcm93TnVtYmVyLFxuXHRcdFx0Y29sdW1uTnVtYmVyOiBjb2x1bW5OdW1iZXIsXG5cdFx0XHR2YWxpZGF0b3JPYmplY3Q6IGhlYWRlck9iai52YWxpZGF0b3JPYmplY3QsXG5cdFx0XHRjdXN0b21WYWxpZGF0b3I6IGhlYWRlck9iai5jdXN0b21WYWxpZGF0b3Jcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBjZWxsRGF0YTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VFZGl0ZWRWYWx1ZXNJblJvdyhjb25maWcsIHJvdykge1xuXHR2YXIgbWVyZ2VkUm93RGF0YSA9IHt9LFxuXHRcdHVuaXF1ZVJvd0tleSA9IHJvd1tjb25maWcudW5pcXVlUm93S2V5XTtcblxuXHRpZiAodHlwZW9mIGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XSA9PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiByb3c7XG5cdH1cblxuXHRPYmplY3Qua2V5cyhyb3cpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0bWVyZ2VkUm93RGF0YVtrZXldID0gY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldW2tleV0gfHwgcm93W2tleV07XG5cdH0pO1xuXG5cdHJldHVybiBtZXJnZWRSb3dEYXRhO1xufVxuXG5mdW5jdGlvbiBtZXJnZUVkaXRlZFZhbHVlc0luRGF0YVNvdXJjZShjb25maWcsIGRzKSB7XG5cdHZhciBtZXJnZWREcyA9IFtdO1xuXG5cdGRzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG5cdFx0bWVyZ2VkRHMucHVzaChtZXJnZUVkaXRlZFZhbHVlc0luUm93KGNvbmZpZywgcm93KSk7XG5cdH0pO1xuXG5cdHJldHVybiBtZXJnZWREcztcbn1cblxuZnVuY3Rpb24gc2VwYXJhdGVWYWx1ZXNJbkRhdGFTb3VyY2UoY29uZmlnLCBtZXJnZWREcykge1xuXHR2YXIgc2VwYXJhdGVkRHMgPSBbXTtcblxuXHRtZXJnZWREcy5mb3JFYWNoKGZ1bmN0aW9uKG1lcmdlZFJvdykge1xuXHRcdHZhciBvcmlnaW5hbFJvdyA9IGNvbmZpZy5pbm5lci5vcmlnaW5hbERhdGFTb3VyY2UuZmluZChmdW5jdGlvbihyb3cpIHtcblx0XHRcdHJldHVybiByb3dbY29uZmlnLnVuaXF1ZVJvd0tleV0gPT09IG1lcmdlZFJvd1tjb25maWcudW5pcXVlUm93S2V5XTtcblx0XHR9KTtcblxuXHRcdGlmICh0eXBlb2Ygb3JpZ2luYWxSb3cgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHNlcGFyYXRlZERzLnB1c2gob3JpZ2luYWxSb3cpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHNlcGFyYXRlZERzO1xufVxuXG5mdW5jdGlvbiBzdG9yZVVwZGF0ZWRDZWxsVmFsdWUoY29uZmlnLCBjZWxsRGF0YSkge1xuXHR2YXIgdW5pcXVlUm93S2V5ID0gY29uZmlnLmRhdGFTb3VyY2VbY2VsbERhdGEucm93TnVtYmVyXVtjb25maWcudW5pcXVlUm93S2V5XTtcblxuXHRpZiAodHlwZW9mIGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XSA9PSAndW5kZWZpbmVkJykge1xuXHRcdGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XSA9IHt9O1xuXHR9XG5cblx0Y29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldW2NlbGxEYXRhLmtleV0gPSBjZWxsRGF0YS5lZGl0ZWRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gcGVyc2lzdFJvd1ZhbHVlcyhjb25maWcsIHJvdykge1xuXHR2YXIgdW5pcXVlUm93S2V5ID0gcm93W2NvbmZpZy51bmlxdWVSb3dLZXldO1xuXG5cdGlmICh0eXBlb2YgY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0T2JqZWN0LmtleXMoY29uZmlnLmlubmVyLmVkaXRlZFZhbHVlc1t1bmlxdWVSb3dLZXldKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0cm93W2tleV0gPSBjb25maWcuaW5uZXIuZWRpdGVkVmFsdWVzW3VuaXF1ZVJvd0tleV1ba2V5XTtcblx0XHR9KTtcblxuXHRcdGNvbmZpZy5pbm5lci5lZGl0ZWRWYWx1ZXNbdW5pcXVlUm93S2V5XSA9IHt9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBlcnNpc3RCYXRjaFZhbHVlcyhjb25maWcpIHtcblx0Y29uZmlnLmRhdGFTb3VyY2UuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcblx0XHRwZXJzaXN0Um93VmFsdWVzKGNvbmZpZywgcm93KTtcblx0fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRnZXRDZWxsRGF0YTogZ2V0Q2VsbERhdGEsXG5cdGdldEZpeGVkQ2VsbERhdGE6IGdldEZpeGVkQ2VsbERhdGEsXG5cdG1lcmdlRWRpdGVkVmFsdWVzSW5Sb3c6IG1lcmdlRWRpdGVkVmFsdWVzSW5Sb3csXG5cdG1lcmdlRWRpdGVkVmFsdWVzSW5EYXRhU291cmNlOiBtZXJnZUVkaXRlZFZhbHVlc0luRGF0YVNvdXJjZSxcblx0c2VwYXJhdGVWYWx1ZXNJbkRhdGFTb3VyY2U6IHNlcGFyYXRlVmFsdWVzSW5EYXRhU291cmNlLFxuXHRzdG9yZVVwZGF0ZWRDZWxsVmFsdWU6IHN0b3JlVXBkYXRlZENlbGxWYWx1ZSxcblx0cGVyc2lzdFJvd1ZhbHVlczogcGVyc2lzdFJvd1ZhbHVlcyxcblx0cGVyc2lzdEJhdGNoVmFsdWVzOiBwZXJzaXN0QmF0Y2hWYWx1ZXNcbn07IiwiIWZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKCk6dC5DbGFzcz1lKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KCl7fXZhciBlPVwiY29uc3RydWN0b3JcIixvPVwiZXh0ZW5kXCI7cmV0dXJuIHRbb109ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbigpe2lbZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBpPU9iamVjdC5jcmVhdGUodGhpcy5wcm90b3R5cGUpO3JldHVybiB0LmNhbGwoaSx0aGlzLnByb3RvdHlwZSksbi5wcm90b3R5cGU9aSxuW29dPXRoaXNbb10sbn0sdH0pOyJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKaGNIQXZZbkp2ZDNObGNpNXFjeUlzSW1Gd2NDOWpiMjVtYVdkekwyUmxabUYxYkhSekwzUnZiMngwYVhBdWFuTWlMQ0poY0hBdlkyOXVabWxuY3k5bmJHOWlZV3d1YW5NaUxDSmhjSEF2Wld4bGJXVnVkSE12WTJWc2JDNXFjeUlzSW1Gd2NDOWxiR1Z0Wlc1MGN5OW1hV3gwWlhJdWFuTWlMQ0poY0hBdlpXeGxiV1Z1ZEhNdmFXNXdkWFF1YW5NaUxDSmhjSEF2Ylc5a1pXeHpMMkpoYzJVdWFuTWlMQ0poY0hBdmJXOWtaV3h6TDJSaGRHRXZZMlZzYkM1cWN5SXNJbUZ3Y0M5dGIyUmxiSE12WlhabGJuUXRZWEpuZFcxbGJuUnpMMkZtZEdWeUxXVmthWFF1YW5NaUxDSmhjSEF2Ylc5a1pXeHpMMlYyWlc1MExXRnlaM1Z0Wlc1MGN5OWhablJsY2kxellYWmxMbXB6SWl3aVlYQndMMjF2WkdWc2N5OWxkbVZ1ZEMxaGNtZDFiV1Z1ZEhNdlltVm1iM0psTFdWa2FYUXVhbk1pTENKaGNIQXZiVzlrWld4ekwyVjJaVzUwTFdGeVozVnRaVzUwY3k5aVpXWnZjbVV0YzJGMlpTNXFjeUlzSW1Gd2NDOXRiMlJsYkhNdlpYWmxiblF0WVhKbmRXMWxiblJ6TDNOaGRtVXRjbTkzTG1weklpd2lZWEJ3TDIxdlpHVnNjeTlsZG1WdWRDMWhjbWQxYldWdWRITXZkbUZzYVdSaGRHbHZiaTVxY3lJc0ltRndjQzl0YjJSbGJITXZiVzlrZFd4bEwzWnBjblIxWVd3dFpHRjBZUzFuY21sa0xtcHpJaXdpWVhCd0wyMXZaSFZzWlhNdlpXUnBkQzVxY3lJc0ltRndjQzl0YjJSMWJHVnpMMlYyWlc1MGN5NXFjeUlzSW1Gd2NDOXRiMlIxYkdWekwyWnBiSFJsY2k1cWN5SXNJbUZ3Y0M5dGIyUjFiR1Z6TDJkbGJtVnlZWFJ2Y2k1cWN5SXNJbUZ3Y0M5dGIyUjFiR1Z6TDNOdmNuUXVhbk1pTENKaGNIQXZiVzlrZFd4bGN5OTBZV0pzWlM1cWN5SXNJbUZ3Y0M5dGIyUjFiR1Z6TDNSdmIyeDBhWEF1YW5NaUxDSmhjSEF2Ylc5a2RXeGxjeTkyWVd4cFpHRjBhVzl1TG1weklpd2lZWEJ3TDNCdmJHeDVabWxzYkhNdlFYSnlZWGt1Wm1sdVpDNXFjeUlzSW1Gd2NDOXdiMnhzZVdacGJHeHpMMFZzWlcxbGJuUXViV0YwWTJobGN5NXFjeUlzSW1Gd2NDOXdiMnhzZVdacGJHeHpMMFZzWlcxbGJuUXVjbVZ0YjNabExtcHpJaXdpWVhCd0wzQnZiR3g1Wm1sc2JITXZUbTlrWlV4cGMzUXVabTl5UldGamFDNXFjeUlzSW1Gd2NDOXdiMnhzZVdacGJHeHpMMDlpYW1WamRDNWhjM05wWjI0dWFuTWlMQ0poY0hBdmRYUnBiSE12WTI5dVptbG5kWEpoZEdsdmJpNXFjeUlzSW1Gd2NDOTFkR2xzY3k5a1lYUmhMbXB6SWl3aVlYQndMM1YwYVd4ekwyUnZiUzVxY3lJc0ltRndjQzkxZEdsc2N5OXJaWGxpYjJGeVpDNXFjeUlzSW1Gd2NDOTFkR2xzY3k5MFlXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYkdGemN5MHlOVFl1YW5NdlpHbHpkQzlqYkdGemN5NTFiV1F1YldsdUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9SVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnVWMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETjBaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4wUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJwQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZEVSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJ4Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkROMHRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1pQUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BJUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU53VWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1JOUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRha1ZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU01UkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTTNRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM0JNUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRMME5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5vU2tFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzBwSWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1eVpYRjFhWEpsS0NjdUwzQnZiR3g1Wm1sc2JITXZRWEp5WVhrdVptbHVaQzVxY3ljcE8zSmxjWFZwY21Vb0p5NHZjRzlzYkhsbWFXeHNjeTlGYkdWdFpXNTBMbTFoZEdOb1pYTXVhbk1uS1R0eVpYRjFhWEpsS0NjdUwzQnZiR3g1Wm1sc2JITXZSV3hsYldWdWRDNXlaVzF2ZG1VdWFuTW5LVHR5WlhGMWFYSmxLQ2N1TDNCdmJHeDVabWxzYkhNdlRtOWtaVXhwYzNRdVptOXlSV0ZqYUM1cWN5Y3BPM0psY1hWcGNtVW9KeTR2Y0c5c2JIbG1hV3hzY3k5UFltcGxZM1F1WVhOemFXZHVMbXB6SnlrN1hHNWNiblpoY2lCV2FYSjBkV0ZzUkdGMFlVZHlhV1FnUFNCeVpYRjFhWEpsS0NjdUwyMXZaR1ZzY3k5dGIyUjFiR1V2ZG1seWRIVmhiQzFrWVhSaExXZHlhV1FuS1R0Y2JseHVkMmx1Wkc5M0xsWnBjblIxWVd4RVlYUmhSM0pwWkNBOUlGWnBjblIxWVd4RVlYUmhSM0pwWkRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtWjFibU4wYVc5dUlHbHVkbTlyWlVadUtHNWhiV1VzSUhCaGNtRnRNU3dnY0dGeVlXMHlLU0I3WEc1Y2RHbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0xuUnNhWFJsSUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RGeDBjbVYwZFhKdU8xeHVYSFI5WEc1Y2JseDBkMmx1Wkc5M0xuUnNhWFJsVzI1aGJXVmRLSEJoY21GdE1Td2djR0Z5WVcweUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBUM0pwWlc1MFlYUnBiMjVDZVZCdmMybDBhVzl1S0dWc1pXMWxiblFwSUh0Y2JseDBkbUZ5SUhkcGJtUnZkMGhsYVdkb2RDQTlJSGRwYm1SdmR5NXBibTVsY2tobGFXZG9kQ3hjYmx4MFhIUmpaVzUwWlhKSVpXbG5hSFFnUFNCM2FXNWtiM2RJWldsbmFIUWdMeUF5TEZ4dVhIUmNkSEJ2YzJsMGFXOXVJRDBnWld4bGJXVnVkQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNibHh1WEhSeVpYUjFjbTRnWTJWdWRHVnlTR1ZwWjJoMElEd2djRzl6YVhScGIyNHVkRzl3SUQ4Z0ozTW5JRG9nSjI0bk8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCemFHOTNLRzl3ZEdsdmJuTXBJSHRjYmx4MGMzZHBkR05vSUNodmNIUnBiMjV6TG5SNWNHVXBJSHRjYmx4MFhIUmpZWE5sSUNkcGJtWnZKenBjYmx4MFhIUmNkSE5vYjNkSmJtWnZLRzl3ZEdsdmJuTXBPMXh1WEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWTJGelpTQW5kMkZ5YmljNlhHNWNkRngwWEhSemFHOTNWMkZ5YmlodmNIUnBiMjV6S1R0Y2JseDBYSFJjZEdKeVpXRnJPMXh1WEhSY2RHTmhjMlVnSjJWeWNtOXlKenBjYmx4MFhIUmNkSE5vYjNkRmNuSnZjaWh2Y0hScGIyNXpLVHRjYmx4MFhIUmNkR0p5WldGck8xeHVYSFJjZEdSbFptRjFiSFE2WEc1Y2RGeDBYSFJ6YUc5M1NXNW1ieWh2Y0hScGIyNXpLVHRjYmx4MFhIUmNkR0p5WldGck8xeHVYSFI5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2hwWkdVb1pXeGxiV1Z1ZENrZ2UxeHVYSFJwYm5admEyVkdiaWduYUdsa1pTY3NJR1ZzWlcxbGJuUXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9hV1JsUVd4c0tDa2dlMXh1WEhSa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdWRHeHBkR1VuS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dWc0tTQjdYRzVjZEZ4MGFHbGtaU2hsYkM1d1lYSmxiblJPYjJSbEtUdGNibHgwZlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhOb2IzZEpibVp2S0c5d2RHbHZibk1wSUh0Y2JseDBhVzUyYjJ0bFJtNG9KM05vYjNjbkxDQnZjSFJwYjI1ekxtVnNaVzFsYm5Rc0lIc2daM0poZGpvZ1oyVjBUM0pwWlc1MFlYUnBiMjVDZVZCdmMybDBhVzl1S0c5d2RHbHZibk11Wld4bGJXVnVkQ2tnZlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhOb2IzZFhZWEp1S0c5d2RHbHZibk1wSUh0Y2JseDBhVzUyYjJ0bFJtNG9KM05vYjNjbkxDQnZjSFJwYjI1ekxtVnNaVzFsYm5RcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCemFHOTNSWEp5YjNJb2IzQjBhVzl1Y3lrZ2UxeHVYSFJwYm5admEyVkdiaWduYzJodmR5Y3NJRzl3ZEdsdmJuTXVaV3hsYldWdWRDazdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVYSFJ6YUc5M09pQnphRzkzTEZ4dVhIUm9hV1JsT2lCb2FXUmxMRnh1WEhSb2FXUmxRV3hzT2lCb2FXUmxRV3hzTEZ4dVhIUnphRzkzU1c1bWJ6b2djMmh2ZDBsdVptOHNYRzVjZEhOb2IzZFhZWEp1T2lCemFHOTNWMkZ5Yml4Y2JseDBjMmh2ZDBWeWNtOXlPaUJ6YUc5M1JYSnliM0pjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnWTI5dVptbG5WWFJwYkNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNjeTlqYjI1bWFXZDFjbUYwYVc5dUp5a3NYRzVjZEdSaGRHRlZkR2xzSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE12WkdGMFlTY3BMRnh1WEhSMGIyOXNkR2x3UkdWbVlYVnNkQ0E5SUhKbGNYVnBjbVVvSnk0dUwyTnZibVpwWjNNdlpHVm1ZWFZzZEhNdmRHOXZiSFJwY0NjcE8xeHVYRzUyWVhJZ1JFVkdRVlZNVkZNZ1BTQjdYRzVjZEhObGJHVmpkRzl5Y3pvZ2UxeHVYSFJjZEcxaGFXNURiMjUwWVdsdVpYSTZJQ2N1YldGcGJpMWpiMjUwWVdsdVpYSW5MRnh1WEc1Y2RGeDBabWw0WldSRGIyNTBZV2x1WlhJNklDZG1hWGhsWkMxamIyNTBZV2x1WlhJbkxGeHVYSFJjZEdacGVHVmtTR1ZoWkdWeVEyOXVkR0ZwYm1WeU9pQW5abWw0WldRdGFHVmhaR1Z5TFdOdmJuUmhhVzVsY2ljc1hHNWNkRngwWkdGMFlVTnZiblJoYVc1bGNqb2dKMlJoZEdFdFkyOXVkR0ZwYm1WeUp5eGNibHgwWEhSa1lYUmhTR1ZoWkdWeVEyOXVkR0ZwYm1WeU9pQW5aR0YwWVMxb1pXRmtaWEl0WTI5dWRHRnBibVZ5Snl4Y2JseHVYSFJjZEdacGVHVmtWR0ZpYkdVNklDZG1hWGhsWkMxMFlXSnNaU2NzWEc1Y2RGeDBabWw0WldSSVpXRmtaWEpVWVdKc1pUb2dKMlpwZUdWa0xXaGxZV1JsY2kxMFlXSnNaU2NzWEc1Y2RGeDBaR0YwWVZSaFlteGxPaUFuWkdGMFlTMTBZV0pzWlNjc1hHNWNkRngwWkdGMFlVaGxZV1JsY2xSaFlteGxPaUFuWkdGMFlTMW9aV0ZrWlhJdGRHRmliR1VuTEZ4dVhHNWNkRngwWldScGRHbHVaME5sYkd3NklDZGxaR2wwYVc1bkxXTmxiR3duTEZ4dVhIUmNkR1ZrYVhSbFpFTmxiR3c2SUNkbFpHbDBaV1F0WTJWc2JDY3NYRzVjZEZ4MGMyRjJaVUoxZEhSdmJqb2diblZzYkZ4dVhIUjlMRnh1WEhSa2FXMWxibk5wYjI1ek9pQjdYRzVjZEZ4MFkyVnNiRmRwWkhSb09pQXhOVEFzWEc1Y2RGeDBZMlZzYkVobGFXZG9kRG9nTlRBc1hHNWNkRngwWTJWc2JGQmhaR1JwYm1kV1pYSjBhV05oYkRvZ05DeGNibHgwWEhSalpXeHNVR0ZrWkdsdVowaHZjbWw2YjI1MFlXdzZJRGdzWEc1Y2RGeDBZMlZzYkVKdmNtUmxjbGRwWkhSb09pQXhMRnh1WEhSY2RHTnZiblJoYVc1bGNraGxhV2RvZERvZ1kyOXVabWxuVlhScGJDNW5aWFJFWldaaGRXeDBRMjl1ZEdGcGJtVnlTR1ZwWjJoMExGeHVYSFJjZEd4dlkydERaV3hzU0dWcFoyaDBPaUJtWVd4elpWeHVYSFI5TEZ4dVhIUmxaR2wwT2lCN1hHNWNkRngwWlc1aFlteGxaRG9nWm1Gc2MyVXNYRzVjZEZ4MGJXOWtaVG9nSjJKaGRHTm9KeXhjYmx4MFhIUjJZV3hwWkdGMFpUb2dabUZzYzJWY2JseDBmU3hjYmx4MFptbHNkR1Z5T2lCN1hHNWNkRngwWlc1aFlteGxaRG9nWm1Gc2MyVXNYRzVjZEZ4MFkzVnpkRzl0Um1sc2RHVnlPaUJ1ZFd4c1hHNWNkSDBzWEc1Y2RITnZjblE2SUh0Y2JseDBYSFJsYm1GaWJHVmtPaUJtWVd4elpTeGNibHgwWEhSa1pXWmhkV3gwT2lCamIyNW1hV2RWZEdsc0xtZGxkRk52Y25SRVpXWmhkV3gwTEZ4dVhIUmNkR04xYzNSdmJWTnZjblE2SUc1MWJHeGNibHgwZlN4Y2JseDBaWFpsYm5SSVlXNWtiR1Z5Y3pvZ2UxeHVYSFJjZEc5dVFtVm1iM0psUldScGREb2dZMjl1Wm1sblZYUnBiQzV1YVd3c1hHNWNkRngwYjI1V1lXeHBaR0YwYVc5dU9pQmpiMjVtYVdkVmRHbHNMbTVwYkN4Y2JseDBYSFJ2YmtGbWRHVnlSV1JwZERvZ1kyOXVabWxuVlhScGJDNXVhV3dzWEc1Y2RGeDBiMjVDWldadmNtVlRZWFpsT2lCamIyNW1hV2RWZEdsc0xtNXBiQ3hjYmx4MFhIUnZibE5oZG1WU2IzYzZJR052Ym1acFoxVjBhV3d1Ym1sc0xGeHVYSFJjZEc5dVUyRjJaVUpoZEdOb09pQmpiMjVtYVdkVmRHbHNMbTVwYkN4Y2JseDBYSFJ2YmtGbWRHVnlVMkYyWlRvZ1kyOXVabWxuVlhScGJDNXVhV3hjYmx4MGZTeGNibHgwYkc5allXeGxPaUI3WEc1Y2RGeDBibUZ0WlRvZ0oyVnVKMXh1WEhSOUxGeHVYSFJrWVhSaFUyOTFjbU5sT2lCYklGMHNYRzVjZEdobFlXUmxjbk02SUZzZ1d5QmRJRjBzWEc1Y2RHWnBlR1ZrU0dWaFpHVnljem9nV3lCYklGMGdYU3hjYmx4MGRXNXBjWFZsVW05M1MyVjVPaUFuWDE5MWJtbHhkV1ZTYjNkTFpYa25MRnh1WEhSaGRYUnZVbVZ6YVhwbE9pQjBjblZsTEZ4dVhIUmtaV0oxWnpvZ1ptRnNjMlVzWEc1Y2RIVnVhWEYxWlVsa09pQXdMRnh1WEhSdGIyUjFiR1Z6T2lCN1hHNWNkRngwZEc5dmJIUnBjRG9nZTF4dVhIUmNkRngwWlc1aFlteGxaRG9nZEhKMVpTeGNibHgwWEhSY2RITm9iM2M2SUdOdmJtWnBaMVYwYVd3dWQzSmhjSEJsY2loMGIyOXNkR2x3UkdWbVlYVnNkQzV6YUc5M0tTeGNibHgwWEhSY2RHaHBaR1U2SUdOdmJtWnBaMVYwYVd3dWQzSmhjSEJsY2loMGIyOXNkR2x3UkdWbVlYVnNkQzVvYVdSbEtTeGNibHgwWEhSY2RHaHBaR1ZCYkd3NklHTnZibVpwWjFWMGFXd3VkM0poY0hCbGNpaDBiMjlzZEdsd1JHVm1ZWFZzZEM1b2FXUmxRV3hzS1N4Y2JseDBYSFJjZEhOb2IzZEpibVp2T2lCamIyNW1hV2RWZEdsc0xuZHlZWEJ3WlhJb2RHOXZiSFJwY0VSbFptRjFiSFF1YzJodmQwbHVabThwTEZ4dVhIUmNkRngwYzJodmQxZGhjbTQ2SUdOdmJtWnBaMVYwYVd3dWQzSmhjSEJsY2loMGIyOXNkR2x3UkdWbVlYVnNkQzV6YUc5M1YyRnliaWtzWEc1Y2RGeDBYSFJ6YUc5M1JYSnliM0k2SUdOdmJtWnBaMVYwYVd3dWQzSmhjSEJsY2loMGIyOXNkR2x3UkdWbVlYVnNkQzV6YUc5M1JYSnliM0lwWEc1Y2RGeDBmVnh1WEhSOUxGeHVYSFJwYm01bGNqb2dlMzFjYm4wN1hHNWNiblpoY2lCSVJVRkVSVkpmUkVWR1FWVk1WRk1nUFNCN1hHNWNkR1JoZEdGVWVYQmxPaUFuZEdWNGRDY3NYRzVjZEdacGJIUmxjbFI1Y0dVNklDZGxjWFZoYkhNbkxGeHVYSFJtYVd4MFpYSkVhWE5oWW14bFpEb2dabUZzYzJVc1hHNWNkSE52Y25SRWFYTmhZbXhsWkRvZ1ptRnNjMlVzWEc1Y2RIWmhiR2xrWVhSdmNrOWlhbVZqZERvZ2UzMHNYRzVjZEdOMWMzUnZiVlpoYkdsa1lYUnZjam9nYm5Wc2JGeHVmVHRjYmx4dWRtRnlJRk5VUVZSSlExOUpUazVGVWw5QlZGUlNVeUE5SUh0Y2JseDBjMlZzWldOMGIzSnpPaUI3WEc1Y2RGeDBkVzVwY1hWbFNXUlFjbVZtYVhnNklDZDJhWEowZFdGc0xXUmhkR0V0WjNKcFpDMG5MRnh1WEhSY2RHaGxZV1JsY2xKdmR6b2dKMmhsWVdSbGNpMXliM2NuTEZ4dVhIUmNkR2hsWVdSbGNrTmxiR3c2SUNkb1pXRmtaWEl0WTJWc2JDY3NYRzVjZEZ4MFluVm1abVZ5U0dWaFpHVnlRMlZzYkRvZ0oySjFabVpsY2kxb1pXRmtaWEl0WTJWc2JDY3NYRzVjZEZ4MGMyOXlkRU5sYkd3NklDZHpiM0owTFdObGJHd25MRnh1WEhSY2RITnZjblJKWTI5dU9pQW5jMjl5ZEMxcFkyOXVKeXhjYmx4MFhIUnpiM0owUkdsellXSnNaV1E2SUNkemIzSjBMV1JwYzJGaWJHVmtKeXhjYmx4MFhIUm1hV3gwWlhKU2IzYzZJQ2RtYVd4MFpYSXRjbTkzSnl4Y2JseDBYSFJtYVd4MFpYSkRaV3hzT2lBblptbHNkR1Z5TFdObGJHd25MRnh1WEhSY2RHWnBiSFJsY2tScGMyRmliR1ZrT2lBblptbHNkR1Z5TFdScGMyRmliR1ZrSnl4Y2JseDBYSFJtYVd4MFpYSkRiMjUwWVdsdVpYSTZJQ2RtYVd4MFpYSXRZMjl1ZEdGcGJtVnlKeXhjYmx4MFhIUm1hV3gwWlhKVFpXRnlZMmhKWTI5dU9pQW5abWxzZEdWeUxYTmxZWEpqYUMxcFkyOXVKeXhjYmx4MFhIUm1hV3gwWlhKRGJHVmhja2xqYjI0NklDZG1hV3gwWlhJdFkyeGxZWEl0YVdOdmJpY3NYRzVjZEZ4MFptbHNkR1Z5WldSUGRYUlNiM2M2SUNkbWFXeDBaWEpsWkMxdmRYUW5MRnh1WEhSY2RHUmhkR0ZTYjNjNklDZGtZWFJoTFhKdmR5Y3NYRzVjZEZ4MFpHRjBZVU5sYkd3NklDZGtZWFJoTFdObGJHd25MRnh1WEhSY2RHTmxiR3hFWVhSaFEyOXVkR0ZwYm1WeU9pQW5ZMlZzYkMxa1lYUmhMV052Ym5SaGFXNWxjaWNzWEc1Y2RGeDBiM1psY21ac2IzZGxaRU5sYkd3NklDZHZkbVZ5Wm14dmQyVmtMV05sYkd3blhHNWNkSDBzWEc1Y2RHUnBiV1Z1YzJsdmJuTTZJSHQ5TEZ4dVhIUnBZMjl1Y3pvZ2UxeHVYSFJjZEhOdmNuUTZJSHRjYmx4MFhIUmNkR0Z6WXpvZ0oyWmhJR1poTFdGeWNtOTNMV1J2ZDI0bkxGeHVYSFJjZEZ4MFpHVnpZem9nSjJaaElHWmhMV0Z5Y205M0xYVndKMXh1WEhSY2RIMHNYRzVjZEZ4MFptbHNkR1Z5T2lCN1hHNWNkRngwWEhSelpXRnlZMmc2SUNkbVlTQm1ZUzF6WldGeVkyZ25MRnh1WEhSY2RGeDBZMnhsWVhJNklDZG1ZU0JtWVMxMGFXMWxjeWRjYmx4MFhIUjlYRzVjZEgwc1hHNWNkR1ZrYVhSbFpGWmhiSFZsY3pvZ2V5QjlMRnh1WEhSemIzSjBPaUI3SUgwc1hHNWNkR1pwYkhSbGNuTTZJSHNnZlN4Y2JseDBiV2x1UW5WbVptVnlWMmxrZEdnNklESXNYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnBibWwwS0dOdmJtWnBaeXdnYjNCMGFXOXVjeWtnZTF4dVhIUnBibWwwUTI5dVptbG5UMkpxWldOMEtHTnZibVpwWnlrN1hHNWNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBbmMyVnNaV04wYjNKekxtMWhhVzVEYjI1MFlXbHVaWEluS1R0Y2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYzJWc1pXTjBiM0p6TG1acGVHVmtRMjl1ZEdGcGJtVnlKeWs3WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKM05sYkdWamRHOXljeTVtYVhobFpFaGxZV1JsY2tOdmJuUmhhVzVsY2ljcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkelpXeGxZM1J2Y25NdVptbDRaV1JVWVdKc1pTY3BPMXh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHpaV3hsWTNSdmNuTXVabWw0WldSSVpXRmtaWEpVWVdKc1pTY3BPMXh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHpaV3hsWTNSdmNuTXVaR0YwWVVOdmJuUmhhVzVsY2ljcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkelpXeGxZM1J2Y25NdVpHRjBZVWhsWVdSbGNrTnZiblJoYVc1bGNpY3BPMXh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHpaV3hsWTNSdmNuTXVaR0YwWVZSaFlteGxKeWs3WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKM05sYkdWamRHOXljeTVrWVhSaFNHVmhaR1Z5VkdGaWJHVW5LVHRjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5jMlZzWldOMGIzSnpMbVZrYVhScGJtZERaV3hzSnlrN1hHNWNkSFZ3WkdGMFpWWmhiSFZsS0dOdmJtWnBaeXdnYjNCMGFXOXVjeXdnSjNObGJHVmpkRzl5Y3k1bFpHbDBaV1JEWld4c0p5azdYRzVjZEhWd1pHRjBaVlpoYkhWbEtHTnZibVpwWnl3Z2IzQjBhVzl1Y3l3Z0ozTmxiR1ZqZEc5eWN5NXpZWFpsUW5WMGRHOXVKeWs3WEc1Y2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuZFc1cGNYVmxTV1FuS1R0Y2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYUdWaFpHVnljeWNwTzF4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2RzYjJOaGJHVXVibUZ0WlNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNka1lYUmhVMjkxY21ObEp5azdYRzVjZEhWd1pHRjBaVlpoYkhWbEtHTnZibVpwWnl3Z2IzQjBhVzl1Y3l3Z0oyWnBlR1ZrU0dWaFpHVnljeWNwTzF4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2QxYm1seGRXVlNiM2RMWlhrbktUdGNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBbllYVjBiMUpsYzJsNlpTY3BPMXh1WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKMlZrYVhRdVpXNWhZbXhsWkNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkbFpHbDBMbTF2WkdVbktUdGNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpXUnBkQzUyWVd4cFpHRjBaU2NwTzF4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2RtYVd4MFpYSXVaVzVoWW14bFpDY3BPMXh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZG1hV3gwWlhJdVkzVnpkRzl0Um1sc2RHVnlKeWs3WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKM052Y25RdVpXNWhZbXhsWkNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkemIzSjBMbVJsWm1GMWJIUW5LVHRjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5jMjl5ZEM1amRYTjBiMjFUYjNKMEp5azdYRzVjZEhWd1pHRjBaVlpoYkhWbEtHTnZibVpwWnl3Z2IzQjBhVzl1Y3l3Z0oyUmxZblZuSnlrN1hHNWNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpHbHRaVzV6YVc5dWN5NWpaV3hzVjJsa2RHZ25LVHRjYmx4MGRYQmtZWFJsVm1Gc2RXVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxDQW5aR2x0Wlc1emFXOXVjeTVqWld4c1NHVnBaMmgwSnlrN1hHNWNkSFZ3WkdGMFpWWmhiSFZsS0dOdmJtWnBaeXdnYjNCMGFXOXVjeXdnSjJScGJXVnVjMmx2Ym5NdVkyVnNiRkJoWkdScGJtZFdaWEowYVdOaGJDY3BPMXh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZGthVzFsYm5OcGIyNXpMbU5sYkd4UVlXUmthVzVuU0c5eWFYcHZiblJoYkNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNka2FXMWxibk5wYjI1ekxtTmxiR3hDYjNKa1pYSlhhV1IwYUNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNka2FXMWxibk5wYjI1ekxtTnZiblJoYVc1bGNraGxhV2RvZENjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNka2FXMWxibk5wYjI1ekxteHZZMnREWld4c1NHVnBaMmgwSnlrN1hHNWNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpYWmxiblJJWVc1a2JHVnljeTV2YmtKbFptOXlaVVZrYVhRbktUdGNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpYWmxiblJJWVc1a2JHVnljeTV2YmxaaGJHbGtZWFJwYjI0bktUdGNibHgwZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTENCdmNIUnBiMjV6TENBblpYWmxiblJJWVc1a2JHVnljeTV2YmtGbWRHVnlSV1JwZENjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkbGRtVnVkRWhoYm1Sc1pYSnpMbTl1UW1WbWIzSmxVMkYyWlNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkbGRtVnVkRWhoYm1Sc1pYSnpMbTl1VTJGMlpWSnZkeWNwTzF4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2RsZG1WdWRFaGhibVJzWlhKekxtOXVVMkYyWlVKaGRHTm9KeWs3WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKMlYyWlc1MFNHRnVaR3hsY25NdWIyNUJablJsY2xOaGRtVW5LVHRjYmx4dVhIUXZMeUJVYjI5c2RHbHdJRzF2WkhWc1pWeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkdGIyUjFiR1Z6TG5SdmIyeDBhWEF1Wlc1aFlteGxaQ2NwTzF4dVhIUjFjR1JoZEdWV1lXeDFaU2hqYjI1bWFXY3NJRzl3ZEdsdmJuTXNJQ2R0YjJSMWJHVnpMblJ2YjJ4MGFYQXVjMmh2ZHljcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkdGIyUjFiR1Z6TG5SdmIyeDBhWEF1YUdsa1pTY3BPMXh1WEhSMWNHUmhkR1ZXWVd4MVpTaGpiMjVtYVdjc0lHOXdkR2x2Ym5Nc0lDZHRiMlIxYkdWekxuUnZiMngwYVhBdWFHbGtaVUZzYkNjcE8xeHVYSFIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUNkdGIyUjFiR1Z6TG5SdmIyeDBhWEF1YzJodmQwbHVabThuS1R0Y2JseDBkWEJrWVhSbFZtRnNkV1VvWTI5dVptbG5MQ0J2Y0hScGIyNXpMQ0FuYlc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNkWFlYSnVKeWs3WEc1Y2RIVndaR0YwWlZaaGJIVmxLR052Ym1acFp5d2diM0IwYVc5dWN5d2dKMjF2WkhWc1pYTXVkRzl2YkhScGNDNXphRzkzUlhKeWIzSW5LVHRjYmx4dVhIUmpZV3hqZFd4aGRHVlZibWx4ZFdWSlpGTmxiR1ZqZEc5eUtHTnZibVpwWnlrN1hHNWNibHgwYVc1cGRFaGxZV1JsY2tSaGRHRW9ZMjl1Wm1sbktUdGNibHgwYVc1cGRFUmhkR0ZUYjNWeVkyVW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2s3WEc1Y2RHbHVhWFJEWVd4amRXeGhkR1ZrVm1Gc2RXVnpLR052Ym1acFp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJEYjI1bWFXZFBZbXBsWTNRb1kyOXVabWxuS1NCN1hHNWNkR052Ym1acFp5NXpaV3hsWTNSdmNuTWdQU0I3ZlR0Y2JseDBZMjl1Wm1sbkxtVjJaVzUwU0dGdVpHeGxjbk1nUFNCN2ZUdGNibHgwWTI5dVptbG5MbXh2WTJGc1pTQTlJSHQ5TzF4dVhIUmpiMjVtYVdjdWFXNXVaWElnUFNCa1lYUmhWWFJwYkM1amJHOXVaVTlpYW1WamRDaFRWRUZVU1VOZlNVNU9SVkpmUVZSVVVsTXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpZV3hqZFd4aGRHVlZibWx4ZFdWSlpGTmxiR1ZqZEc5eUtHTnZibVpwWnlrZ2UxeHVYSFJqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxuVnVhWEYxWlVsa0lEMGdZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1MWJtbHhkV1ZKWkZCeVpXWnBlQ0FySUdOdmJtWnBaeTUxYm1seGRXVkpaRHRjYm4xY2JseHVablZ1WTNScGIyNGdhVzVwZEVOaGJHTjFiR0YwWldSV1lXeDFaWE1vWTI5dVptbG5LU0I3WEc1Y2RDOHZJRUZ1Ym1GcklHRWdhR1ZoWkdWeUlITnZjbTVoYXlCaGVpQnBibVJsZUdVc0lHRnRhU0JoSUdObGJHeGhJR3QxYkdOemIydGhkQ0JwY3lCdFpXZG9ZWFREb1hKdmVucGhMaUJOYVhabGJDQmxlaUJ0YVc1a2FXY2dZWG9nZFhSdmJIUERzeUJzWlhONkxDQmxlc09wY25RZ1ZFOUVUem9nUzJsemVtVmtibWt2dzZGMFlXeGhhOE90ZEdGdWFWeHVYSFJqYjI1bWFXY3VhVzV1WlhJdWFXNWtaWGhQWmtObGJHeExaWGxJWldGa1pYSWdQU0JqYjI1bWFXZFZkR2xzTG1kbGRFbHVaR1Y0VDJaRFpXeHNTMlY1U0dWaFpHVnlLR052Ym1acFp5azdYRzVjZEdOdmJtWnBaeTVwYm01bGNpNXZjbWxuYVc1aGJFUmhkR0ZUYjNWeVkyVWdQU0JiWFM1amIyNWpZWFFvWTI5dVptbG5MbVJoZEdGVGIzVnlZMlVwTzF4dVhIUmpiMjVtYVdjdWFXNXVaWEl1WkdsdFpXNXphVzl1Y3k1elkzSnZiR3hNYVc1bFNHVnBaMmgwSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJUWTNKdmJHeE1hVzVsU0dWcFoyaDBLQ2s3WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVrYVcxbGJuTnBiMjV6TG5OamNtOXNiRkJoWjJWSVpXbG5hSFFnUFNCamIyNW1hV2RWZEdsc0xtZGxkRk5qY205c2JGQmhaMlZJWldsbmFIUW9LVHRjYm4xY2JseHVablZ1WTNScGIyNGdhVzVwZEVobFlXUmxja1JoZEdFb1kyOXVabWxuS1NCN1hHNWNkSFpoY2lCd2NtOWpaWE56WldSSVpXRmtaWEp6SUQwZ1cxMHNYRzVjZEZ4MGNISnZZMlZ6YzJWa1JtbDRaV1JJWldGa1pYSnpJRDBnVzEwN1hHNWNibHgwWTI5dVptbG5MbWhsWVdSbGNuTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaG9aV0ZrWlhKU2IzY3BJSHRjYmx4MFhIUjJZWElnYUZKdmR5QTlJRnRkTzF4dVhHNWNkRngwYUdWaFpHVnlVbTkzTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYUdWaFpHVnlRMlZzYkNrZ2UxeHVYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQm9aV0ZrWlhKRFpXeHNMbVJoZEdGVWVYQmxJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZEZ4MFhIUmNkR2hsWVdSbGNrTmxiR3d1WkdGMFlWUjVjR1VnUFNCSVJVRkVSVkpmUkVWR1FWVk1WRk11WkdGMFlWUjVjR1U3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2FHVmhaR1Z5UTJWc2JDNW1hV3gwWlhKVWVYQmxJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZEZ4MFhIUmNkR2hsWVdSbGNrTmxiR3d1Wm1sc2RHVnlWSGx3WlNBOUlFaEZRVVJGVWw5RVJVWkJWVXhVVXk1bWFXeDBaWEpVZVhCbE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR2hsWVdSbGNrTmxiR3d1Wm1sc2RHVnlSR2x6WVdKc1pXUWdQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwWEhSY2RGeDBhR1ZoWkdWeVEyVnNiQzVtYVd4MFpYSkVhWE5oWW14bFpDQTlJRWhGUVVSRlVsOUVSVVpCVlV4VVV5NW1hV3gwWlhKRWFYTmhZbXhsWkR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQm9aV0ZrWlhKRFpXeHNMbk52Y25SRWFYTmhZbXhsWkNBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUmNkRngwWEhSb1pXRmtaWEpEWld4c0xuTnZjblJFYVhOaFlteGxaQ0E5SUVoRlFVUkZVbDlFUlVaQlZVeFVVeTV6YjNKMFJHbHpZV0pzWldRN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHbG1JQ2gwZVhCbGIyWWdhR1ZoWkdWeVEyVnNiQzUyWVd4cFpHRjBiM0pQWW1wbFkzUWdQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwWEhSY2RGeDBhR1ZoWkdWeVEyVnNiQzUyWVd4cFpHRjBiM0pQWW1wbFkzUWdQU0JJUlVGRVJWSmZSRVZHUVZWTVZGTXVkbUZzYVdSaGRHOXlUMkpxWldOME8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR2hsWVdSbGNrTmxiR3d1WTNWemRHOXRWbUZzYVdSaGRHOXlJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZEZ4MFhIUmNkR2hsWVdSbGNrTmxiR3d1WTNWemRHOXRWbUZzYVdSaGRHOXlJRDBnU0VWQlJFVlNYMFJGUmtGVlRGUlRMbU4xYzNSdmJWWmhiR2xrWVhSdmNqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJvWldGa1pYSkRaV3hzTG5kcFpIUm9JRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZEZ4MFhIUmNkR2hsWVdSbGNrTmxiR3d1ZDJsa2RHZ2dQU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1YybGtkR2c3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdoU2IzY3VjSFZ6YUNob1pXRmtaWEpEWld4c0tUdGNibHh1WEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJvWldGa1pYSkRaV3hzTG1OdmJITndZVzRnSVQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUmNkRngwWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCb1pXRmtaWEpEWld4c0xtTnZiSE53WVc0N0lHa3JLeWtnZTF4dVhIUmNkRngwWEhSY2RHaFNiM2N1Y0hWemFDaDdmU2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYSFJjZEhCeWIyTmxjM05sWkVobFlXUmxjbk11Y0hWemFDaG9VbTkzS1R0Y2JseDBmU2s3WEc1Y2JseDBZMjl1Wm1sbkxtWnBlR1ZrU0dWaFpHVnljeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR2hsWVdSbGNsSnZkeWtnZTF4dVhIUmNkSFpoY2lCb1VtOTNJRDBnVzEwN1hHNWNibHgwWEhSb1pXRmtaWEpTYjNjdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymlob1pXRmtaWEpEWld4c0tTQjdYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR2hsWVdSbGNrTmxiR3d1WkdGMFlWUjVjR1VnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUmNkRngwYUdWaFpHVnlRMlZzYkM1a1lYUmhWSGx3WlNBOUlFaEZRVVJGVWw5RVJVWkJWVXhVVXk1a1lYUmhWSGx3WlR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQm9aV0ZrWlhKRFpXeHNMbVpwYkhSbGNsUjVjR1VnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUmNkRngwYUdWaFpHVnlRMlZzYkM1bWFXeDBaWEpVZVhCbElEMGdTRVZCUkVWU1gwUkZSa0ZWVEZSVExtWnBiSFJsY2xSNWNHVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR2xtSUNoMGVYQmxiMllnYUdWaFpHVnlRMlZzYkM1bWFXeDBaWEpFYVhOaFlteGxaQ0E5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhSY2RGeDBYSFJvWldGa1pYSkRaV3hzTG1acGJIUmxja1JwYzJGaWJHVmtJRDBnU0VWQlJFVlNYMFJGUmtGVlRGUlRMbVpwYkhSbGNrUnBjMkZpYkdWa08xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR2hsWVdSbGNrTmxiR3d1YzI5eWRFUnBjMkZpYkdWa0lEMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkRngwWEhSY2RHaGxZV1JsY2tObGJHd3VjMjl5ZEVScGMyRmliR1ZrSUQwZ1NFVkJSRVZTWDBSRlJrRlZURlJUTG5OdmNuUkVhWE5oWW14bFpEdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJvWldGa1pYSkRaV3hzTG5kcFpIUm9JRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZEZ4MFhIUmNkR2hsWVdSbGNrTmxiR3d1ZDJsa2RHZ2dQU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1YybGtkR2c3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdoU2IzY3VjSFZ6YUNob1pXRmtaWEpEWld4c0tUdGNibHh1WEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJvWldGa1pYSkRaV3hzTG1OdmJITndZVzRnSVQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUmNkRngwWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCb1pXRmtaWEpEWld4c0xtTnZiSE53WVc0N0lHa3JLeWtnZTF4dVhIUmNkRngwWEhSY2RHaFNiM2N1Y0hWemFDaDdmU2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYSFJjZEhCeWIyTmxjM05sWkVacGVHVmtTR1ZoWkdWeWN5NXdkWE5vS0doU2IzY3BPMXh1WEhSOUtUdGNibHh1WEhSamIyNW1hV2N1YUdWaFpHVnljeUE5SUhCeWIyTmxjM05sWkVobFlXUmxjbk03WEc1Y2RHTnZibVpwWnk1bWFYaGxaRWhsWVdSbGNuTWdQU0J3Y205alpYTnpaV1JHYVhobFpFaGxZV1JsY25NN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUkVZWFJoVTI5MWNtTmxLR052Ym1acFp5d2dkVzVwY1hWbFVtOTNTMlY1S1NCN1hHNWNkR2xtSUNoMGVYQmxiMllnZFc1cGNYVmxVbTkzUzJWNUlEMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkRngwWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCamIyNW1hV2N1WkdGMFlWTnZkWEpqWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhSY2RGeDBZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVmJhVjFiWTI5dVptbG5MblZ1YVhGMVpWSnZkMHRsZVYwZ1BTQnBPMXh1WEhSY2RIMWNibHgwZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVldZV3gxWlNoamIyNW1hV2NzSUc5d2RHbHZibk1zSUd0bGVTa2dlMXh1WEhSMllYSWdkR0Z5WjJWMElEMGdaMlYwU1c1dVpYSlBZbXBsWTNRb1kyOXVabWxuTENCclpYa3BMQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc1Y2RGeDBkbUZzZFdVZ1BTQm5aWFJKYm01bGNsWmhiSFZsS0c5d2RHbHZibk1zSUd0bGVTa3NYRzVjZEZ4MGEyVjVjeUE5SUd0bGVTNXpjR3hwZENnbkxpY3BMRnh1WEhSY2RHeGhjM1JMWlhrZ1BTQnJaWGx6VzJ0bGVYTXViR1Z1WjNSb0lDMGdNVjA3WEc1Y2JseDBhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFJjZEhSaGNtZGxkRnRzWVhOMFMyVjVYU0E5SUhSNWNHVnZaaUJuWlhSSmJtNWxjbFpoYkhWbEtFUkZSa0ZWVEZSVExDQnJaWGtwSUQwOUlDZG1kVzVqZEdsdmJpY2dQeUJuWlhSSmJtNWxjbFpoYkhWbEtFUkZSa0ZWVEZSVExDQnJaWGtwS0dOdmJtWnBaeWtnT2lCblpYUkpibTVsY2xaaGJIVmxLRVJGUmtGVlRGUlRMQ0JyWlhrcE8xeHVYSFI5SUdWc2MyVWdlMXh1WEhSY2RIUmhjbWRsZEZ0c1lYTjBTMlY1WFNBOUlIWmhiSFZsTzF4dVhIUjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRWx1Ym1WeVQySnFaV04wS0c5aWFtVmpkQ3dnYTJWNUtTQjdYRzVjZEdsbUlDaHJaWGt1YVc1a1pYaFBaaWduTGljcElEMDlQU0F0TVNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ2WW1wbFkzUTdYRzVjZEgxY2JseHVYSFIyWVhJZ2MzVmlTMlY1SUQwZ2EyVjVMbk53YkdsMEtDY3VKeWxiTUYwc1hHNWNkRngwYzNWaVQySnFaV04wSUQwZ2IySnFaV04wVzNOMVlrdGxlVjA3WEc1Y2JseDBhV1lnS0hSNWNHVnZaaUJ6ZFdKUFltcGxZM1FnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUnZZbXBsWTNSYmMzVmlTMlY1WFNBOUlIdDlPMXh1WEhSY2RITjFZazlpYW1WamRDQTlJRzlpYW1WamRGdHpkV0pMWlhsZE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlHZGxkRWx1Ym1WeVQySnFaV04wS0hOMVlrOWlhbVZqZEN3Z2EyVjVMbk4xWW5OMGNtbHVaeWhyWlhrdWFXNWtaWGhQWmlnbkxpY3BJQ3NnTVNrcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkpibTVsY2xaaGJIVmxLRzlpYW1WamRDd2dhMlY1S1NCN1hHNWNkR2xtSUNoclpYa3VhVzVrWlhoUFppZ25MaWNwSUQwOVBTQXRNU2tnZTF4dVhIUmNkSEpsZEhWeWJpQnZZbXBsWTNSYmEyVjVYVHRjYmx4MGZWeHVYRzVjZEhaaGNpQnpkV0pMWlhrZ1BTQnJaWGt1YzNCc2FYUW9KeTRuS1Zzd1hTeGNibHgwWEhSemRXSlBZbXBsWTNRZ1BTQnZZbXBsWTNSYmMzVmlTMlY1WFR0Y2JseHVYSFJwWmlBb2RIbHdaVzltSUhOMVlrOWlhbVZqZENBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUmNkSEpsZEhWeWJpQnpkV0pQWW1wbFkzUTdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdaMlYwU1c1dVpYSldZV3gxWlNoemRXSlBZbXBsWTNRc0lHdGxlUzV6ZFdKemRISnBibWNvYTJWNUxtbHVaR1Y0VDJZb0p5NG5LU0FySURFcEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNWNkR2x1YVhRNklHbHVhWFFzWEc1Y2RFUkZSa0ZWVEZSVE9pQkVSVVpCVlV4VVUxeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVJoZEdGRGIyNTBZV2x1WlhJb1kyOXVabWxuTENCalpXeHNUbTlrWlN3Z1kyVnNiRTlpYWl3Z1pHRjBZU2tnZTF4dVhIUjJZWElnWkdGMFlVTnZiblJoYVc1bGNpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dVhHNWNkR1JoZEdGRGIyNTBZV2x1WlhJdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtTmxiR3hFWVhSaFEyOXVkR0ZwYm1WeUtUdGNibHgwWkdGMFlVTnZiblJoYVc1bGNpNXpkSGxzWlM1dGFXNVhhV1IwYUNBOUlHTmxiR3hQWW1vdWQybGtkR2dnS3lBbmNIZ25PMXh1WEhSa1lYUmhRMjl1ZEdGcGJtVnlMbk4wZVd4bExuZHBaSFJvSUQwZ1kyVnNiRTlpYWk1M2FXUjBhQ0FySUNkd2VDYzdYRzVjZEdSaGRHRkRiMjUwWVdsdVpYSXVjM1I1YkdVdWNHRmtaR2x1WnlBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hRWVdSa2FXNW5WbVZ5ZEdsallXd2dLeUFuY0hnZ0p5QXJJR052Ym1acFp5NWthVzFsYm5OcGIyNXpMbU5sYkd4UVlXUmthVzVuU0c5eWFYcHZiblJoYkNBcklDZHdlQ2M3WEc1Y2JseDBhV1lnS0dOdmJtWnBaeTVrYVcxbGJuTnBiMjV6TG14dlkydERaV3hzU0dWcFoyaDBLU0I3WEc1Y2RGeDBkbUZ5SUcxaGVFaGxhV2RvZENBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hJWldsbmFIUWdMU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1FtOXlaR1Z5VjJsa2RHZ2dMU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1VHRmtaR2x1WjFabGNuUnBZMkZzSUNvZ01qdGNibHh1WEhSY2RHUmhkR0ZEYjI1MFlXbHVaWEl1YzNSNWJHVXViV0Y0U0dWcFoyaDBJRDBnYldGNFNHVnBaMmgwSUNzZ0ozQjRKenRjYmx4MGZWeHVYRzVjZEdObGJHeE9iMlJsTG1Gd2NHVnVaRU5vYVd4a0tHUmhkR0ZEYjI1MFlXbHVaWElwTzF4dVhHNWNkR2xtSUNoMGVYQmxiMllnWkdGMFlTQWhQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFJjZEhWd1pHRjBaVVJoZEdGRGIyNTBZV2x1WlhJb1kyOXVabWxuTENCalpXeHNUbTlrWlN3Z1pHRjBZU2s3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWkdGMFlVTnZiblJoYVc1bGNqdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsU0dWaFpHVnlSR0YwWVNoamIyNW1hV2NzSUdObGJHeE9iMlJsTENCalpXeHNUMkpxTENCcGMweGhjM1JTYjNjcElIdGNibHgwZG1GeUlHbHVibVZ5U0ZSTlRDQTlJQ2NuTEZ4dVhIUmNkR052YkhWdGJsUmxlSFFnUFNCalpXeHNUMkpxTG5SbGVIUWdmSHdnWTJWc2JFOWlhaTVyWlhrZ2ZId2dKeWM3WEc1Y2JseDBhV1lnS0dOdmJtWnBaeTV6YjNKMExtVnVZV0pzWldRZ0ppWWdJV05sYkd4UFltb3VjMjl5ZEVScGMyRmliR1ZrSUNZbUlHbHpUR0Z6ZEZKdmR5a2dlMXh1WEhSY2RIWmhjaUJoZEhSeWFXSjFkR1VnUFNCalpXeHNUMkpxTG10bGVTeGNibHgwWEhSY2RHUnBjbVZqZEdsdmJpQTlJSFI1Y0dWdlppQmhkSFJ5YVdKMWRHVWdJVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdZMjl1Wm1sbkxtbHVibVZ5TG5OdmNuUXVZWFIwY21saWRYUmxJRDA5UFNCaGRIUnlhV0oxZEdVZ1B5QmpiMjVtYVdjdWFXNXVaWEl1YzI5eWRDNWthWEpsWTNScGIyNGdPaUFuYm05dVpTY3NYRzVjZEZ4MFhIUnBjMU52Y25SbFpDQTlJR1JwY21WamRHbHZiaUFoUFQwZ0oyNXZibVVuTEZ4dVhIUmNkRngwYVdOdmJrTnNZWE56SUQwZ1pHbHlaV04wYVc5dUlEMDlQU0FuWkc5M2JpY2dQeUJqYjI1bWFXY3VhVzV1WlhJdWFXTnZibk11YzI5eWRDNWhjMk1nT2lCamIyNW1hV2N1YVc1dVpYSXVhV052Ym5NdWMyOXlkQzVrWlhOakxGeHVYSFJjZEZ4MGFXTnZia1ZzWlcxbGJuUkRiR0Z6Y3lBOUlHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11YzI5eWRFbGpiMjRnS3lBb2FYTlRiM0owWldRZ1B5QW5JQ2NnS3lCcFkyOXVRMnhoYzNNZ09pQW5JR2hwWkdSbGJpY3BPMXh1WEc1Y2RGeDBhVzV1WlhKSVZFMU1JQ3M5SUNjOGFTQmpiR0Z6Y3oxY0lpY2dLeUJwWTI5dVJXeGxiV1Z1ZEVOc1lYTnpJQ3NnSjF3aUlHRnlhV0V0YUdsa1pHVnVQVndpZEhKMVpWd2lQand2YVQ0bk8xeHVYRzVjZEZ4MFkyVnNiRTV2WkdVdWMyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXRjBkSEpwWW5WMFpTY3NJR0YwZEhKcFluVjBaU2s3WEc1Y2RIMWNibHh1WEhScGJtNWxja2hVVFV3Z0t6MGdZMjlzZFcxdVZHVjRkRHRjYmx4dVhIUnlaWFIxY200Z2FXNXVaWEpJVkUxTU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZHYVd4MFpYSkVZWFJoS0dOdmJtWnBaeXdnWTJWc2JFNXZaR1VzSUdObGJHeFBZbW9zSUdacGJIUmxjazlpYWlrZ2UxeHVYSFIyWVhJZ2FXNXVaWEpJVkUxTUlEMGdKeWNzWEc1Y2RGeDBhV052YmtOc1lYTnpJRDBnWTI5dVptbG5MbWx1Ym1WeUxtbGpiMjV6TG1acGJIUmxjaTV6WldGeVkyZ3NYRzVjZEZ4MGFXTnZia1ZzWlcxbGJuUkRiR0Z6Y3lBOUlHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11Wm1sc2RHVnlVMlZoY21Ob1NXTnZiaUFySUNjZ0p5QXJJR2xqYjI1RGJHRnpjeXhjYmx4MFhIUmpiR1ZoY2tsamIyNURiR0Z6Y3lBOUlHTnZibVpwWnk1cGJtNWxjaTVwWTI5dWN5NW1hV3gwWlhJdVkyeGxZWElzWEc1Y2RGeDBZMnhsWVhKSlkyOXVSV3hsYldWdWRFTnNZWE56SUQwZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVtYVd4MFpYSkRiR1ZoY2tsamIyNGdLeUFuSUNjZ0t5QmpiR1ZoY2tsamIyNURiR0Z6Y3p0Y2JseHVYSFJwWmlBb0lXTmxiR3hQWW1vdVptbHNkR1Z5UkdsellXSnNaV1FwSUh0Y2JseDBYSFJwYm01bGNraFVUVXdnS3owZ0p6eHBJR05zWVhOelBWd2lKeUFySUdsamIyNUZiR1Z0Wlc1MFEyeGhjM01nS3lBblhDSWdZWEpwWVMxb2FXUmtaVzQ5WENKMGNuVmxYQ0krUEM5cFBpYzdYRzVjZEZ4MGFXNXVaWEpJVkUxTUlDczlJR1pwYkhSbGNrOWlhaTUyWVd4MVpTQjhmQ0FuSnp0Y2JseHVYSFJjZEdsbUlDaDBlWEJsYjJZZ1ptbHNkR1Z5VDJKcUxuWmhiSFZsSUNFOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUdacGJIUmxjazlpYWk1MllXeDFaU0FoUFQwZ0p5Y3BJSHRjYmx4MFhIUmNkR2x1Ym1WeVNGUk5UQ0FyUFNBblBHa2dZMnhoYzNNOVhDSW5JQ3NnWTJ4bFlYSkpZMjl1Uld4bGJXVnVkRU5zWVhOeklDc2dKMXdpSUdGeWFXRXRhR2xrWkdWdVBWd2lkSEoxWlZ3aVBqd3ZhVDRuTzF4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJwYm01bGNraFVUVXc3WEc1OVhHNWNibVoxYm1OMGFXOXVJSFZ3WkdGMFpVUmhkR0ZEYjI1MFlXbHVaWElvWTI5dVptbG5MQ0JqWld4c1RtOWtaU3dnWkdGMFlTa2dlMXh1WEhSMllYSWdaR0YwWVVOdmJuUmhhVzVsY2lBOUlHTmxiR3hPYjJSbExuRjFaWEo1VTJWc1pXTjBiM0lvSnk0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1alpXeHNSR0YwWVVOdmJuUmhhVzVsY2lrN1hHNWNibHgwYVdZZ0tIUjVjR1Z2WmlCa1lYUmhJRDA5SUNkMWJtUmxabWx1WldRbklIeDhJR1JoZEdFZ1BUMDlJRzUxYkd3cElIdGNibHgwWEhSa1lYUmhRMjl1ZEdGcGJtVnlMbWx1Ym1WeVNGUk5UQ0E5SUNjbk8xeHVYSFJjZEdObGJHeE9iMlJsTG5ScGRHeGxJRDBnSnljN1hHNWNkSDBnWld4elpTQnBaaUFvWkdGMFlTNXViMlJsVkhsd1pTa2dleUF2THlCSlppQnBkSE1nWVc0Z1JXeGxiV1Z1ZENCdlltcGxZM1JjYmx4MFhIUmtZWFJoUTI5dWRHRnBibVZ5TG1sdWJtVnlTRlJOVENBOUlDY25PMXh1WEhSY2RHUmhkR0ZEYjI1MFlXbHVaWEl1WVhCd1pXNWtRMmhwYkdRb1pHRjBZU2s3WEc1Y2RGeDBZMlZzYkU1dlpHVXVkR2wwYkdVZ1BTQmtZWFJoTG5SbGVIUkRiMjUwWlc1ME8xeHVYSFI5SUdWc2MyVWdleUF2THlCbGJITmxJR3AxYzNRZ1lXUmtJSFJ2SUhSb1pTQmpiMjUwWVdsdVpYSnpJR2x1Ym1WeVNGUk5URnh1WEhSY2RHUmhkR0ZEYjI1MFlXbHVaWEl1YVc1dVpYSklWRTFNSUQwZ1pHRjBZVHRjYmx4MFhIUmpaV3hzVG05a1pTNTBhWFJzWlNBOUlHUmhkR0ZEYjI1MFlXbHVaWEl1ZEdWNGRFTnZiblJsYm5RN1hHNWNkSDFjYm4xY2JseHVablZ1WTNScGIyNGdkWEJrWVhSbFEyVnNiQ2hqYjI1bWFXY3NJR05sYkd4T2IyUmxMQ0JqWld4c1JHRjBZU2tnZTF4dVhIUjFjR1JoZEdWRVlYUmhRMjl1ZEdGcGJtVnlLR052Ym1acFp5d2dZMlZzYkU1dlpHVXNJR05sYkd4RVlYUmhMbWRsZEZaaGJIVmxLQ2twTzF4dVhHNWNkR05sYkd4T2IyUmxMbU5zWVhOelRtRnRaU0E5SUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVaR0YwWVVObGJHd2dLeUFuSUNjZ0t5QW9ZMlZzYkVSaGRHRXVZMnhoYzNNZ2ZId2dKeWNwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmx4MFkzSmxZWFJsUkdGMFlVTnZiblJoYVc1bGNqb2dZM0psWVhSbFJHRjBZVU52Ym5SaGFXNWxjaXhjYmx4MFkzSmxZWFJsU0dWaFpHVnlSR0YwWVRvZ1kzSmxZWFJsU0dWaFpHVnlSR0YwWVN4Y2JseDBZM0psWVhSbFJtbHNkR1Z5UkdGMFlUb2dZM0psWVhSbFJtbHNkR1Z5UkdGMFlTeGNibHgwZFhCa1lYUmxSR0YwWVVOdmJuUmhhVzVsY2pvZ2RYQmtZWFJsUkdGMFlVTnZiblJoYVc1bGNpeGNibHgwZFhCa1lYUmxRMlZzYkRvZ2RYQmtZWFJsUTJWc2JGeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQmtZWFJoVlhScGJDQTlJSEpsY1hWcGNtVW9KeTR1TDNWMGFXeHpMMlJoZEdFbktUdGNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMjl1ZEdGcGJtVnlLR052Ym1acFp5a2dlMXh1WEhSMllYSWdabWxzZEdWeVEyOXVkR0ZwYm1WeUlDQWdJQ0FnSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a3NYRzVjZEZ4MFkyeGxZWEpKWTI5dVEyeGhjM01nSUNBZ0lDQWdJRDBnWTI5dVptbG5MbWx1Ym1WeUxtbGpiMjV6TG1acGJIUmxjaTVqYkdWaGNpeGNibHgwWEhSamJHVmhja2xqYjI1RmJHVnRaVzUwUTJ4aGMzTWdQU0JqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tOc1pXRnlTV052YmlBcklDY2dKeUFySUdOc1pXRnlTV052YmtOc1lYTnpPMXh1WEc1Y2RHWnBiSFJsY2tOdmJuUmhhVzVsY2k1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVptbHNkR1Z5UTI5dWRHRnBibVZ5S1R0Y2JseDBabWxzZEdWeVEyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRDQTlJQ2M4YVc1d2RYUStQR2tnWTJ4aGMzTTlYQ0luSUNzZ1kyeGxZWEpKWTI5dVJXeGxiV1Z1ZEVOc1lYTnpJQ3NnSjF3aUlHRnlhV0V0YUdsa1pHVnVQVndpZEhKMVpWd2lQand2YVQ0bk8xeHVYRzVjZEhKbGRIVnliaUJtYVd4MFpYSkRiMjUwWVdsdVpYSTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVndaR0YwWlVsdWNIVjBLR052Ym1acFp5d2dZMlZzYkU1dlpHVXNJR1pwYkhSbGNrOWlhaXdnYUdWaFpHVnlUMkpxTENCbWFXNXBjMmhGWkdsMGFXNW5SbWxzZEdWeUtTQjdYRzVjZEhaaGNpQm1hV3gwWlhKRGIyNTBZV2x1WlhJZ1BTQmpaV3hzVG05a1pTNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVptbHNkR1Z5UTI5dWRHRnBibVZ5S1N4Y2JseDBYSFJtYVd4MFpYSkpibkIxZENBOUlHWnBiSFJsY2tOdmJuUmhhVzVsY2k1eGRXVnllVk5sYkdWamRHOXlLQ2RwYm5CMWRDY3BPMXh1WEc1Y2RHWnBiSFJsY2tsdWNIVjBMbk5sZEVGMGRISnBZblYwWlNnbmRIbHdaU2NzSUdacGJIUmxjazlpYWk1a1lYUmhWSGx3WlNrN1hHNWNkR1pwYkhSbGNrbHVjSFYwTG5aaGJIVmxJRDBnWm1sc2RHVnlUMkpxTG5aaGJIVmxPMXh1WEhSbWFXeDBaWEpKYm5CMWRDNW1iMk4xY3lncE8xeHVYSFJtYVd4MFpYSkpibkIxZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbDFjQ2NzSUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc1Y2RGeDBhV1lnS0NobGRtVnVkQzVyWlhsRGIyUmxJSHg4SUdWMlpXNTBMbmRvYVdOb0tTQTlQVDBnTVRNcElIc2dMeThnUlc1MFpYSWdhMlY1WEc1Y2RGeDBYSFJtYVd4MFpYSlBZbW91ZG1Gc2RXVWdQU0JrWVhSaFZYUnBiQzVuWlhSV1lXeDFaVUo1Vkhsd1pTaG1hV3gwWlhKSmJuQjFkQzUyWVd4MVpTd2dabWxzZEdWeVQySnFMbVJoZEdGVWVYQmxLVHRjYmx4dVhIUmNkRngwWm1sdWFYTm9SV1JwZEdsdVowWnBiSFJsY2loamIyNW1hV2NzSUdObGJHeE9iMlJsTENCb1pXRmtaWEpQWW1vc0lHWnBiSFJsY2s5aWFpazdYRzVjZEZ4MGZTQmxiSE5sSUdsbUlDZ29aWFpsYm5RdWEyVjVRMjlrWlNCOGZDQmxkbVZ1ZEM1M2FHbGphQ2tnUFQwOUlESTNLU0I3SUM4dklFVnpZMkZ3WlNCclpYbGNibHgwWEhSY2RHWnBibWx6YUVWa2FYUnBibWRHYVd4MFpYSW9ZMjl1Wm1sbkxDQmpaV3hzVG05a1pTd2dhR1ZoWkdWeVQySnFMQ0JtYVd4MFpYSlBZbW9wTzF4dVhIUmNkSDFjYmx4MGZTazdYRzVjYmx4MGNtVjBkWEp1SUdacGJIUmxja2x1Y0hWME8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JseDBZM0psWVhSbFEyOXVkR0ZwYm1WeU9pQmpjbVZoZEdWRGIyNTBZV2x1WlhJc1hHNWNkSFZ3WkdGMFpVbHVjSFYwT2lCMWNHUmhkR1ZKYm5CMWRGeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVWx1Y0hWMFRtOWtaU2hqWld4c1JHRjBZU3dnWlhabGJuUkpibk4wWVc1alpYTXBJSHRjYmx4MGRtRnlJR2x1Y0hWMFRtOWtaU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMmx1Y0hWMEp5azdYRzVjYmx4MGFXNXdkWFJPYjJSbExuWmhiSFZsSUQwZ1kyVnNiRVJoZEdFdVoyVjBWbUZzZFdVb0tUdGNibHgwYVc1d2RYUk9iMlJsTG5OMGVXeGxMbTFwYmxkcFpIUm9JRDBnSnpFd2NIZ25PeUF2THlCVVQwUlBPaUJMYVhONlpYSjJaWHB1YVNCdmMzcDB3NkZzZVdKaFhHNWNkR2x1Y0hWMFRtOWtaUzV6ZEhsc1pTNTNhV1IwYUNBOUlDYzRNQ1VuT3lBdkx5QlVUMFJQT2lCTGFYTjZaWEoyWlhwdWFTQnZjM3AwdzZGc2VXSmhYRzVjZEdsdWNIVjBUbTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9KM1I1Y0dVbkxDQmpaV3hzUkdGMFlTNWtZWFJoVkhsd1pTazdYRzVjZEdsdWNIVjBUbTlrWlM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaWJIVnlKeXdnWlhabGJuUkpibk4wWVc1alpYTXViMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJcE8xeHVYSFJwYm5CMWRFNXZaR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYTJWNWRYQW5MQ0JsZG1WdWRFbHVjM1JoYm1ObGN5NXZia2x1Y0hWMFMyVjVWWEJGZG1WdWRFaGhibVJzWlhJcE8xeHVYRzVjZEhKbGRIVnliaUJwYm5CMWRFNXZaR1U3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1WEhSamNtVmhkR1ZKYm5CMWRFNXZaR1U2SUdOeVpXRjBaVWx1Y0hWMFRtOWtaVnh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJEYkdGemN5QTlJSEpsY1hWcGNtVW9KMk5zWVhOekxUSTFOaTVxY3ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRU5zWVhOekxtVjRkR1Z1WkNobWRXNWpkR2x2YmlncElIdGNibHgwZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1WEc1Y2RITmxiR1l1WTI5dWMzUnlkV04wYjNJZ1BTQm1kVzVqZEdsdmJpaGhkSFJ5YVdKMWRHVnpMQ0J3WVhKaGJYTXBJSHRjYmx4MFhIUnBaaUFvZEhsd1pXOW1JR0YwZEhKcFluVjBaWE1nUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSOVhHNWNibHgwWEhSaGRIUnlhV0oxZEdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1lYUjBjaWtnZTF4dVhIUmNkRngwYzJWc1psdGhkSFJ5WFNBOUlIUjVjR1Z2WmlCd1lYSmhiWE1nUFQwZ0ozVnVaR1ZtYVc1bFpDY2dmSHdnZEhsd1pXOW1JSEJoY21GdGMxdGhkSFJ5WFNBOVBTQW5kVzVrWldacGJtVmtKeUEvSUc1MWJHd2dPaUJ3WVhKaGJYTmJZWFIwY2wwN1hHNWNkRngwZlNrN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1MWNHUmhkR1ZCZEhSeWFXSjFkR1Z6SUQwZ1puVnVZM1JwYjI0b1lYUjBjbk1wSUh0Y2JseDBYSFJQWW1wbFkzUXVhMlY1Y3loaGRIUnljeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyS1NCN1hHNWNkRngwWEhScFppQW9kSGx3Wlc5bUlHRjBkSEp6VzJ0ZElDRTlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIUjVjR1Z2WmlCelpXeG1XMnRkSUNFOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RGeDBYSFJjZEhObGJHWmJhMTBnUFNCaGRIUnljMXRyWFR0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseDBmVHRjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVablZ1WTNScGIyNGdRMlZzYkU5aWFtVmpkQ2h3S1NCN1hHNWNkSFpoY2lCelpXeG1JRDBnZEdocGN6dGNibHh1WEhScGJtbDBRWFIwY2lnbmEyVjVKeWs3WEc1Y2RHbHVhWFJCZEhSeUtDZDJZV3gxWlNjcE8xeHVYSFJwYm1sMFFYUjBjaWduWldScGRHVmtWbUZzZFdVbktUdGNibHgwYVc1cGRFRjBkSElvSjJSaGRHRlVlWEJsSnlrN1hHNWNkR2x1YVhSQmRIUnlLQ2RqYkdGemN5Y3BPMXh1WEhScGJtbDBRWFIwY2lnbmNtOTNUblZ0WW1WeUp5azdYRzVjZEdsdWFYUkJkSFJ5S0NkamIyeDFiVzVPZFcxaVpYSW5LVHRjYmx4MGFXNXBkRUYwZEhJb0ozWmhiR2xrWVhSdmNrOWlhbVZqZENjcE8xeHVYSFJwYm1sMFFYUjBjaWduWTNWemRHOXRWbUZzYVdSaGRHOXlKeWs3WEc1Y2JseDBablZ1WTNScGIyNGdhVzVwZEVGMGRISW9ibUZ0WlNrZ2UxeHVYSFJjZEhObGJHWmJibUZ0WlYwZ1BTQjBlWEJsYjJZZ2NDQTlQU0FuZFc1a1pXWnBibVZrSnlCOGZDQjBlWEJsYjJZZ2NGdHVZVzFsWFNBOVBTQW5kVzVrWldacGJtVmtKeUEvSUc1MWJHd2dPaUJ3VzI1aGJXVmRPMXh1WEhSOVhHNWNibHgwZEdocGN5NTFjR1JoZEdWQmRIUnlhV0oxZEdWeklEMGdablZ1WTNScGIyNG9ZWFIwY25NcElIdGNibHgwWEhSUFltcGxZM1F1YTJWNWN5aGhkSFJ5Y3lrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlocktTQjdYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR0YwZEhKelcydGRJQ0U5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQnpaV3htVzJ0ZElDRTlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkRngwWEhSY2RITmxiR1piYTEwZ1BTQmhkSFJ5YzF0clhUdGNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHgwZlR0Y2JseHVYSFIwYUdsekxtZGxkRlpoYkhWbElEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlITmxiR1l1WTJWc2JFTm9ZVzVuWldRZ1B5QnpaV3htTG1Wa2FYUmxaRlpoYkhWbElEb2djMlZzWmk1MllXeDFaVHRjYmx4MGZUdGNibHh1WEhSMGFHbHpMblZ3WkdGMFpWWmhiSFZsSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JseDBYSFJwWmlBb2MyVnNaaTVrWVhSaFZIbHdaU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNibHgwWEhSY2RIWmhiSFZsSUQwZ2FYTk9ZVTRvY0dGeWMyVkdiRzloZENoMllXeDFaU2twSUQ4Z01DQTZJSEJoY25ObFJteHZZWFFvZG1Gc2RXVXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2h6Wld4bUxuWmhiSFZsSUQwOVBTQjJZV3gxWlNCOGZDQnpaV3htTG5aaGJIVmxJRDA5UFNCdWRXeHNJQ1ltSUhSNWNHVnZaaUIyWVd4MVpTQTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFJjZEZ4MGMyVnNaaTVsWkdsMFpXUldZV3gxWlNBOUlHNTFiR3c3WEc1Y2RGeDBYSFJ6Wld4bUxtTmxiR3hEYUdGdVoyVmtJRDBnWm1Gc2MyVTdYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEhObGJHWXVaV1JwZEdWa1ZtRnNkV1VnUFNCMllXeDFaVHRjYmx4MFhIUmNkSE5sYkdZdVkyVnNiRU5vWVc1blpXUWdQU0IwY25WbE8xeHVYSFJjZEgxY2JseDBmVHRjYmx4dVhIUjBhR2x6TG1ScGMyTmhjbVJEYUdGdVoyVmtWbUZzZFdVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnpaV3htTG1Wa2FYUmxaRlpoYkhWbElEMGdiblZzYkR0Y2JseDBmVHRjYmx4dVhIUjBhR2x6TG1selEyVnNiRU5vWVc1blpXUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjMlZzWmk1alpXeHNRMmhoYm1kbFpEdGNibHgwZlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JEWld4c1QySnFaV04wT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRUpoYzJWRGJHRnpjeUE5SUhKbGNYVnBjbVVvSnk0dUwySmhjMlVuS1R0Y2JseHVkbUZ5SUVGVVZGSkpRbFZVUlZNZ1BTQmJYRzVjZENkalpXeHNUbTlrWlNjc1hHNWNkQ2RqWld4c1JHRjBZU2RjYmwwN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRbUZ6WlVOc1lYTnpMbVY0ZEdWdVpDaG1kVzVqZEdsdmJpaHdZWEpsYm5RcElIdGNibHgwZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1WEc1Y2RITmxiR1l1WTI5dWMzUnlkV04wYjNJZ1BTQm1kVzVqZEdsdmJpaHdZWEpoYlhNcElIdGNibHgwWEhSd1lYSmxiblF1WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2h6Wld4bUxDQkJWRlJTU1VKVlZFVlRMQ0J3WVhKaGJYTXBPMXh1WEhSOU8xeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdRbUZ6WlVOc1lYTnpJRDBnY21WeGRXbHlaU2duTGk0dlltRnpaU2NwTzF4dVhHNTJZWElnUVZSVVVrbENWVlJGVXlBOUlGdGNibHgwSjNOaGRtVmtVbTkzY3lkY2JsMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUW1GelpVTnNZWE56TG1WNGRHVnVaQ2htZFc1amRHbHZiaWh3WVhKbGJuUXBJSHRjYmx4MGRtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNWNkSE5sYkdZdVkyOXVjM1J5ZFdOMGIzSWdQU0JtZFc1amRHbHZiaWh3WVhKaGJYTXBJSHRjYmx4MFhIUndZWEpsYm5RdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoelpXeG1MQ0JCVkZSU1NVSlZWRVZUTENCd1lYSmhiWE1wTzF4dVhIUjlPMXh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnUW1GelpVTnNZWE56SUQwZ2NtVnhkV2x5WlNnbkxpNHZZbUZ6WlNjcE8xeHVYRzUyWVhJZ1FWUlVVa2xDVlZSRlV5QTlJRnRjYmx4MEoyTmxiR3hPYjJSbEp5eGNibHgwSjJObGJHeEVZWFJoSnl4Y2JseDBKMk5oYm1ObGJFVjJaVzUwSjF4dVhUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JDWVhObFEyeGhjM011WlhoMFpXNWtLR1oxYm1OMGFXOXVLSEJoY21WdWRDa2dlMXh1WEhSMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JseDBjMlZzWmk1amIyNXpkSEoxWTNSdmNpQTlJR1oxYm1OMGFXOXVLSEJoY21GdGN5a2dlMXh1WEhSY2RIQmhjbVZ1ZEM1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hObGJHWXNJRUZVVkZKSlFsVlVSVk1zSUhCaGNtRnRjeWs3WEc1Y2RIMDdYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJDWVhObFEyeGhjM01nUFNCeVpYRjFhWEpsS0NjdUxpOWlZWE5sSnlrN1hHNWNiblpoY2lCQlZGUlNTVUpWVkVWVElEMGdXMXh1WEhRblpXUnBkR1ZrVW05M2N5Y3NYRzVjZENkallXNWpaV3hGZG1WdWRDZGNibDA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1FtRnpaVU5zWVhOekxtVjRkR1Z1WkNobWRXNWpkR2x2Ymlod1lYSmxiblFwSUh0Y2JseDBkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVYRzVjZEhObGJHWXVZMjl1YzNSeWRXTjBiM0lnUFNCbWRXNWpkR2x2Ymlod1lYSmhiWE1wSUh0Y2JseDBYSFJ3WVhKbGJuUXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaHpaV3htTENCQlZGUlNTVUpWVkVWVExDQndZWEpoYlhNcE8xeHVYSFI5TzF4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1FtRnpaVU5zWVhOeklEMGdjbVZ4ZFdseVpTZ25MaTR2WW1GelpTY3BPMXh1WEc1MllYSWdRVlJVVWtsQ1ZWUkZVeUE5SUZ0Y2JseDBKMlZrYVhSbFpGSnZkeWNzWEc1Y2RDZGpZVzVqWld4RmRtVnVkQ2RjYmwwN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRbUZ6WlVOc1lYTnpMbVY0ZEdWdVpDaG1kVzVqZEdsdmJpaHdZWEpsYm5RcElIdGNibHgwZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1WEc1Y2RITmxiR1l1WTI5dWMzUnlkV04wYjNJZ1BTQm1kVzVqZEdsdmJpaHdZWEpoYlhNcElIdGNibHgwWEhSd1lYSmxiblF1WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2h6Wld4bUxDQkJWRlJTU1VKVlZFVlRMQ0J3WVhKaGJYTXBPMXh1WEhSOU8xeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdRbUZ6WlVOc1lYTnpJRDBnY21WeGRXbHlaU2duTGk0dlltRnpaU2NwTzF4dVhHNTJZWElnUVZSVVVrbENWVlJGVXlBOUlGdGNibHgwSjJObGJHeE9iMlJsSnl4Y2JseDBKMk5sYkd4RVlYUmhKeXhjYmx4MEoybHpSR0YwWVZaaGJHbGtKeXhjYmx4MEozWmhiR2xrWVhScGIyNVNaWE4xYkhRbkxGeHVYSFFuWTJGdVkyVnNSWFpsYm5RblhHNWRPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVKaGMyVkRiR0Z6Y3k1bGVIUmxibVFvWm5WdVkzUnBiMjRvY0dGeVpXNTBLU0I3WEc1Y2RIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVYSFJ6Wld4bUxtTnZibk4wY25WamRHOXlJRDBnWm5WdVkzUnBiMjRvY0dGeVlXMXpLU0I3WEc1Y2RGeDBjR0Z5Wlc1MExtTnZibk4wY25WamRHOXlMbU5oYkd3b2MyVnNaaXdnUVZSVVVrbENWVlJGVXl3Z2NHRnlZVzF6S1R0Y2JseDBmVHRjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdkbGJtVnlZWFJ2Y2lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WjJWdVpYSmhkRzl5SnlrN1hHNWNiblpoY2lCMWJtbHhkV1ZKWkZObGNYVmxibU5sSUQwZ01UdGNibHh1Wm5WdVkzUnBiMjRnVm1seWRIVmhiRVJoZEdGSGNtbGtLQ2tnZTF4dVhIUjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNibHgwYzJWc1ppNWpiMjVtYVdkMWNtRjBhVzl1SUQwZ2UzMDdYRzVjZEhObGJHWXVkVzVwY1hWbFNXUWdQU0IxYm1seGRXVkpaRk5sY1hWbGJtTmxLeXM3WEc1Y2RITmxiR1l1UkVWR1FWVk1WRjlQVUZSSlQwNVRJRDBnWjJWdVpYSmhkRzl5TG1kbGRFUmxabUYxYkhSUGNIUnBiMjV6S0NrN1hHNWNkSE5sYkdZdVoyVnVaWEpoZEdWVVlXSnNaU0E5SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wSUh0Y2JseDBYSFJ2Y0hScGIyNXpMblZ1YVhGMVpVbGtJRDBnYzJWc1ppNTFibWx4ZFdWSlpEdGNibHh1WEhSY2RHZGxibVZ5WVhSdmNpNW5aVzVsY21GMFpWUmhZbXhsS0hObGJHWXVZMjl1Wm1sbmRYSmhkR2x2Yml3Z2IzQjBhVzl1Y3lrN1hHNWNkSDA3WEc1Y2RITmxiR1l1WkdWemRISnZlVlJoWW14bElEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBaMlZ1WlhKaGRHOXlMbVJsYzNSeWIzbFVZV0pzWlNoelpXeG1MbU52Ym1acFozVnlZWFJwYjI0cE8xeHVYSFI5TzF4dVhIUnpaV3htTG1kbGRFbGtJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwY21WMGRYSnVJSE5sYkdZdWRXNXBjWFZsU1dRN1hHNWNkSDA3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWbWx5ZEhWaGJFUmhkR0ZIY21sa095SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUVKbFptOXlaVVZrYVhSQmNtZHpJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtaV3h6TDJWMlpXNTBMV0Z5WjNWdFpXNTBjeTlpWldadmNtVXRaV1JwZENjcExGeHVYSFJDWldadmNtVlRZWFpsUVhKbmN5QTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpHVnNjeTlsZG1WdWRDMWhjbWQxYldWdWRITXZZbVZtYjNKbExYTmhkbVVuS1N4Y2JseDBWbUZzYVdSaGRHbHZia0Z5WjNNZ1BTQnlaWEYxYVhKbEtDY3VMaTl0YjJSbGJITXZaWFpsYm5RdFlYSm5kVzFsYm5SekwzWmhiR2xrWVhScGIyNG5LU3hjYmx4MFUyRjJaVkp2ZDBGeVozTWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlJsYkhNdlpYWmxiblF0WVhKbmRXMWxiblJ6TDNOaGRtVXRjbTkzSnlrc1hHNWNkRk5oZG1WQ1lYUmphRUZ5WjNNZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Ylc5a1pXeHpMMlYyWlc1MExXRnlaM1Z0Wlc1MGN5OXpZWFpsTFdKaGRHTm9KeWtzWEc1Y2RFRm1kR1Z5UldScGRFRnlaM01nSUQwZ2NtVnhkV2x5WlNnbkxpNHZiVzlrWld4ekwyVjJaVzUwTFdGeVozVnRaVzUwY3k5aFpuUmxjaTFsWkdsMEp5a3NYRzVjZEVGbWRHVnlVMkYyWlVGeVozTWdJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtaV3h6TDJWMlpXNTBMV0Z5WjNWdFpXNTBjeTloWm5SbGNpMXpZWFpsSnlrc1hHNWNkR05sYkd4RmJHVnRaVzUwSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Wld4bGJXVnVkSE12WTJWc2JDY3BMRnh1WEhScGJuQjFkRVZzWlcxbGJuUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyVnNaVzFsYm5SekwybHVjSFYwSnlrc1hHNWNkSFJoWW14bFRXOWtkV3hsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTkwWVdKc1pTY3BMRnh1WEhSMllXeHBaR0YwYVc5dUlDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdmRtRnNhV1JoZEdsdmJpY3BMRnh1WEhSMFlXSnNaVlYwYVd3Z0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDNSaFlteGxKeWtzWEc1Y2RHUnZiVlYwYVd3Z0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdlpHOXRKeWtzWEc1Y2RHWnBiSFJsY2sxdlpIVnNaU0FnSUQwZ2NtVnhkV2x5WlNnbkxpNHZiVzlrZFd4bGN5OW1hV3gwWlhJbktUdGNibHh1Wm5WdVkzUnBiMjRnYzNSaGNuUkZaR2wwYVc1blEyVnNiQ2hqYjI1bWFXY3NJR05sYkd4T2IyUmxMQ0JwYm5OMFlXNWpaWE1zSUdWMlpXNTBTR0Z1Wkd4bGNuTXBJSHRjYmx4MGFXWWdLQ0ZqYjI1bWFXY3VaV1JwZEM1bGJtRmliR1ZrS1NCN1hHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwZG1GeUlISnZkMDUxYldKbGNpQTlJR1J2YlZWMGFXd3VaMlYwVW05M1RuVnRZbVZ5S0dOdmJtWnBaeXdnWTJWc2JFNXZaR1VwTEZ4dVhIUmNkR052YkhWdGJrNTFiV0psY2lBOUlHUnZiVlYwYVd3dVoyVjBRMjlzZFcxdVRuVnRZbVZ5S0dOdmJtWnBaeXdnWTJWc2JFNXZaR1VwTzF4dVhHNWNkR2xtSUNoeWIzZE9kVzFpWlhJZ1BqMGdZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVXViR1Z1WjNSb0tTQjdYRzVjZEZ4MGNtVjBkWEp1TzF4dVhIUjlYRzVjYmx4MGRtRnlJR05sYkd4RVlYUmhJRDBnZEdGaWJHVlZkR2xzTG1kbGRFTmxiR3hFWVhSaEtHTnZibVpwWnl3Z2NtOTNUblZ0WW1WeUxDQmpiMngxYlc1T2RXMWlaWElwTzF4dVhHNWNkSFpoY2lCaVpXWnZjbVZGWkdsMFFYSm5jeUE5SUc1bGR5QkNaV1p2Y21WRlpHbDBRWEpuY3loN1hHNWNkRngwWTJWc2JFNXZaR1U2SUdObGJHeE9iMlJsTEZ4dVhIUmNkR05sYkd4RVlYUmhPaUJqWld4c1JHRjBZU3hjYmx4MFhIUmpZVzVqWld4RmRtVnVkRG9nWm1Gc2MyVmNibHgwZlNrN1hHNWNibHgwWTI5dVptbG5MbVYyWlc1MFNHRnVaR3hsY25NdWIyNUNaV1p2Y21WRlpHbDBLR0psWm05eVpVVmthWFJCY21kektUdGNibHh1WEhScFppQW9JV0psWm05eVpVVmthWFJCY21kekxtTmhibU5sYkVWMlpXNTBLU0I3WEc1Y2RGeDBZMlZzYkU1dlpHVXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YzJWc1pXTjBiM0p6TG1Wa2FYUnBibWREWld4c0tUdGNibHgwWEhSalpXeHNUbTlrWlM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0dOdmJtWnBaeTV6Wld4bFkzUnZjbk11WldScGRHVmtRMlZzYkNrN1hHNWNibHgwWEhScGJuTjBZVzVqWlhNdWIyNUpibkIxZEVKc2RYSkZkbVZ1ZEVoaGJtUnNaWElnUFNCbWRXNWpkR2x2YmlobGRpa2dleUJsZG1WdWRFaGhibVJzWlhKekxtOXVTVzV3ZFhSQ2JIVnlSWFpsYm5SSVlXNWtiR1Z5S0dWMkxDQmpiMjVtYVdjcE95QjlPMXh1WEhSY2RHbHVjM1JoYm1ObGN5NXZia2x1Y0hWMFMyVjVWWEJGZG1WdWRFaGhibVJzWlhJZ1BTQm1kVzVqZEdsdmJpaGxkaWtnZXlCbGRtVnVkRWhoYm1Sc1pYSnpMbTl1U1c1d2RYUkxaWGxWY0VWMlpXNTBTR0Z1Wkd4bGNpaGxkaXdnWTI5dVptbG5LVHNnZlR0Y2JseHVYSFJjZEhaaGNpQnBibkIxZEU1dlpHVWdQU0JwYm5CMWRFVnNaVzFsYm5RdVkzSmxZWFJsU1c1d2RYUk9iMlJsS0dObGJHeEVZWFJoTENCcGJuTjBZVzVqWlhNcE8xeHVYRzVjZEZ4MFkyVnNiRVZzWlcxbGJuUXVkWEJrWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJR05sYkd4T2IyUmxMQ0JwYm5CMWRFNXZaR1VwTzF4dVhHNWNkRngwYVc1d2RYUk9iMlJsTG1adlkzVnpLQ2s3WEc1Y2RIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHVhWE5vUldScGRHbHVaME5sYkd3b1kyOXVabWxuTENCcGJuQjFkRTV2WkdVc0lHVjJaVzUwU0dGdVpHeGxjbk1wSUh0Y2JseDBkbUZ5SUdObGJHeE9iMlJsSUQwZ2FXNXdkWFJPYjJSbExuQmhjbVZ1ZEU1dlpHVXVjR0Z5Wlc1MFRtOWtaU3hjYmx4MFhIUnliM2RPZFcxaVpYSWdQU0JrYjIxVmRHbHNMbWRsZEZKdmQwNTFiV0psY2loamIyNW1hV2NzSUdObGJHeE9iMlJsS1N4Y2JseDBYSFJqYjJ4MWJXNU9kVzFpWlhJZ1BTQmtiMjFWZEdsc0xtZGxkRU52YkhWdGJrNTFiV0psY2loamIyNW1hV2NzSUdObGJHeE9iMlJsS1N4Y2JseDBYSFJqWld4c1JHRjBZU0E5SUhSaFlteGxWWFJwYkM1blpYUkRaV3hzUkdGMFlTaGpiMjVtYVdjc0lISnZkMDUxYldKbGNpd2dZMjlzZFcxdVRuVnRZbVZ5S1N4Y2JseDBYSFIxY0dSaGRHVmtWbUZzZFdVZ1BTQnBibkIxZEU1dlpHVXVkbUZzZFdVN1hHNWNibHgwWTJWc2JFUmhkR0V1ZFhCa1lYUmxRWFIwY21saWRYUmxjeWg3SUdOc1lYTnpPaUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMbVZrYVhSbFpFTmxiR3dnZlNrN1hHNWNkR05sYkd4RVlYUmhMblZ3WkdGMFpWWmhiSFZsS0hWd1pHRjBaV1JXWVd4MVpTazdYRzVjYmx4MGFXWWdLQ0ZqWld4c1JHRjBZUzVwYzBObGJHeERhR0Z1WjJWa0tDa3BJSHRjYmx4MFhIUjBZV0pzWlUxdlpIVnNaUzV5WlhObGRFVmthWFJwYm1kRFpXeHNLR052Ym1acFp5d2daWFpsYm5SSVlXNWtiR1Z5Y3lrN1hHNWNibHgwWEhSeVpYUjFjbTQ3WEc1Y2RIMWNibHh1WEhSMllYSWdkbUZzYVdSaGRHbHZia1Z1WVdKc1pXUWdQU0JqYjI1bWFXY3VaV1JwZEM1MllXeHBaR0YwWlR0Y2JseHVYSFIyWVhJZ2RtRnNhV1JoZEdsdmJsSmxjM1ZzZENBOUlIWmhiR2xrWVhScGIyNHVkbUZzYVdSaGRHVW9ZMjl1Wm1sbkxDQmpaV3hzUkdGMFlTa3NYRzVjZEZ4MGFYTkVZWFJoVm1Gc2FXUWdQU0IyWVd4cFpHRjBhVzl1VW1WemRXeDBMbXhsYm1kMGFDQTlQVDBnTUN4Y2JseDBYSFIyWVd4cFpHRjBhVzl1UVhKbmN5QTlJRzVsZHlCV1lXeHBaR0YwYVc5dVFYSm5jeWg3WEc1Y2RGeDBYSFJqWld4c1RtOWtaVG9nWTJWc2JFNXZaR1VzWEc1Y2RGeDBYSFJqWld4c1JHRjBZVG9nWTJWc2JFUmhkR0VzWEc1Y2RGeDBYSFJwYzBSaGRHRldZV3hwWkRvZ2FYTkVZWFJoVm1Gc2FXUXNYRzVjZEZ4MFhIUjJZV3hwWkdGMGFXOXVVbVZ6ZFd4ME9pQjJZV3hwWkdGMGFXOXVVbVZ6ZFd4MExGeHVYSFJjZEZ4MFkyRnVZMlZzUlhabGJuUTZJQ0ZwYzBSaGRHRldZV3hwWkZ4dVhIUmNkSDBwTzF4dVhHNWNkR2xtSUNoMllXeHBaR0YwYVc5dVJXNWhZbXhsWkNrZ2UxeHVYSFJjZEdOdmJtWnBaeTVsZG1WdWRFaGhibVJzWlhKekxtOXVWbUZzYVdSaGRHbHZiaWgyWVd4cFpHRjBhVzl1UVhKbmN5azdYRzVjZEgxY2JseHVYSFJwWmlBb2RtRnNhV1JoZEdsdmJrRnlaM011WTJGdVkyVnNSWFpsYm5RZ0lUMDlJSFJ5ZFdVcElIdGNibHgwWEhSMFlXSnNaVlYwYVd3dWMzUnZjbVZWY0dSaGRHVmtRMlZzYkZaaGJIVmxLR052Ym1acFp5d2dZMlZzYkVSaGRHRXBPMXh1WEhSY2RHTmxiR3hGYkdWdFpXNTBMblZ3WkdGMFpVTmxiR3dvWTI5dVptbG5MQ0JqWld4c1RtOWtaU3dnWTJWc2JFUmhkR0VwTzF4dVhHNWNkRngwZG1GeUlHRm1kR1Z5UldScGRFRnlaM01nUFNCdVpYY2dRV1owWlhKRlpHbDBRWEpuY3loN1hHNWNkRngwWEhSalpXeHNUbTlrWlRvZ1kyVnNiRTV2WkdVc1hHNWNkRngwWEhSalpXeHNSR0YwWVRvZ1kyVnNiRVJoZEdGY2JseDBYSFI5S1R0Y2JseHVYSFJjZEdOdmJtWnBaeTVsZG1WdWRFaGhibVJzWlhKekxtOXVRV1owWlhKRlpHbDBLR0ZtZEdWeVJXUnBkRUZ5WjNNcE8xeHVYRzVjZEZ4MFptbHNkR1Z5VFc5a2RXeGxMbVpwYkhSbGNpaGpiMjVtYVdjcE8xeHVYSFI5SUdWc2MyVWdhV1lnS0haaGJHbGtZWFJwYjI1RmJtRmliR1ZrSUNZbUlDRnBjMFJoZEdGV1lXeHBaQ2tnZTF4dVhIUmNkSFpoYkdsa1lYUnBiMjR1YzJodmQwVnljbTl5Y3loMllXeHBaR0YwYVc5dVVtVnpkV3gwS1R0Y2JseDBmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpZVzVqWld4RlpHbDBhVzVuUTJWc2JDZ3BJSHRjYmx4MGNtVjBkWEp1SUNjbk8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCellYWmxRMlZzYkhNb1kyOXVabWxuS1NCN1hHNWNkR2xtSUNnaFkyOXVabWxuTG1Wa2FYUXVaVzVoWW14bFpDa2dlMXh1WEhSY2RISmxkSFZ5Ymp0Y2JseDBmVnh1WEc1Y2RIWmhjaUJpWldadmNtVlRZWFpsUVhKbmN5QTlJRzVsZHlCQ1pXWnZjbVZUWVhabFFYSm5jeWg3WEc1Y2RGeDBaV1JwZEdWa1VtOTNjem9nWTI5dVptbG5MbWx1Ym1WeUxtVmthWFJsWkZaaGJIVmxjeXhjYmx4MFhIUmpZVzVqWld4RmRtVnVkRG9nWm1Gc2MyVmNibHgwZlNrN1hHNWNibHgwWTI5dVptbG5MbVYyWlc1MFNHRnVaR3hsY25NdWIyNUNaV1p2Y21WVFlYWmxLR0psWm05eVpWTmhkbVZCY21kektUdGNibHh1WEhScFppQW9ZbVZtYjNKbFUyRjJaVUZ5WjNNdVkyRnVZMlZzUlhabGJuUXBJSHRjYmx4MFhIUnlaWFIxY200N1hHNWNkSDFjYmx4dVhIUnBaaUFvWTI5dVptbG5MbVZrYVhRdWJXOWtaU0E5UFQwZ0ozSnZkeWNwSUhzZ0x5OGdVbTkzSUcxdlpHVmNibHgwWEhSMllYSWdjMkYyWlZKdmQwRnlaM01nUFNCdVpYY2dVMkYyWlZKdmQwRnlaM01vZXlCallXNWpaV3hGZG1WdWREb2dabUZzYzJVZ2ZTazdYRzVjYmx4MFhIUmpiMjVtYVdjdVpHRjBZVk52ZFhKalpTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtISnZkeWtnZTF4dVhIUmNkRngwYzJGMlpWSnZkMEZ5WjNNZ1BTQnVaWGNnVTJGMlpWSnZkMEZ5WjNNb2UxeHVYSFJjZEZ4MFhIUmxaR2wwWldSU2IzYzZJR052Ym1acFp5NXBibTVsY2k1bFpHbDBaV1JXWVd4MVpYTXNYRzVjZEZ4MFhIUmNkR05oYm1ObGJFVjJaVzUwT2lCbVlXeHpaVnh1WEhSY2RGeDBmU2s3WEc1Y2JseDBYSFJjZEdsbUlDZ2hjMkYyWlZKdmQwRnlaM011WTJGdVkyVnNSWFpsYm5RcElIdGNibHgwWEhSY2RGeDBZMjl1Wm1sbkxtVjJaVzUwU0dGdVpHeGxjbk11YjI1VFlYWnBibWRTYjNjb2MyRjJaVkp2ZDBGeVozTXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb0lYTmhkbVZTYjNkQmNtZHpMbU5oYm1ObGJFVjJaVzUwS1NCN1hHNWNkRngwWEhSY2RIUmhZbXhsVlhScGJDNXdaWEp6YVhOMFVtOTNWbUZzZFdWektHTnZibVpwWnl3Z2NtOTNLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLVHRjYmx4dVhIUmNkR2xtSUNnaGMyRjJaVkp2ZDBGeVozTXVZMkZ1WTJWc1JYWmxiblFwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjZEgwZ1pXeHpaU0JwWmlBb1kyOXVabWxuTG1Wa2FYUXViVzlrWlNBOVBUMGdKMkpoZEdOb0p5a2dleUF2THlCQ1lYUmphQ0J0YjJSbFhHNWNkRngwZG1GeUlITmhkbVZDWVhSamFFRnlaM01nUFNCdVpYY2dVMkYyWlVKaGRHTm9RWEpuY3loN1hHNWNkRngwWEhSbFpHbDBaV1JTYjNkek9pQmpiMjVtYVdjdWFXNXVaWEl1WldScGRHVmtWbUZzZFdWekxGeHVYSFJjZEZ4MFkyRnVZMlZzUlhabGJuUTZJR1poYkhObFhHNWNkRngwZlNrN1hHNWNibHgwWEhSamIyNW1hV2N1WlhabGJuUklZVzVrYkdWeWN5NXZibE5oZG1sdVowSmhkR05vS0hOaGRtVkNZWFJqYUVGeVozTXBPMXh1WEc1Y2RGeDBhV1lnS0hOaGRtVkNZWFJqYUVGeVozTXVZMkZ1WTJWc1JYWmxiblFwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUjBZV0pzWlZWMGFXd3VjR1Z5YzJsemRFSmhkR05vVm1Gc2RXVnpLR052Ym1acFp5azdYRzVjZEgxY2JseHVYSFIyWVhJZ1lXWjBaWEpUWVhabFFYSm5jeUE5SUc1bGR5QkJablJsY2xOaGRtVkJjbWR6S0h0Y2JseDBYSFJ6WVhabFpGSnZkM002SUdOdmJtWnBaeTVwYm01bGNpNWxaR2wwWldSV1lXeDFaWE5jYmx4MGZTazdYRzVjYmx4MGRHRmliR1ZOYjJSMWJHVXVjbVZ6WlhSRlpHbDBaV1JEWld4c2N5aGpiMjVtYVdjcE8xeHVYRzVjZEdOdmJtWnBaeTVsZG1WdWRFaGhibVJzWlhKekxtOXVRV1owWlhKVFlYWmxLR0ZtZEdWeVUyRjJaVUZ5WjNNcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JseDBjM1JoY25SRlpHbDBhVzVuUTJWc2JEb2djM1JoY25SRlpHbDBhVzVuUTJWc2JDeGNibHgwWm1sdWFYTm9SV1JwZEdsdVowTmxiR3c2SUdacGJtbHphRVZrYVhScGJtZERaV3hzTEZ4dVhIUmpZVzVqWld4RlpHbDBhVzVuUTJWc2JEb2dZMkZ1WTJWc1JXUnBkR2x1WjBObGJHd3NYRzVjZEhOaGRtVkRaV3hzY3pvZ2MyRjJaVU5sYkd4elhHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHUnZiVlYwYVd3Z0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzY3k5a2IyMG5LU3hjYmx4MGEyVjVZbTloY21SVmRHbHNJQ0E5SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDJ0bGVXSnZZWEprSnlrc1hHNWNkSE52Y25STmIyUjFiR1VnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMaTl0YjJSMWJHVnpMM052Y25RbktTeGNibHgwWldScGRFMXZaSFZzWlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12WldScGRDY3BMRnh1WEhSMFlXSnNaVTF2WkhWc1pTQWdJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5MFlXSnNaU2NwTEZ4dVhIUm1hV3gwWlhKTmIyUjFiR1VnSUQwZ2NtVnhkV2x5WlNnbkxpNHZiVzlrZFd4bGN5OW1hV3gwWlhJbktTeGNibHgwZEc5dmJIUnBjRTF2WkhWc1pTQTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12ZEc5dmJIUnBjQ2NwTzF4dVhHNTJZWElnWTI5dWRHRnBibVZ5TzF4dVhHNTJZWElnYVc1emRHRnVZMlZ6SUQwZ2UxeHVYSFJ2YmxOamNtOXNiRVYyWlc1MFNHRnVaR3hsY2pvZ1puVnVZM1JwYjI0b0tTQjdmU3hjYmx4MGIyNVhhR1ZsYkVWMlpXNTBTR0Z1Wkd4bGNqb2dablZ1WTNScGIyNG9LU0I3ZlN4Y2JseDBiMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJNklHWjFibU4wYVc5dUtDa2dlMzBzWEc1Y2RHOXVRMnhwWTJ0RFpXeHNSWFpsYm5SSVlXNWtiR1Z5T2lCbWRXNWpkR2x2YmlncElIdDlMRnh1WEhSdmJrTnNhV05yVTJGMlpVSjFkSFJ2YmtWMlpXNTBTR0Z1Wkd4bGNqb2dablZ1WTNScGIyNG9LU0I3ZlN4Y2JseDBiMjVEYkdsamExTnZjblJJWldGa1pYSTZJR1oxYm1OMGFXOXVLQ2tnZTMwc1hHNWNkRzl1UTJ4cFkydEdhV3gwWlhKSVpXRmtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UzMHNYRzVjZEc5dVRXOTFjMlZGYm5SbGNrTmxiR3hYYVhSb1ZHbDBiR1U2SUdaMWJtTjBhVzl1S0NrZ2UzMHNYRzVjZEc5dVRXOTFjMlZNWldGMlpVTmxiR3hYYVhSb1ZHbDBiR1U2SUdaMWJtTjBhVzl1S0NrZ2UzMHNYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnZibGRvWldWc1JYWmxiblJJWVc1a2JHVnlLR1YyWlc1MExDQmpiMjVtYVdjcElIdGNibHgwWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNibHh1WEhScFppQW9aWFpsYm5RdVpHVnNkR0ZOYjJSbElEMDlQU0JYYUdWbGJFVjJaVzUwTGtSUFRWOUVSVXhVUVY5UVNWaEZUQ2tnZTF4dVhIUmNkR052Ym5SaGFXNWxjaTV6WTNKdmJHeFViM0FnS3owZ1pYWmxiblF1WkdWc2RHRlpPMXh1WEhSY2RHTnZiblJoYVc1bGNpNXpZM0p2Ykd4TVpXWjBJQ3M5SUdWMlpXNTBMbVJsYkhSaFdEdGNibHgwZlNCbGJITmxJR2xtSUNobGRtVnVkQzVrWld4MFlVMXZaR1VnUFQwOUlGZG9aV1ZzUlhabGJuUXVSRTlOWDBSRlRGUkJYMHhKVGtVcElIdGNibHgwWEhSamIyNTBZV2x1WlhJdWMyTnliMnhzVkc5d0lDczlJR1YyWlc1MExtUmxiSFJoV1NBcUlHTnZibVpwWnk1cGJtNWxjaTVrYVcxbGJuTnBiMjV6TG5OamNtOXNiRXhwYm1WSVpXbG5hSFE3WEc1Y2RGeDBZMjl1ZEdGcGJtVnlMbk5qY205c2JFeGxablFnS3owZ1pYWmxiblF1WkdWc2RHRllJQ29nWTI5dVptbG5MbWx1Ym1WeUxtUnBiV1Z1YzJsdmJuTXVjMk55YjJ4c1RHbHVaVWhsYVdkb2REdGNibHgwZlNCbGJITmxJR2xtSUNobGRtVnVkQzVrWld4MFlVMXZaR1VnUFQwOUlGZG9aV1ZzUlhabGJuUXVSRTlOWDBSRlRGUkJYMUJCUjBVcElIdGNibHgwWEhSamIyNTBZV2x1WlhJdWMyTnliMnhzVkc5d0lDczlJR1YyWlc1MExtUmxiSFJoV1NBcUlHTnZibVpwWnk1cGJtNWxjaTVrYVcxbGJuTnBiMjV6TG5OamNtOXNiRkJoWjJWSVpXbG5hSFE3WEc1Y2RGeDBZMjl1ZEdGcGJtVnlMbk5qY205c2JFeGxablFnS3owZ1pYWmxiblF1WkdWc2RHRllJQ29nWTI5dVptbG5MbWx1Ym1WeUxtUnBiV1Z1YzJsdmJuTXVjMk55YjJ4c1VHRm5aVWhsYVdkb2REdGNibHgwZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ2YmxOamNtOXNiRVYyWlc1MFNHRnVaR3hsY2lobGRtVnVkQ3dnWTI5dVptbG5LU0I3WEc1Y2RIUnZiMngwYVhCTmIyUjFiR1V1YUdsa1pVRnNiQ2hqYjI1bWFXY3BPMXh1WEc1Y2RIUmhZbXhsVFc5a2RXeGxMbk5qY205c2JGUmhZbXhsY3loamIyNW1hV2NwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2YmtOc2FXTnJRMlZzYkVWMlpXNTBTR0Z1Wkd4bGNpaGxkbVZ1ZEN3Z1kyOXVabWxuS1NCN1hHNWNkR2xtSUNnaFpYWmxiblF1ZEdGeVoyVjBMbTFoZEdOb1pYTW9KeTRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVqWld4c1JHRjBZVU52Ym5SaGFXNWxjaWtwSUh0Y2JseDBYSFJ5WlhSMWNtNDdYRzVjZEgxY2JseHVYSFJsWkdsMFRXOWtkV3hsTG5OMFlYSjBSV1JwZEdsdVowTmxiR3dvWTI5dVptbG5MQ0JsZG1WdWRDNTBZWEpuWlhRdWNHRnlaVzUwVG05a1pTd2dhVzV6ZEdGdVkyVnpMQ0I3WEc1Y2RGeDBiMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJNklHOXVTVzV3ZFhSQ2JIVnlSWFpsYm5SSVlXNWtiR1Z5TEZ4dVhIUmNkRzl1U1c1d2RYUkxaWGxWY0VWMlpXNTBTR0Z1Wkd4bGNqb2diMjVKYm5CMWRFdGxlVlZ3UlhabGJuUklZVzVrYkdWeVhHNWNkSDBwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2YmtsdWNIVjBRbXgxY2tWMlpXNTBTR0Z1Wkd4bGNpaGxkbVZ1ZEN3Z1kyOXVabWxuS1NCN1hHNWNkR1ZrYVhSTmIyUjFiR1V1Wm1sdWFYTm9SV1JwZEdsdVowTmxiR3dvWTI5dVptbG5MQ0JsZG1WdWRDNTBZWEpuWlhRc0lIdGNibHgwWEhSdmJrbHVjSFYwUW14MWNrVjJaVzUwU0dGdVpHeGxjam9nYjI1SmJuQjFkRUpzZFhKRmRtVnVkRWhoYm1Sc1pYSXNYRzVjZEZ4MGIyNUpibkIxZEV0bGVWVndSWFpsYm5SSVlXNWtiR1Z5T2lCdmJrbHVjSFYwUzJWNVZYQkZkbVZ1ZEVoaGJtUnNaWEpjYmx4MGZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVTVzV3ZFhSTFpYbFZjRVYyWlc1MFNHRnVaR3hsY2lobGRtVnVkQ3dnWTI5dVptbG5LU0I3WEc1Y2RIWmhjaUJyWlhsRGIyUmxJRDBnYTJWNVltOWhjbVJWZEdsc0xtZGxkRXRsZVVOdlpHVW9aWFpsYm5RcE8xeHVYRzVjZEhOM2FYUmphQ0FvYTJWNVEyOWtaU2tnZTF4dVhIUmNkR05oYzJVZ2EyVjVZbTloY21SVmRHbHNMa3RGV1Y5RFQwUkZVeTVGVGxSRlVqcGNibHgwWEhSY2RHVjJaVzUwTG5SaGNtZGxkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaWJIVnlKeXdnYVc1emRHRnVZMlZ6TG05dVNXNXdkWFJDYkhWeVJYWmxiblJJWVc1a2JHVnlLVHRjYmx4MFhIUmNkR1ZrYVhSTmIyUjFiR1V1Wm1sdWFYTm9SV1JwZEdsdVowTmxiR3dvWTI5dVptbG5MQ0JsZG1WdWRDNTBZWEpuWlhRc0lIdGNibHgwWEhSY2RGeDBiMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJNklHOXVTVzV3ZFhSQ2JIVnlSWFpsYm5SSVlXNWtiR1Z5TEZ4dVhIUmNkRngwWEhSdmJrbHVjSFYwUzJWNVZYQkZkbVZ1ZEVoaGJtUnNaWEk2SUc5dVNXNXdkWFJMWlhsVmNFVjJaVzUwU0dGdVpHeGxjbHh1WEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFJpY21WaGF6dGNibHgwWEhSallYTmxJR3RsZVdKdllYSmtWWFJwYkM1TFJWbGZRMDlFUlZNdVJWTkRRVkJGT2x4dVhIUmNkRngwWldScGRFMXZaSFZzWlM1allXNWpaV3hGWkdsMGFXNW5RMlZzYkNoamIyNW1hV2NzSUdWMlpXNTBMblJoY21kbGRDd2dlMXh1WEhSY2RGeDBYSFJ2YmtsdWNIVjBRbXgxY2tWMlpXNTBTR0Z1Wkd4bGNqb2diMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJc1hHNWNkRngwWEhSY2RHOXVTVzV3ZFhSTFpYbFZjRVYyWlc1MFNHRnVaR3hsY2pvZ2IyNUpibkIxZEV0bGVWVndSWFpsYm5SSVlXNWtiR1Z5WEc1Y2RGeDBYSFI5S1R0Y2JseDBYSFJjZEdKeVpXRnJPMXh1WEhSY2RHUmxabUYxYkhRNlhHNWNkRngwWEhSaWNtVmhhenRjYmx4MGZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJrTnNhV05yVTJGMlpVSjFkSFJ2YmtWMlpXNTBTR0Z1Wkd4bGNpaGxkbVZ1ZEN3Z1kyOXVabWxuS1NCN1hHNWNkR1ZrYVhSTmIyUjFiR1V1YzJGMlpVTmxiR3h6S0dOdmJtWnBaeWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJRzl1UTJ4cFkydFRiM0owU0dWaFpHVnlLR1YyWlc1MExDQmpiMjVtYVdjcElIdGNibHgwZG1GeUlITnZjblJEWld4c1UyVnNaV04wYjNJZ1BTQW5MaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbk52Y25SRFpXeHNMRnh1WEhSY2RITnZjblJEYjI1MFlXbHVaWEpUWld4bFkzUnZjaUE5SUhOdmNuUkRaV3hzVTJWc1pXTjBiM0lnS3lBbklDNG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NWpaV3hzUkdGMFlVTnZiblJoYVc1bGNpeGNibHgwWEhSemIzSjBSR2x6WVdKc1pXUlRaV3hsWTNSdmNpQTlJQ2N1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11YzI5eWRFUnBjMkZpYkdWa0xGeHVYSFJjZEhOdmNuUkpZMjl1VTJWc1pXTjBiM0lnUFNCemIzSjBRMlZzYkZObGJHVmpkRzl5SUNzZ0p5QXVKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVjMjl5ZEVsamIyNDdYRzVjYmx4MGFXWWdLQ0ZsZG1WdWRDNTBZWEpuWlhRdWJXRjBZMmhsY3loemIzSjBRMjl1ZEdGcGJtVnlVMlZzWldOMGIzSXBJQ1ltWEc1Y2RGeDBJV1YyWlc1MExuUmhjbWRsZEM1dFlYUmphR1Z6S0hOdmNuUkpZMjl1VTJWc1pXTjBiM0lwSUh4OFhHNWNkRngwWlhabGJuUXVkR0Z5WjJWMExtMWhkR05vWlhNb2MyOXlkRVJwYzJGaWJHVmtVMlZzWldOMGIzSXBLU0I3WEc1Y2RGeDBjbVYwZFhKdU8xeHVYSFI5WEc1Y2JseDBhV1lnS0dWMlpXNTBMblJoY21kbGRDNXRZWFJqYUdWektITnZjblJKWTI5dVUyVnNaV04wYjNJcEtTQjdYRzVjZEZ4MGMyOXlkRTF2WkhWc1pTNXlaWE5sZEZOdmNuUW9ZMjl1Wm1sbktUdGNibHgwZlZ4dVhHNWNkR2xtSUNobGRtVnVkQzUwWVhKblpYUXViV0YwWTJobGN5aHpiM0owUTI5dWRHRnBibVZ5VTJWc1pXTjBiM0lwS1NCN1hHNWNkRngwYzI5eWRFMXZaSFZzWlM1emIzSjBRbmxEYjJ4MWJXNG9ZMjl1Wm1sbkxDQmtiMjFWZEdsc0xtWnBibVJRWVhKbGJuUk9iMlJsS0dWMlpXNTBMblJoY21kbGRDd2djMjl5ZEVObGJHeFRaV3hsWTNSdmNpa3BPMXh1WEhSOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUc5dVEyeHBZMnRHYVd4MFpYSklaV0ZrWlhJb1pYWmxiblFzSUdOdmJtWnBaeWtnZTF4dVhIUjJZWElnWm1sc2RHVnlRMlZzYkZObGJHVmpkRzl5SUQwZ0p5NG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKRFpXeHNMRnh1WEhSY2RHWnBiSFJsY2tOdmJuUmhhVzVsY2xObGJHVmpkRzl5SUQwZ1ptbHNkR1Z5UTJWc2JGTmxiR1ZqZEc5eUlDc2dKeUF1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WTJWc2JFUmhkR0ZEYjI1MFlXbHVaWElzWEc1Y2RGeDBabWxzZEdWeVJHbHpZV0pzWldSVFpXeGxZM1J2Y2lBOUlDY3VKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVJHbHpZV0pzWldRc1hHNWNkRngwWm1sc2RHVnlVMlZoY21Ob1NXTnZibE5sYkdWamRHOXlJRDBnWm1sc2RHVnlRMlZzYkZObGJHVmpkRzl5SUNzZ0p5QXVKeUFySUdOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVUyVmhjbU5vU1dOdmJpeGNibHgwWEhSbWFXeDBaWEpEYkdWaGNrbGpiMjVUWld4bFkzUnZjaUE5SUdacGJIUmxja05sYkd4VFpXeGxZM1J2Y2lBcklDY2dMaWNnS3lCamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbVpwYkhSbGNrTnNaV0Z5U1dOdmJpeGNibHgwWEhSalpXeHNUbTlrWlNBOUlHUnZiVlYwYVd3dVptbHVaRkJoY21WdWRFNXZaR1VvWlhabGJuUXVkR0Z5WjJWMExDQm1hV3gwWlhKRFpXeHNVMlZzWldOMGIzSXBPMXh1WEc1Y2RHbG1JQ2doWlhabGJuUXVkR0Z5WjJWMExtMWhkR05vWlhNb1ptbHNkR1Z5UTI5dWRHRnBibVZ5VTJWc1pXTjBiM0lwSUNZbVhHNWNkRngwSVdWMlpXNTBMblJoY21kbGRDNXRZWFJqYUdWektHWnBiSFJsY2xObFlYSmphRWxqYjI1VFpXeGxZM1J2Y2lrZ0ppWmNibHgwWEhRaFpYWmxiblF1ZEdGeVoyVjBMbTFoZEdOb1pYTW9abWxzZEdWeVEyeGxZWEpKWTI5dVUyVnNaV04wYjNJcElIeDhYRzVjZEZ4MFkyVnNiRTV2WkdVdWJXRjBZMmhsY3lobWFXeDBaWEpFYVhOaFlteGxaRk5sYkdWamRHOXlLU2tnZTF4dVhHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwYVdZZ0tHVjJaVzUwTG5SaGNtZGxkQzV0WVhSamFHVnpLR1pwYkhSbGNrTnNaV0Z5U1dOdmJsTmxiR1ZqZEc5eUtTa2dlMXh1WEhSY2RHWnBiSFJsY2sxdlpIVnNaUzVqYkdWaGNrWnBiSFJsY2loamIyNW1hV2NzSUdObGJHeE9iMlJsS1R0Y2JseHVYSFJjZEhKbGRIVnlianRjYmx4MGZWeHVYRzVjZEdacGJIUmxjazF2WkhWc1pTNXpkR0Z5ZEVWa2FYUnBibWRHYVd4MFpYSW9ZMjl1Wm1sbkxDQmpaV3hzVG05a1pTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVUVzkxYzJWRmJuUmxja05sYkd4WGFYUm9WR2wwYkdVb1pYWmxiblFzSUdOdmJtWnBaeWtnZTF4dVhIUjBiMjlzZEdsd1RXOWtkV3hsTG05dVRXOTFjMlZGYm5SbGNrTmxiR3hYYVhSb1ZHbDBiR1VvWTI5dVptbG5MQ0JsZG1WdWRDNTBZWEpuWlhRcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJrMXZkWE5sVEdWaGRtVkRaV3hzVjJsMGFGUnBkR3hsS0dWMlpXNTBMQ0JqYjI1bWFXY3BJSHRjYmx4MGRHOXZiSFJwY0UxdlpIVnNaUzV2YmsxdmRYTmxUR1ZoZG1WRFpXeHNWMmwwYUZScGRHeGxLR052Ym1acFp5d2daWFpsYm5RdWRHRnlaMlYwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRDaGpiMjVtYVdjcElIdGNibHgwWTI5dWRHRnBibVZ5SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZEYjI1MFlXbHVaWElwTzF4dVhHNWNkR2x1YzNSaGJtTmxjeTV2YmxOamNtOXNiRVYyWlc1MFNHRnVaR3hsY2lBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1NCN0lHOXVVMk55YjJ4c1JYWmxiblJJWVc1a2JHVnlLR1YyWlc1MExDQmpiMjVtYVdjcE95QjlPMXh1WEhScGJuTjBZVzVqWlhNdWIyNVhhR1ZsYkVWMlpXNTBTR0Z1Wkd4bGNpQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdJRzl1VjJobFpXeEZkbVZ1ZEVoaGJtUnNaWElvWlhabGJuUXNJR052Ym1acFp5azdJSDA3WEc1Y2RHbHVjM1JoYm1ObGN5NXZia05zYVdOclEyVnNiRVYyWlc1MFNHRnVaR3hsY2lBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1NCN0lHOXVRMnhwWTJ0RFpXeHNSWFpsYm5SSVlXNWtiR1Z5S0dWMlpXNTBMQ0JqYjI1bWFXY3BPeUI5TzF4dVhIUnBibk4wWVc1alpYTXViMjVEYkdsamExTmhkbVZDZFhSMGIyNUZkbVZ1ZEVoaGJtUnNaWElnUFNCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZXlCdmJrTnNhV05yVTJGMlpVSjFkSFJ2YmtWMlpXNTBTR0Z1Wkd4bGNpaGxkbVZ1ZEN3Z1kyOXVabWxuS1RzZ2ZUdGNibHgwYVc1emRHRnVZMlZ6TG05dVEyeHBZMnRUYjNKMFNHVmhaR1Z5SUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUhzZ2IyNURiR2xqYTFOdmNuUklaV0ZrWlhJb1pYWmxiblFzSUdOdmJtWnBaeWs3SUgwN1hHNWNkR2x1YzNSaGJtTmxjeTV2YmtOc2FXTnJSbWxzZEdWeVNHVmhaR1Z5SUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUhzZ2IyNURiR2xqYTBacGJIUmxja2hsWVdSbGNpaGxkbVZ1ZEN3Z1kyOXVabWxuS1RzZ2ZUdGNibHgwYVc1emRHRnVZMlZ6TG05dVRXOTFjMlZGYm5SbGNrTmxiR3hYYVhSb1ZHbDBiR1VnUFNCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZXlCdmJrMXZkWE5sUlc1MFpYSkRaV3hzVjJsMGFGUnBkR3hsS0dWMlpXNTBMQ0JqYjI1bWFXY3BPeUI5TzF4dVhIUnBibk4wWVc1alpYTXViMjVOYjNWelpVeGxZWFpsUTJWc2JGZHBkR2hVYVhSc1pTQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdJRzl1VFc5MWMyVk1aV0YyWlVObGJHeFhhWFJvVkdsMGJHVW9aWFpsYm5Rc0lHTnZibVpwWnlrN0lIMDdYRzVjYmx4MGFXWWdLR052Ym5SaGFXNWxjaUFoUFQwZ2JuVnNiQ2tnZTF4dVhIUmNkR052Ym5SaGFXNWxjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2QzYUdWbGJDY3NJR2x1YzNSaGJtTmxjeTV2Ymxkb1pXVnNSWFpsYm5SSVlXNWtiR1Z5TENCN0lIQmhjM05wZG1VNklHWmhiSE5sTENCallYQjBkWEpsT2lCMGNuVmxJSDBwTzF4dVhIUmNkR052Ym5SaGFXNWxjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R6WTNKdmJHd25MQ0JwYm5OMFlXNWpaWE11YjI1VFkzSnZiR3hGZG1WdWRFaGhibVJzWlhJcE8xeHVYSFI5WEc1Y2JseDBhV1lnS0dOdmJtWnBaeTV0YjJSMWJHVnpMblJ2YjJ4MGFYQXVaVzVoWW14bFpDa2dlMXh1WEhSY2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0oxdDBhWFJzWlYwbktTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVnNLU0I3WEc1Y2RGeDBYSFJsYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaV1Z1ZEdWeUp5d2dhVzV6ZEdGdVkyVnpMbTl1VFc5MWMyVkZiblJsY2tObGJHeFhhWFJvVkdsMGJHVXBPMXh1WEhSY2RGeDBaV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVnNaV0YyWlNjc0lHbHVjM1JoYm1ObGN5NXZiazF2ZFhObFRHVmhkbVZEWld4c1YybDBhRlJwZEd4bEtUdGNibHgwWEhSOUtUdGNibHgwZlZ4dVhHNWNkR2xtSUNoamIyNW1hV2N1WldScGRDNWxibUZpYkdWa0lDWW1JR052Ym1acFp5NXpaV3hsWTNSdmNuTXVjMkYyWlVKMWRIUnZiaUFoUFQwZ2JuVnNiQ2tnZTF4dVhIUmNkR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1ellYWmxRblYwZEc5dUtTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHbHVjM1JoYm1ObGN5NXZia05zYVdOclUyRjJaVUoxZEhSdmJrVjJaVzUwU0dGdVpHeGxjaWs3WEc1Y2RIMWNibHh1WEhScFppQW9ZMjl1Wm1sbkxtVmthWFF1Wlc1aFlteGxaQ2tnZTF4dVhIUmNkR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTRuSUNzZ1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1a1lYUmhWR0ZpYkdVZ0t5QW5JSFJrTGljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1SaGRHRkRaV3hzS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dWc0tTQjdYRzVjZEZ4MFhIUmxiQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR2x1YzNSaGJtTmxjeTV2YmtOc2FXTnJRMlZzYkVWMlpXNTBTR0Z1Wkd4bGNpazdYRzVjZEZ4MGZTazdYRzVjZEgxY2JseHVYSFJwWmlBb1kyOXVabWxuTG5OdmNuUXVaVzVoWW14bFpDa2dlMXh1WEhSY2RHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5TW5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NTFibWx4ZFdWSlpDQXJJQ2NnZEdRdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWMyOXlkRU5sYkd3cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXd3BJSHRjYmx4MFhIUmNkR1ZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnYVc1emRHRnVZMlZ6TG05dVEyeHBZMnRUYjNKMFNHVmhaR1Z5S1R0Y2JseDBYSFI5S1R0Y2JseDBmVnh1WEc1Y2RHbG1JQ2hqYjI1bWFXY3VabWxzZEdWeUxtVnVZV0pzWldRcElIdGNibHgwWEhSa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0Njakp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWRXNXBjWFZsU1dRZ0t5QW5JSFJrTGljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1acGJIUmxja05sYkd3cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXd3BJSHRjYmx4MFhIUmNkR1ZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnYVc1emRHRnVZMlZ6TG05dVEyeHBZMnRHYVd4MFpYSklaV0ZrWlhJcE8xeHVYSFJjZEgwcE8xeHVYSFI5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpTaGpiMjVtYVdjcElIdGNibHgwWTI5dWRHRnBibVZ5SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZEYjI1MFlXbHVaWElwTzF4dVhHNWNkR2xtSUNoamIyNTBZV2x1WlhJZ0lUMDlJRzUxYkd3cElIdGNibHgwWEhSamIyNTBZV2x1WlhJdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25kMmhsWld3bkxDQnBibk4wWVc1alpYTXViMjVYYUdWbGJFVjJaVzUwU0dGdVpHeGxjaWs3WEc1Y2RGeDBZMjl1ZEdGcGJtVnlMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNOamNtOXNiQ2NzSUdsdWMzUmhibU5sY3k1dmJsTmpjbTlzYkVWMlpXNTBTR0Z1Wkd4bGNpazdYRzVjZEgxY2JseHVYSFJwWmlBb1kyOXVabWxuTG0xdlpIVnNaWE11ZEc5dmJIUnBjQzVsYm1GaWJHVmtLU0I3WEc1Y2RGeDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XM1JwZEd4bFhTY3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aV3dwSUh0Y2JseDBYSFJjZEdWc0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObFpXNTBaWEluTENCcGJuTjBZVzVqWlhNdWIyNU5iM1Z6WlVWdWRHVnlRMlZzYkZkcGRHaFVhWFJzWlNrN1hHNWNkRngwWEhSbGJDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXeGxZWFpsSnl3Z2FXNXpkR0Z1WTJWekxtOXVUVzkxYzJWTVpXRjJaVU5sYkd4WGFYUm9WR2wwYkdVcE8xeHVYSFJjZEgwcE8xeHVYSFI5WEc1Y2JseDBhV1lnS0dOdmJtWnBaeTVsWkdsMExtVnVZV0pzWldRZ0ppWWdZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NXpZWFpsUW5WMGRHOXVJQ0U5UFNCdWRXeHNLU0I3WEc1Y2RGeDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loamIyNW1hV2N1YzJWc1pXTjBiM0p6TG5OaGRtVkNkWFIwYjI0cExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dhVzV6ZEdGdVkyVnpMbTl1UTJ4cFkydFRZWFpsUW5WMGRHOXVSWFpsYm5SSVlXNWtiR1Z5S1R0Y2JseDBmVnh1WEc1Y2RHbG1JQ2hqYjI1bWFXY3VaV1JwZEM1bGJtRmliR1ZrS1NCN1hHNWNkRngwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZVWVdKc1pTQXJJQ2NnZEdRdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVpHRjBZVU5sYkd3cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXd3BJSHRjYmx4MFhIUmNkR1ZzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z2FXNXpkR0Z1WTJWekxtOXVRMnhwWTJ0RFpXeHNSWFpsYm5SSVlXNWtiR1Z5S1R0Y2JseDBYSFI5S1R0Y2JseDBmVnh1WEc1Y2RHbG1JQ2hqYjI1bWFXY3VjMjl5ZEM1bGJtRmliR1ZrS1NCN1hHNWNkRngwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duSXljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG5WdWFYRjFaVWxrSUNzZ0p5QjBaQzRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTV6YjNKMFEyVnNiQ2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYkNrZ2UxeHVYSFJjZEZ4MFpXd3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JwYm5OMFlXNWpaWE11YjI1RGJHbGphMU52Y25SSVpXRmtaWElwTzF4dVhIUmNkSDBwTzF4dVhIUjlYRzVjYmx4MGFXWWdLR052Ym1acFp5NW1hV3gwWlhJdVpXNWhZbXhsWkNrZ2UxeHVYSFJjZEdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnlNbklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1MWJtbHhkV1ZKWkNBcklDY2dkR1F1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11Wm1sc2RHVnlRMlZzYkNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlobGJDa2dlMXh1WEhSY2RGeDBaV3d1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCcGJuTjBZVzVqWlhNdWIyNURiR2xqYTBacGJIUmxja2hsWVdSbGNpazdYRzVjZEZ4MGZTazdYRzVjZEgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEc1Y2RHbHVhWFE2SUdsdWFYUXNYRzVjZEhKbGJXOTJaVG9nY21WdGIzWmxYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJSFJoWW14bFRXOWtkV3hsSUNBZ1BTQnlaWEYxYVhKbEtDY3VMaTl0YjJSMWJHVnpMM1JoWW14bEp5a3NYRzVjZEhOdmNuUk5iMlIxYkdVZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TGk5dGIyUjFiR1Z6TDNOdmNuUW5LU3hjYmx4MFpHRjBZVlYwYVd3Z0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDJSaGRHRW5LU3hjYmx4MFkyOXVabWxuVlhScGJDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDJOdmJtWnBaM1Z5WVhScGIyNG5LU3hjYmx4MFkyVnNiRVZzWlcxbGJuUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyVnNaVzFsYm5SekwyTmxiR3duS1N4Y2JseDBabWxzZEdWeVJXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb0p5NHVMMlZzWlcxbGJuUnpMMlpwYkhSbGNpY3BPMXh1WEc1bWRXNWpkR2x2YmlCemRHRnlkRVZrYVhScGJtZEdhV3gwWlhJb1kyOXVabWxuTENCalpXeHNUbTlrWlNrZ2UxeHVYSFJwWmlBb1kyVnNiRTV2WkdVdWNYVmxjbmxUWld4bFkzUnZjaWduTGljZ0t5QmpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1acGJIUmxja052Ym5SaGFXNWxjaWtnSVQwOUlHNTFiR3dwSUh0Y2JseDBYSFJ5WlhSMWNtNDdYRzVjZEgxY2JseHVYSFIyWVhJZ1lYUjBjbWxpZFhSbElEMGdZMlZzYkU1dlpHVXVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV0YwZEhKcFluVjBaU2NwTEZ4dVhIUmNkR1pwYkhSbGNrOWlhaUE5SUdOdmJtWnBaeTVwYm01bGNpNW1hV3gwWlhKelcyRjBkSEpwWW5WMFpWMGdmSHdnZTMwc1hHNWNkRngwYUdWaFpHVnlUMkpxSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJJWldGa1pYSlBZbXBsWTNRb1kyOXVabWxuTENCaGRIUnlhV0oxZEdVcE8xeHVYRzVjZEdacGJIUmxjazlpYWk1aGRIUnlhV0oxZEdVZ1BTQmhkSFJ5YVdKMWRHVTdYRzVjZEdacGJIUmxjazlpYWk1a1lYUmhWSGx3WlNBOUlHaGxZV1JsY2s5aWFpNWtZWFJoVkhsd1pUdGNibHgwWm1sc2RHVnlUMkpxTG1acGJIUmxjbFI1Y0dVZ1BTQm9aV0ZrWlhKUFltb3VabWxzZEdWeVZIbHdaVHRjYmx4MFptbHNkR1Z5VDJKcUxuWmhiSFZsSUQwZ1ptbHNkR1Z5VDJKcUxuWmhiSFZsSUh4OElDY25PMXh1WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVtYVd4MFpYSnpXMkYwZEhKcFluVjBaVjBnUFNCbWFXeDBaWEpQWW1vN1hHNWNibHgwZG1GeUlHWnBiSFJsY2tOdmJuUmhhVzVsY2lBOUlHWnBiSFJsY2tWc1pXMWxiblF1WTNKbFlYUmxRMjl1ZEdGcGJtVnlLR052Ym1acFp5azdYRzVjYmx4MFkyVnNiRVZzWlcxbGJuUXVkWEJrWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJR05sYkd4T2IyUmxMQ0JtYVd4MFpYSkRiMjUwWVdsdVpYSXBPMXh1WEc1Y2RIWmhjaUJtYVd4MFpYSkpibkIxZENBOUlHWnBiSFJsY2tWc1pXMWxiblF1ZFhCa1lYUmxTVzV3ZFhRb1kyOXVabWxuTENCalpXeHNUbTlrWlN3Z1ptbHNkR1Z5VDJKcUxDQm9aV0ZrWlhKUFltb3NJR1pwYm1semFFVmthWFJwYm1kR2FXeDBaWElwTzF4dVhHNWNkR1pwYkhSbGNrbHVjSFYwTG1adlkzVnpLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1pwYkhSbGNpaGpiMjVtYVdjc0lITnZjblJCWm5SbGNrWnBiSFJsY21sdVp5a2dlMXh1WEhSemIzSjBRV1owWlhKR2FXeDBaWEpwYm1jZ1BTQnpiM0owUVdaMFpYSkdhV3gwWlhKcGJtY2dJVDA5SUdaaGJITmxPMXh1WEc1Y2RHTnZibVpwWnk1a1lYUmhVMjkxY21ObElEMGdZMjl1Wm1sbkxtbHVibVZ5TG05eWFXZHBibUZzUkdGMFlWTnZkWEpqWlR0Y2JseHVYSFJQWW1wbFkzUXVhMlY1Y3loamIyNW1hV2N1YVc1dVpYSXVabWxzZEdWeWN5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaHJaWGtwSUh0Y2JseDBYSFIyWVhJZ1ptbHNkR1Z5VDJKcUlEMGdZMjl1Wm1sbkxtbHVibVZ5TG1acGJIUmxjbk5iYTJWNVhUdGNibHh1WEhSY2RHbG1JQ2gwZVhCbGIyWWdabWxzZEdWeVQySnFMblpoYkhWbElEMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElHWnBiSFJsY2s5aWFpNTJZV3gxWlNBOVBUMGdKeWNwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvWm1sc2RHVnlUMkpxTG1acGJIUmxjbFI1Y0dVZ1BUMDlJQ2RqZFhOMGIyMG5LU0I3WEc1Y2RGeDBYSFJwWmlBb1kyOXVabWxuTG1acGJIUmxjaTVqZFhOMGIyMUdhV3gwWlhJZ0lUMDlJRzUxYkd3cElIdGNibHgwWEhSY2RGeDBZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVWdQU0JqYjI1bWFXY3VabWxzZEdWeUxtTjFjM1J2YlVacGJIUmxjaWg3WEc1Y2RGeDBYSFJjZEZ4MFpHRjBZVk52ZFhKalpUb2dZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVXNYRzVjZEZ4MFhIUmNkRngwWVhSMGNtbGlkWFJsT2lCbWFXeDBaWEpQWW1vdVlYUjBjbWxpZFhSbExGeHVYSFJjZEZ4MFhIUmNkSFpoYkhWbE9pQm1hV3gwWlhKUFltb3VkbUZzZFdVc1hHNWNkRngwWEhSY2RGeDBaV1JwZEdWa1ZtRnNkV1Z6T2lCamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6TEZ4dVhIUmNkRngwWEhSY2RIVnVhWEYxWlZKdmQwdGxlVG9nWTI5dVptbG5MblZ1YVhGMVpWSnZkMHRsZVZ4dVhIUmNkRngwWEhSOUtUdGNibHgwWEhSY2RIMWNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWTI5dVptbG5MbVJoZEdGVGIzVnlZMlVnUFNCa1lYUmhWWFJwYkM1bWFXeDBaWEpFWVhSaEtIdGNibHgwWEhSY2RGeDBaR0YwWVZOdmRYSmpaVG9nWTI5dVptbG5MbVJoZEdGVGIzVnlZMlVzWEc1Y2RGeDBYSFJjZEdGMGRISnBZblYwWlRvZ1ptbHNkR1Z5VDJKcUxtRjBkSEpwWW5WMFpTeGNibHgwWEhSY2RGeDBabWxzZEdWeVZIbHdaVG9nWm1sc2RHVnlUMkpxTG1acGJIUmxjbFI1Y0dVc1hHNWNkRngwWEhSY2RIWmhiSFZsVDI1bE9pQm1hV3gwWlhKUFltb3VkbUZzZFdVc1hHNWNkRngwWEhSY2RIWmhiSFZsVkhkdk9pQm1hV3gwWlhKUFltb3VkbUZzZFdWVWQyOHNYRzVjZEZ4MFhIUmNkR1ZrYVhSbFpGWmhiSFZsY3pvZ1kyOXVabWxuTG1sdWJtVnlMbVZrYVhSbFpGWmhiSFZsY3l4Y2JseDBYSFJjZEZ4MGRXNXBjWFZsVW05M1MyVjVPaUJqYjI1bWFXY3VkVzVwY1hWbFVtOTNTMlY1WEc1Y2RGeDBYSFI5S1R0Y2JseDBYSFI5WEc1Y2RIMHBPMXh1WEc1Y2RHWnBiSFJsY2s5MWRFVnRjSFI1VW05M2N5aGpiMjVtYVdjcE8xeHVYRzVjZEdsbUlDaHpiM0owUVdaMFpYSkdhV3gwWlhKcGJtY3BJSHRjYmx4MFhIUnpiM0owVFc5a2RXeGxMbk52Y25Rb1kyOXVabWxuTENCbVlXeHpaU2s3WEc1Y2RIMWNibHh1WEhSMFlXSnNaVTF2WkhWc1pTNTFjR1JoZEdWVVlXSnNaU2hqYjI1bWFXY3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpiR1ZoY2tacGJIUmxjaWhqYjI1bWFXY3NJR05sYkd4T2IyUmxLU0I3WEc1Y2RIWmhjaUJoZEhSeWFXSjFkR1VnUFNCalpXeHNUbTlrWlM1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFlYUjBjbWxpZFhSbEp5a3NYRzVjZEZ4MFkyVnNiRTlpYWlBOUlHTnZibVpwWjFWMGFXd3VaMlYwU0dWaFpHVnlUMkpxWldOMEtHTnZibVpwWnl3Z1lYUjBjbWxpZFhSbEtTeGNibHgwWEhSbWFXeDBaWEpQWW1vZ1BTQmpiMjVtYVdjdWFXNXVaWEl1Wm1sc2RHVnljMXRoZEhSeWFXSjFkR1ZkTzF4dVhHNWNkR1pwYkhSbGNrOWlhaTUyWVd4MVpTQTlJQ2NuTzF4dVhHNWNkSFpoY2lCdVpYZEdhV3gwWlhKeklEMGdlMzA3WEc1Y2JseDBUMkpxWldOMExtdGxlWE1vWTI5dVptbG5MbWx1Ym1WeUxtWnBiSFJsY25NcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2EyVjVLU0I3WEc1Y2RGeDBhV1lnS0d0bGVTQWhQVDBnWVhSMGNtbGlkWFJsS1NCN1hHNWNkRngwWEhSdVpYZEdhV3gwWlhKelcydGxlVjBnUFNCamIyNW1hV2N1YVc1dVpYSXVabWxzZEdWeWMxdHJaWGxkTzF4dVhIUmNkSDFjYmx4MGZTazdYRzVjYmx4MFkyOXVabWxuTG1sdWJtVnlMbVpwYkhSbGNuTWdQU0J1WlhkR2FXeDBaWEp6TzF4dVhHNWNkR1pwYm1semFFVmthWFJwYm1kR2FXeDBaWElvWTI5dVptbG5MQ0JqWld4c1RtOWtaU3dnWTJWc2JFOWlhaXdnWm1sc2RHVnlUMkpxS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sdWFYTm9SV1JwZEdsdVowWnBiSFJsY2loamIyNW1hV2NzSUdObGJHeE9iMlJsTENCalpXeHNUMkpxTENCbWFXeDBaWEpQWW1vcElIdGNibHgwWTJWc2JFVnNaVzFsYm5RdWRYQmtZWFJsUkdGMFlVTnZiblJoYVc1bGNpaGpiMjVtYVdjc0lHTmxiR3hPYjJSbExDQmpaV3hzUld4bGJXVnVkQzVqY21WaGRHVkdhV3gwWlhKRVlYUmhLR052Ym1acFp5d2dZMlZzYkU1dlpHVXNJR05sYkd4UFltb3NJR1pwYkhSbGNrOWlhaWtwTzF4dVhHNWNkR1pwYkhSbGNpaGpiMjVtYVdjcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCbWFXeDBaWEpQZFhSRmJYQjBlVkp2ZDNNb1kyOXVabWxuS1NCN1hHNWNkSFpoY2lCa2MweGxibWQwYUNBOUlHTnZibVpwWnk1a1lYUmhVMjkxY21ObExteGxibWQwYUR0Y2JseHVYSFJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdVpHRjBZVlJoWW14bElDc2dKeUIwY2k0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1a1lYUmhVbTkzS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hKdmR5d2djbTkzVG5WdFltVnlLU0I3WEc1Y2RGeDBjbTkzTG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKbFpFOTFkRkp2ZHl3Z1pITk1aVzVuZEdnZ1BEMGdjbTkzVG5WdFltVnlLVHRjYmx4MGZTazdYRzVjYmx4MEx5OGdSbWw0WldRZ1kyVnNiQ0JrWVhSaElISnZkeUIxY0dSaGRHVmNibHgwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtWnBlR1ZrVkdGaWJHVWdLeUFuSUhSeUxpY2dLeUJqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtUmhkR0ZTYjNjcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2NtOTNMQ0J5YjNkT2RXMWlaWElwSUh0Y2JseDBYSFJ5YjNjdVkyeGhjM05NYVhOMExuUnZaMmRzWlNoamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbVpwYkhSbGNtVmtUM1YwVW05M0xDQmtjMHhsYm1kMGFDQThQU0J5YjNkT2RXMWlaWElwTzF4dVhIUjlLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzVjZEhOMFlYSjBSV1JwZEdsdVowWnBiSFJsY2pvZ2MzUmhjblJGWkdsMGFXNW5SbWxzZEdWeUxGeHVYSFJtYVd4MFpYSTZJR1pwYkhSbGNpeGNibHgwWTJ4bFlYSkdhV3gwWlhJNklHTnNaV0Z5Um1sc2RHVnlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJR2RzYjJKaGJFTnZibVpwWnlBOUlISmxjWFZwY21Vb0p5NHVMMk52Ym1acFozTXZaMnh2WW1Gc0p5a3NYRzVjZEdWMlpXNTBjeUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12WlhabGJuUnpKeWtzWEc1Y2RIUmhZbXhsVFc5a2RXeGxJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdmRHRmliR1VuS1N4Y2JseDBZMjl1Wm1sblZYUnBiQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdlkyOXVabWxuZFhKaGRHbHZiaWNwTEZ4dVhIUmtZWFJoVlhScGJDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzY3k5a1lYUmhKeWtzWEc1Y2RHTmxiR3hGYkdWdFpXNTBJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyVnNaVzFsYm5SekwyTmxiR3duS1R0Y2JseHVablZ1WTNScGIyNGdaMlZ1WlhKaGRHVlVZV0pzWlNoamIyNW1hV2NzSUc5d2RHbHZibk1wSUh0Y2JseDBaMnh2WW1Gc1EyOXVabWxuTG1sdWFYUW9ZMjl1Wm1sbkxDQnZjSFJwYjI1ektUdGNibHh1WEhScGJtbDBRMjl1ZEdGcGJtVnljeWhqYjI1bWFXY3BPMXh1WEhScGJtbDBWR0ZpYkdVb1kyOXVabWxuS1R0Y2JseHVYSFIwWVdKc1pVMXZaSFZzWlM1MWNHUmhkR1ZVWVdKc1pTaGpiMjVtYVdjcE8xeHVYRzVjZEdWMlpXNTBjeTVwYm1sMEtHTnZibVpwWnlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdSbGMzUnliM2xVWVdKc1pTaGpiMjVtYVdjcElIdGNibHgwWlhabGJuUnpMbkpsYlc5MlpTaGpiMjVtYVdjcE8xeHVYRzVjZEhSaFlteGxUVzlrZFd4bExtUmxjM1J5YjNsVVlXSnNaU2hqYjI1bWFXY3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibWwwUTI5dWRHRnBibVZ5Y3loamIyNW1hV2NwSUh0Y2JseDBkbUZ5SUcxaGFXNURiMjUwWVdsdVpYSWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHTnZibVpwWnk1elpXeGxZM1J2Y25NdWJXRnBia052Ym5SaGFXNWxjaWtzWEc1Y2RGeDBaR0YwWVVOdmJuUmhhVzVsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJScGRpY3BMRnh1WEhSY2RHUmhkR0ZJWldGa1pYSkRiMjUwWVdsdVpYSWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1N4Y2JseDBYSFJrWVhSaFZHRmliR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwWVdKc1pTY3BMRnh1WEhSY2RHUmhkR0ZJWldGa1pYSlVZV0pzWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNSaFlteGxKeWtzWEc1Y2RGeDBabWw0WldSRGIyNTBZV2x1WlhJZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LU3hjYmx4MFhIUm1hWGhsWkVobFlXUmxja052Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcExGeHVYSFJjZEdacGVHVmtWR0ZpYkdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMFlXSnNaU2NwTEZ4dVhIUmNkR1pwZUdWa1NHVmhaR1Z5VkdGaWJHVWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBZV0pzWlNjcE8xeHVYRzVjZEcxaGFXNURiMjUwWVdsdVpYSXVjMlYwUVhSMGNtbGlkWFJsS0NkcFpDY3NJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWRXNXBjWFZsU1dRcE8xeHVYRzVjZEdSaGRHRkRiMjUwWVdsdVpYSXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YzJWc1pXTjBiM0p6TG1SaGRHRkRiMjUwWVdsdVpYSXBPMXh1WEhSa1lYUmhTR1ZoWkdWeVEyOXVkR0ZwYm1WeUxtTnNZWE56VEdsemRDNWhaR1FvWTI5dVptbG5Mbk5sYkdWamRHOXljeTVrWVhSaFNHVmhaR1Z5UTI5dWRHRnBibVZ5S1R0Y2JseDBaR0YwWVZSaFlteGxMbU5zWVhOelRHbHpkQzVoWkdRb1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1a1lYUmhWR0ZpYkdVcE8xeHVYSFJrWVhSaFNHVmhaR1Z5VkdGaWJHVXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YzJWc1pXTjBiM0p6TG1SaGRHRklaV0ZrWlhKVVlXSnNaU2s3WEc1Y2RHWnBlR1ZrUTI5dWRHRnBibVZ5TG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NW1hWGhsWkVOdmJuUmhhVzVsY2lrN1hHNWNkR1pwZUdWa1NHVmhaR1Z5UTI5dWRHRnBibVZ5TG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NW1hWGhsWkVobFlXUmxja052Ym5SaGFXNWxjaWs3WEc1Y2RHWnBlR1ZrVkdGaWJHVXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YzJWc1pXTjBiM0p6TG1acGVHVmtWR0ZpYkdVcE8xeHVYSFJtYVhobFpFaGxZV1JsY2xSaFlteGxMbU5zWVhOelRHbHpkQzVoWkdRb1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1bWFYaGxaRWhsWVdSbGNsUmhZbXhsS1R0Y2JseHVYSFJ0WVdsdVEyOXVkR0ZwYm1WeUxtRndjR1Z1WkVOb2FXeGtLR1pwZUdWa1NHVmhaR1Z5UTI5dWRHRnBibVZ5S1R0Y2JseDBabWw0WldSSVpXRmtaWEpEYjI1MFlXbHVaWEl1WVhCd1pXNWtRMmhwYkdRb1ptbDRaV1JJWldGa1pYSlVZV0pzWlNrN1hHNWNibHgwYldGcGJrTnZiblJoYVc1bGNpNWhjSEJsYm1SRGFHbHNaQ2hrWVhSaFNHVmhaR1Z5UTI5dWRHRnBibVZ5S1R0Y2JseDBaR0YwWVVobFlXUmxja052Ym5SaGFXNWxjaTVoY0hCbGJtUkRhR2xzWkNoa1lYUmhTR1ZoWkdWeVZHRmliR1VwTzF4dVhHNWNkRzFoYVc1RGIyNTBZV2x1WlhJdVlYQndaVzVrUTJocGJHUW9abWw0WldSRGIyNTBZV2x1WlhJcE8xeHVYSFJtYVhobFpFTnZiblJoYVc1bGNpNWhjSEJsYm1SRGFHbHNaQ2htYVhobFpGUmhZbXhsS1R0Y2JseHVYSFJ0WVdsdVEyOXVkR0ZwYm1WeUxtRndjR1Z1WkVOb2FXeGtLR1JoZEdGRGIyNTBZV2x1WlhJcE8xeHVYSFJrWVhSaFEyOXVkR0ZwYm1WeUxtRndjR1Z1WkVOb2FXeGtLR1JoZEdGVVlXSnNaU2s3WEc1Y2JseDBaR0YwWVVOdmJuUmhhVzVsY2k1emRIbHNaUzV0WVhoSVpXbG5hSFFnUFNCamIyNW1hV2N1WkdsdFpXNXphVzl1Y3k1amIyNTBZV2x1WlhKSVpXbG5hSFFnS3lBbmNIZ25PMXh1WEhSa1lYUmhRMjl1ZEdGcGJtVnlMbk4wZVd4bExtaGxhV2RvZENBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTnZiblJoYVc1bGNraGxhV2RvZENBcklDZHdlQ2M3WEc1Y2JseDBabWw0WldSRGIyNTBZV2x1WlhJdWMzUjViR1V1YldGNFNHVnBaMmgwSUQwZ1kyOXVabWxuTG1ScGJXVnVjMmx2Ym5NdVkyOXVkR0ZwYm1WeVNHVnBaMmgwSUNzZ0ozQjRKenRjYmx4MFptbDRaV1JEYjI1MFlXbHVaWEl1YzNSNWJHVXVhR1ZwWjJoMElEMGdZMjl1Wm1sbkxtUnBiV1Z1YzJsdmJuTXVZMjl1ZEdGcGJtVnlTR1ZwWjJoMElDc2dKM0I0Snp0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRGUmhZbXhsS0dOdmJtWnBaeWtnZTF4dVhIUXZMeUJIWlc1bGNtRjBaU0IyYVhKMGRXRnNJSFJoWW14bFhHNWNkSFpoY2lCMmFYSjBkV0ZzVkdobFlXUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBhR1ZoWkNjcExGeHVYSFJjZEhacGNuUjFZV3hVWW05a2VTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUmliMlI1Snlrc1hHNWNkRngwWTI5c2RXMXVjMDUxYldKbGNpQTlJR052Ym1acFoxVjBhV3d1WjJWMFMyVjVTR1ZoWkdWeUtHTnZibVpwWnlrdWJHVnVaM1JvTEZ4dVhIUmNkSEp2ZDNOT2RXMWlaWElnUFNCamIyNW1hV2N1WkdGMFlWTnZkWEpqWlM1c1pXNW5kR2c3WEc1Y2JseDBkbUZ5SUdrc0lHb3NJSFJ5U0dWaFpDd2dkSEpDYjJSNUxDQjBaRVZzWlcxbGJuUXNJR05sYkd4UFltb3NJR05sYkd4RVlYUmhPMXh1WEc1Y2RDOHZJRWRsYm1WeVlYUmxJSFpwY25SMVlXd2dhR1ZoWkdWeVhHNWNkR052Ym1acFp5NW9aV0ZrWlhKekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2FHVmhaR1Z5VW05M0xDQnliM2REYjNWdWRDa2dlMXh1WEhSY2RIWmhjaUJwYzB4aGMzUlNiM2NnUFNCamIyNW1hV2N1YVc1dVpYSXVhVzVrWlhoUFprTmxiR3hMWlhsSVpXRmtaWElnUFQwOUlISnZkME52ZFc1ME8xeHVYRzVjZEZ4MGRISklaV0ZrSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEhJbktUdGNibHgwWEhSMGNraGxZV1F1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1obFlXUmxjbEp2ZHlrN1hHNWNkRngwZEhKSVpXRmtMbk4wZVd4bExtaGxhV2RvZENBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hJWldsbmFIUWdLeUFuY0hnbk8xeHVYRzVjZEZ4MFptOXlJQ2hxSUQwZ01Ec2dhaUE4SUdOdmJIVnRibk5PZFcxaVpYSTdJR29yS3lrZ2UxeHVYSFJjZEZ4MFkyVnNiRTlpYWlBOUlHaGxZV1JsY2xKdmQxdHFYVHRjYmx4MFhIUmNkR05sYkd4RVlYUmhJRDBnWTJWc2JFVnNaVzFsYm5RdVkzSmxZWFJsU0dWaFpHVnlSR0YwWVNoamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZEN3Z1kyVnNiRTlpYWl3Z2FYTk1ZWE4wVW05M0tUdGNibHh1WEhSY2RGeDBkR1JGYkdWdFpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25kR1FuS1R0Y2JseDBYSFJjZEhSa1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWFHVmhaR1Z5UTJWc2JDazdYRzVjYmx4MFhIUmNkR05sYkd4RmJHVnRaVzUwTG1OeVpXRjBaVVJoZEdGRGIyNTBZV2x1WlhJb1kyOXVabWxuTENCMFpFVnNaVzFsYm5Rc0lHTmxiR3hQWW1vc0lHTmxiR3hFWVhSaEtUdGNibHh1WEhSY2RGeDBhV1lnS0dselRHRnpkRkp2ZHlrZ2UxeHVYSFJjZEZ4MFhIUjBaRVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoamIyNW1hV2N1YVc1dVpYSXVjMlZzWldOMGIzSnpMbk52Y25SRFpXeHNLVHRjYmx4dVhIUmNkRngwWEhScFppQW9JV052Ym1acFp5NXpiM0owTG1WdVlXSnNaV1FnZkh3Z2FHVmhaR1Z5VW05M1cycGRMbk52Y25SRWFYTmhZbXhsWkNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJrUld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11YzI5eWRFUnBjMkZpYkdWa0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFIwY2tobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEdSRmJHVnRaVzUwS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCQklITmpjbTlzYkdKeUlHMXBZWFIwYVNCb1pXeDVhR25Eb1c1NUlHMXBZWFIwSUhaaGJpQnplc084YTNQRHFXY2dZbVZ6ZXNPNmNtNXBJR0VnZHNPcFo4T3BjbVZjYmx4MFhIUjBaRVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBaQ2NwTzF4dVhIUmNkSFJrUld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WW5WbVptVnlTR1ZoWkdWeVEyVnNiQ2s3WEc1Y2JseDBYSFIwY2tobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEdSRmJHVnRaVzUwS1R0Y2JseHVYSFJjZEhacGNuUjFZV3hVYUdWaFpDNWhjSEJsYm1SRGFHbHNaQ2gwY2tobFlXUXBPMXh1WEhSOUtUdGNibHh1WEhRdkx5QkhaVzVsY21GMFpTQjJhWEowZFdGc0lHWnBiSFJsY2lCeWIzZGNibHgwYVdZZ0tHTnZibVpwWnk1bWFXeDBaWEl1Wlc1aFlteGxaQ2tnZTF4dVhIUmNkSFJ5U0dWaFpDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUnlKeWs3WEc1Y2RGeDBkSEpJWldGa0xtTnNZWE56VEdsemRDNWhaR1FvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKU2IzY3BPMXh1WEhSY2RIUnlTR1ZoWkM1emRIbHNaUzVvWldsbmFIUWdQU0JqYjI1bWFXY3VaR2x0Wlc1emFXOXVjeTVqWld4c1NHVnBaMmgwSUNzZ0ozQjRKenRjYmx4dVhIUmNkR1p2Y2lBb2FpQTlJREE3SUdvZ1BDQmpiMngxYlc1elRuVnRZbVZ5T3lCcUt5c3BJSHRjYmx4MFhIUmNkR05sYkd4UFltb2dQU0JqYjI1bWFXZFZkR2xzTG1kbGRFdGxlVWhsWVdSbGNpaGpiMjVtYVdjcFcycGRPMXh1WEhSY2RGeDBZMlZzYkVSaGRHRWdQU0JqWld4c1JXeGxiV1Z1ZEM1amNtVmhkR1ZJWldGa1pYSkVZWFJoS0dOdmJtWnBaeXdnZEdSRmJHVnRaVzUwTENCalpXeHNUMkpxTENCN2ZTazdYRzVjYmx4MFhIUmNkSFJrUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JrSnlrN1hHNWNkRngwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tObGJHd3BPMXh1WEc1Y2RGeDBYSFJqWld4c1JXeGxiV1Z1ZEM1amNtVmhkR1ZFWVhSaFEyOXVkR0ZwYm1WeUtHTnZibVpwWnl3Z2RHUkZiR1Z0Wlc1MExDQmpaV3hzVDJKcUxDQmpaV3hzUkdGMFlTazdYRzVjYmx4MFhIUmNkR2xtSUNoalpXeHNUMkpxTG1acGJIUmxja1JwYzJGaWJHVmtLU0I3WEc1Y2RGeDBYSFJjZEhSa1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVptbHNkR1Z5UkdsellXSnNaV1FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSMGNraGxZV1F1WVhCd1pXNWtRMmhwYkdRb2RHUkZiR1Z0Wlc1MEtUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkJJSE5qY205c2JHSnlJRzFwWVhSMGFTQm9aV3g1YUduRG9XNTVJRzFwWVhSMElIWmhiaUJ6ZXNPOGEzUERxV2NnWW1WemVzTzZjbTVwSUdFZ2RzT3BaOE9wY21WY2JseDBYSFIwWkVWc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwWkNjcE8xeHVYSFJjZEhSa1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVluVm1abVZ5U0dWaFpHVnlRMlZzYkNrN1hHNWNibHgwWEhSMGNraGxZV1F1WVhCd1pXNWtRMmhwYkdRb2RHUkZiR1Z0Wlc1MEtUdGNibHh1WEhSY2RIWnBjblIxWVd4VWFHVmhaQzVoY0hCbGJtUkRhR2xzWkNoMGNraGxZV1FwTzF4dVhIUjlYRzVjYmx4MEx5OGdSMlZ1WlhKaGRHVWdkbWx5ZEhWaGJDQmliMlI1WEc1Y2RHWnZjaUFvYVNBOUlEQTdJR2tnUENCeWIzZHpUblZ0WW1WeU95QnBLeXNwSUh0Y2JseDBYSFIwY2tKdlpIa2dQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBjaWNwTzF4dVhIUmNkSFJ5UW05a2VTNWpiR0Z6YzB4cGMzUXVZV1JrS0dOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVaR0YwWVZKdmR5azdYRzVjZEZ4MGRISkNiMlI1TG5OMGVXeGxMbWhsYVdkb2RDQTlJR052Ym1acFp5NWthVzFsYm5OcGIyNXpMbU5sYkd4SVpXbG5hSFFnS3lBbmNIZ25PMXh1WEc1Y2RGeDBabTl5SUNocUlEMGdNRHNnYWlBOElHTnZiSFZ0Ym5OT2RXMWlaWEk3SUdvckt5a2dlMXh1WEhSY2RGeDBZMlZzYkU5aWFpQTlJR052Ym1acFoxVjBhV3d1WjJWMFMyVjVTR1ZoWkdWeUtHTnZibVpwWnlsYmFsMDdYRzVjYmx4MFhIUmNkSFJrUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JrSnlrN1hHNWNkRngwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtUmhkR0ZEWld4c0tUdGNibHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZEN3Z1kyVnNiRTlpYWlrN1hHNWNibHgwWEhSY2RIUnlRbTlrZVM1aGNIQmxibVJEYUdsc1pDaDBaRVZzWlcxbGJuUXBPMXh1WEhSY2RIMWNibHh1WEhSY2RIWnBjblIxWVd4VVltOWtlUzVoY0hCbGJtUkRhR2xzWkNoMGNrSnZaSGtwTzF4dVhIUjlYRzVjYmx4MFpHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZJWldGa1pYSlVZV0pzWlNrdVlYQndaVzVrUTJocGJHUW9kbWx5ZEhWaGJGUm9aV0ZrS1R0Y2JseDBaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxpY2dLeUJqYjI1bWFXY3VjMlZzWldOMGIzSnpMbVJoZEdGVVlXSnNaU2t1WVhCd1pXNWtRMmhwYkdRb2RtbHlkSFZoYkZSaWIyUjVLVHRjYmx4dVhIUXZMeUJIWlc1bGNtRjBaU0JtYVhobFpDQjBZV0pzWlZ4dVhHNWNkR2xtSUNoamIyNW1hV2N1Wm1sNFpXUklaV0ZrWlhKekxteGxibWQwYUNBOVBUMGdNQ0I4ZkNCamIyNW1hV2N1Wm1sNFpXUklaV0ZrWlhKeld6QmRMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVYSFJjZEdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTRuSUNzZ1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1bWFYaGxaRWhsWVdSbGNsUmhZbXhsS1M1eVpXMXZkbVVvS1R0Y2JseDBYSFJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VKeUFySUdOdmJtWnBaeTV6Wld4bFkzUnZjbk11Wm1sNFpXUklaV0ZrWlhKRGIyNTBZV2x1WlhJcExuSmxiVzkyWlNncE8xeHVYSFJjZEdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTRuSUNzZ1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1bWFYaGxaRlJoWW14bEtTNXlaVzF2ZG1Vb0tUdGNibHgwWEhSa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdVptbDRaV1JEYjI1MFlXbHVaWElwTG5KbGJXOTJaU2dwTzF4dVhHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwZG1GeUlHWnBlR1ZrVkdobFlXUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBhR1ZoWkNjcExGeHVYSFJjZEdacGVHVmtWR0p2WkhrZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMFltOWtlU2NwTzF4dVhHNWNkQzh2SUVkbGJtVnlZWFJsSUdacGVHVmtJR2hsWVdSbGNseHVYRzVjZEdadmNpQW9hU0E5SURBN0lHa2dQQ0JqYjI1bWFXY3VabWw0WldSSVpXRmtaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYRzVjZEZ4MGRISklaV0ZrSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEhJbktUdGNibHgwWEhSMGNraGxZV1F1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1obFlXUmxjbEp2ZHlrN1hHNWNkRngwZEhKSVpXRmtMbk4wZVd4bExtaGxhV2RvZENBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hJWldsbmFIUWdLeUFuY0hnbk8xeHVYRzVjZEZ4MFptOXlJQ2hxSUQwZ01Ec2dhaUE4SUdOdmJtWnBaeTVtYVhobFpFaGxZV1JsY25OYmFWMHViR1Z1WjNSb095QnFLeXNwSUh0Y2JseDBYSFJjZEhaaGNpQnBjMHhoYzNSU2IzY2dQU0JxSUQwOVBTQmpiMjVtYVdjdVptbDRaV1JJWldGa1pYSnpXMmxkTG14bGJtZDBhQ0F0SURFN1hHNWNibHgwWEhSY2RHTmxiR3hQWW1vZ1BTQmpiMjVtYVdjdVptbDRaV1JJWldGa1pYSnpXMmxkVzJwZE8xeHVYSFJjZEZ4MFkyVnNiRVJoZEdFZ1BTQmpaV3hzUld4bGJXVnVkQzVqY21WaGRHVklaV0ZrWlhKRVlYUmhLR052Ym1acFp5d2dkR1JGYkdWdFpXNTBMQ0JqWld4c1QySnFMQ0JwYzB4aGMzUlNiM2NwTzF4dVhHNWNkRngwWEhSMFpFVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkMFpDY3BPMXh1WEhSY2RGeDBkR1JGYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVvWldGa1pYSkRaV3hzS1R0Y2JseHVYSFJjZEZ4MFkyVnNiRVZzWlcxbGJuUXVZM0psWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJSFJrUld4bGJXVnVkQ3dnWTJWc2JFOWlhaXdnWTJWc2JFUmhkR0VwTzF4dVhHNWNkRngwWEhScFppQW9hWE5NWVhOMFVtOTNLU0I3WEc1Y2RGeDBYSFJjZEhSa1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWMyOXlkRU5sYkd3cE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNnaFkyOXVabWxuTG5OdmNuUXVaVzVoWW14bFpDQjhmQ0JqYjI1bWFXY3VabWw0WldSSVpXRmtaWEp6VzJsZFcycGRMbk52Y25SRWFYTmhZbXhsWkNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJrUld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11YzI5eWRFUnBjMkZpYkdWa0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFIwY2tobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvZEdSRmJHVnRaVzUwS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJtYVhobFpGUm9aV0ZrTG1Gd2NHVnVaRU5vYVd4a0tIUnlTR1ZoWkNrN1hHNWNkSDFjYmx4dVhIUXZMeUJIWlc1bGNtRjBaU0JtYVhobFpDQm1hV3gwWlhJZ2NtOTNYRzVjYmx4MGFXWWdLR052Ym1acFp5NW1hV3gwWlhJdVpXNWhZbXhsWkNBbUpseHVYSFJjZEdOdmJtWnBaeTVtYVhobFpFaGxZV1JsY25NdWJHVnVaM1JvSUQ0Z01DQW1KbHh1WEhSY2RHTnZibVpwWnk1bWFYaGxaRWhsWVdSbGNuTmJZMjl1Wm1sbkxtbHVibVZ5TG1sdVpHVjRUMlpEWld4c1MyVjVTR1ZoWkdWeVhTNXNaVzVuZEdnZ1BpQXdLU0I3WEc1Y2JseDBYSFIwY2tobFlXUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBjaWNwTzF4dVhIUmNkSFJ5U0dWaFpDNWpiR0Z6YzB4cGMzUXVZV1JrS0dOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVabWxzZEdWeVVtOTNLVHRjYmx4MFhIUjBja2hsWVdRdWMzUjViR1V1YUdWcFoyaDBJRDBnWTI5dVptbG5MbVJwYldWdWMybHZibk11WTJWc2JFaGxhV2RvZENBcklDZHdlQ2M3WEc1Y2JseDBYSFJtYjNJZ0tHb2dQU0F3T3lCcUlEd2dZMjl1Wm1sbkxtWnBlR1ZrU0dWaFpHVnljMXRqYjI1bWFXY3VhVzV1WlhJdWFXNWtaWGhQWmtObGJHeExaWGxJWldGa1pYSmRMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNWNkRngwWEhSalpXeHNUMkpxSUQwZ1kyOXVabWxuVlhScGJDNW5aWFJHYVhobFpFdGxlVWhsWVdSbGNpaGpiMjVtYVdjcFcycGRPMXh1WEhSY2RGeDBZMlZzYkVSaGRHRWdQU0JqWld4c1JXeGxiV1Z1ZEM1amNtVmhkR1ZHYVd4MFpYSkVZWFJoS0dOdmJtWnBaeXdnZEdSRmJHVnRaVzUwTENCalpXeHNUMkpxTENCN2ZTazdYRzVjYmx4MFhIUmNkSFJrUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM1JrSnlrN1hHNWNkRngwWEhSMFpFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tObGJHd3BPMXh1WEhSY2RGeDBkR1JGYkdWdFpXNTBMbk4wZVd4bExtMXBibGRwWkhSb0lEMGdZMjl1Wm1sbkxtUnBiV1Z1YzJsdmJuTXVZMlZzYkZkcFpIUm9JQ3NnSjNCNEp6dGNibHh1WEhSY2RGeDBZMlZzYkVWc1pXMWxiblF1WTNKbFlYUmxSR0YwWVVOdmJuUmhhVzVsY2loamIyNW1hV2NzSUhSa1JXeGxiV1Z1ZEN3Z1kyVnNiRTlpYWl3Z1kyVnNiRVJoZEdFcE8xeHVYRzVjZEZ4MFhIUnBaaUFvWTJWc2JFOWlhaTVtYVd4MFpYSkVhWE5oWW14bFpDa2dlMXh1WEhSY2RGeDBYSFIwWkVWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpiMjVtYVdjdWFXNXVaWEl1YzJWc1pXTjBiM0p6TG1acGJIUmxja1JwYzJGaWJHVmtLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwZEhKSVpXRmtMbUZ3Y0dWdVpFTm9hV3hrS0hSa1JXeGxiV1Z1ZENrN1hHNWNkRngwZlZ4dVhHNWNkRngwWm1sNFpXUlVhR1ZoWkM1aGNIQmxibVJEYUdsc1pDaDBja2hsWVdRcE8xeHVYSFI5WEc1Y2JseDBMeThnUjJWdVpYSmhkR1VnWm1sNFpXUWdZbTlrZVZ4dVhHNWNkR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnliM2R6VG5WdFltVnlPeUJwS3lzcElIdGNibHgwWEhSMGNrSnZaSGtnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwY2ljcE8xeHVYSFJjZEhSeVFtOWtlUzVqYkdGemMweHBjM1F1WVdSa0tHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11WkdGMFlWSnZkeWs3WEc1Y2RGeDBkSEpDYjJSNUxuTjBlV3hsTG1obGFXZG9kQ0E5SUdOdmJtWnBaeTVrYVcxbGJuTnBiMjV6TG1ObGJHeElaV2xuYUhRZ0t5QW5jSGduTzF4dVhHNWNkRngwWm05eUlDaHFJRDBnTURzZ2FpQThJR052Ym1acFp5NW1hWGhsWkVobFlXUmxjbk5iWTI5dVptbG5MbWx1Ym1WeUxtbHVaR1Y0VDJaRFpXeHNTMlY1U0dWaFpHVnlYUzVzWlc1bmRHZzdJR29yS3lrZ2UxeHVYSFJjZEZ4MFkyVnNiRTlpYWlBOUlHTnZibVpwWjFWMGFXd3VaMlYwUm1sNFpXUkxaWGxJWldGa1pYSW9ZMjl1Wm1sbktWdHFYVHRjYmx4dVhIUmNkRngwZEdSRmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEdRbktUdGNibHgwWEhSY2RIUmtSV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVZV1JrS0dOdmJtWnBaeTVwYm01bGNpNXpaV3hsWTNSdmNuTXVaR0YwWVVObGJHd3BPMXh1WEc1Y2RGeDBYSFJqWld4c1JXeGxiV1Z1ZEM1amNtVmhkR1ZFWVhSaFEyOXVkR0ZwYm1WeUtHTnZibVpwWnl3Z2RHUkZiR1Z0Wlc1MExDQmpaV3hzVDJKcUtUdGNibHh1WEhSY2RGeDBkSEpDYjJSNUxtRndjR1Z1WkVOb2FXeGtLSFJrUld4bGJXVnVkQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBabWw0WldSVVltOWtlUzVoY0hCbGJtUkRhR2xzWkNoMGNrSnZaSGtwTzF4dVhIUjlYRzVjYmx4MFpHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtWnBlR1ZrU0dWaFpHVnlWR0ZpYkdVcExtRndjR1Z1WkVOb2FXeGtLR1pwZUdWa1ZHaGxZV1FwTzF4dVhIUmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdUp5QXJJR052Ym1acFp5NXpaV3hsWTNSdmNuTXVabWw0WldSVVlXSnNaU2t1WVhCd1pXNWtRMmhwYkdRb1ptbDRaV1JVWW05a2VTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVJsWm1GMWJIUlBjSFJwYjI1ektDa2dlMXh1WEhSeVpYUjFjbTRnWkdGMFlWVjBhV3d1WTJ4dmJtVlBZbXBsWTNRb1oyeHZZbUZzUTI5dVptbG5Ma1JGUmtGVlRGUlRLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzVjZEdkbGJtVnlZWFJsVkdGaWJHVTZJR2RsYm1WeVlYUmxWR0ZpYkdVc1hHNWNkR1JsYzNSeWIzbFVZV0pzWlRvZ1pHVnpkSEp2ZVZSaFlteGxMRnh1WEhSblpYUkVaV1poZFd4MFQzQjBhVzl1Y3pvZ1oyVjBSR1ZtWVhWc2RFOXdkR2x2Ym5OY2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RHRmliR1ZOYjJSMWJHVWdQU0J5WlhGMWFYSmxLQ2N1TGk5dGIyUjFiR1Z6TDNSaFlteGxKeWtzWEc1Y2RHTnZibVpwWjFWMGFXd2dJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE12WTI5dVptbG5kWEpoZEdsdmJpY3BMRnh1WEhSa1lYUmhWWFJwYkNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR1TDNWMGFXeHpMMlJoZEdFbktUdGNibHh1Wm5WdVkzUnBiMjRnYzI5eWRFSjVRMjlzZFcxdUtHTnZibVpwWnl3Z1kyOXNkVzF1S1NCN1hHNWNkSFpoY2lCaGRIUnlhV0oxZEdVZ1BTQmpiMngxYlc0dVoyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXRjBkSEpwWW5WMFpTY3BMRnh1WEhSY2RHaGxZV1JsY2s5aWFpQTlJR052Ym1acFoxVjBhV3d1WjJWMFNHVmhaR1Z5VDJKcVpXTjBLR052Ym1acFp5d2dZWFIwY21saWRYUmxLU3hjYmx4MFhIUmthWEpsWTNScGIyNGdQU0FuZFhBbk8xeHVYRzVjZEdsbUlDaGpiMjVtYVdjdWFXNXVaWEl1YzI5eWRDNWhkSFJ5YVdKMWRHVWdQVDA5SUdGMGRISnBZblYwWlNBbUpseHVYSFJjZEdOdmJtWnBaeTVwYm01bGNpNXpiM0owTG1ScGNtVmpkR2x2YmlBOVBUMGdKM1Z3SnlrZ2UxeHVYRzVjZEZ4MFpHbHlaV04wYVc5dUlEMGdKMlJ2ZDI0bk8xeHVYSFI5WEc1Y2JseDBZMjl1Wm1sbkxtbHVibVZ5TG5OdmNuUXVaR2x5WldOMGFXOXVJRDBnWkdseVpXTjBhVzl1TzF4dVhIUmpiMjVtYVdjdWFXNXVaWEl1YzI5eWRDNWhkSFJ5YVdKMWRHVWdQU0JoZEhSeWFXSjFkR1U3WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTV6YjNKMExtUmhkR0ZVZVhCbElEMGdhR1ZoWkdWeVQySnFMbVJoZEdGVWVYQmxPMXh1WEc1Y2RITnZjblFvWTI5dVptbG5LVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMjl5ZENoamIyNW1hV2NzSUhWd1pHRjBaVlJoWW14bEtTQjdYRzVjZEhWd1pHRjBaVlJoWW14bElEMGdkWEJrWVhSbFZHRmliR1VnSVQwOUlHWmhiSE5sTzF4dVhHNWNkR052Ym1acFp5NWtZWFJoVTI5MWNtTmxMbk52Y25Rb1puVnVZM1JwYjI0b1lTd2dZaWtnZTF4dVhIUmNkR2xtSUNoamIyNW1hV2N1YzI5eWRDNWpkWE4wYjIxVGIzSjBJQ0U5UFNCdWRXeHNLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdZMjl1Wm1sbkxuTnZjblF1WTNWemRHOXRVMjl5ZENoaExDQmlMQ0I3WEc1Y2RGeDBYSFJjZEdGMGRISnBZblYwWlRvZ1kyOXVabWxuTG1sdWJtVnlMbk52Y25RdVlYUjBjbWxpZFhSbExGeHVYSFJjZEZ4MFhIUmthWEpsWTNScGIyNDZJR052Ym1acFp5NXBibTVsY2k1emIzSjBMbVJwY21WamRHbHZiaXhjYmx4MFhIUmNkRngwWkdGMFlWUjVjR1U2SUdOdmJtWnBaeTVwYm01bGNpNXpiM0owTG1SaGRHRlVlWEJsTEZ4dVhIUmNkRngwWEhSbFpHbDBaV1JXWVd4MVpYTTZJR052Ym1acFp5NXBibTVsY2k1bFpHbDBaV1JXWVd4MVpYTXNYRzVjZEZ4MFhIUmNkSFZ1YVhGMVpWSnZkMHRsZVRvZ1kyOXVabWxuTG5WdWFYRjFaVkp2ZDB0bGVWeHVYSFJjZEZ4MGZTazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRtRnlJR0YwZEhKcFluVjBaU0E5SUdOdmJtWnBaeTVwYm01bGNpNXpiM0owTG1GMGRISnBZblYwWlNCOGZDQmpiMjVtYVdjdWMyOXlkQzVrWldaaGRXeDBMRnh1WEhSY2RGeDBaR2x5WldOMGFXOXVJRDBnWTI5dVptbG5MbWx1Ym1WeUxuTnZjblF1WkdseVpXTjBhVzl1SUh4OElDZGtiM2R1Snl4Y2JseDBYSFJjZEdSaGRHRlVlWEJsSUQwZ1kyOXVabWxuTG1sdWJtVnlMbk52Y25RdVpHRjBZVlI1Y0dVZ2ZId2daMlYwVTI5eWRGUjVjR1VvWTI5dVptbG5MQ0JqYjI1bWFXY3VjMjl5ZEM1a1pXWmhkV3gwS1R0Y2JseHVYSFJjZEhKbGRIVnliaUJrWVhSaFZYUnBiQzVrWldaaGRXeDBRMjl0Y0dGeVlYUnZjaWhoTENCaUxDQjdYRzVjZEZ4MFhIUmhkSFJ5YVdKMWRHVTZJR0YwZEhKcFluVjBaU3hjYmx4MFhIUmNkR1JwY21WamRHbHZiam9nWkdseVpXTjBhVzl1TEZ4dVhIUmNkRngwWkdGMFlWUjVjR1U2SUdSaGRHRlVlWEJsTEZ4dVhIUmNkRngwWldScGRHVmtWbUZzZFdWek9pQmpiMjVtYVdjdWFXNXVaWEl1WldScGRHVmtWbUZzZFdWekxGeHVYSFJjZEZ4MGRXNXBjWFZsVW05M1MyVjVPaUJqYjI1bWFXY3VkVzVwY1hWbFVtOTNTMlY1TEZ4dVhIUmNkRngwYm1GdFpUb2dZMjl1Wm1sbkxteHZZMkZzWlM1dVlXMWxYRzVjZEZ4MGZTazdYRzVjZEgwcE8xeHVYRzVjZEdsbUlDaDFjR1JoZEdWVVlXSnNaU2tnZTF4dVhIUmNkSFJoWW14bFRXOWtkV3hsTG5Wd1pHRjBaVlJoWW14bEtHTnZibVpwWnlrN1hHNWNkSDFjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ6WlhSVGIzSjBLR052Ym1acFp5a2dlMXh1WEhSamIyNW1hV2N1YVc1dVpYSXVjMjl5ZEM1aGRIUnlhV0oxZEdVZ1BWeHVYSFJqYjI1bWFXY3VhVzV1WlhJdWMyOXlkQzVrYVhKbFkzUnBiMjRnUFZ4dVhIUmpiMjVtYVdjdWFXNXVaWEl1YzI5eWRDNWtZWFJoVkhsd1pTQTlJSFZ1WkdWbWFXNWxaRHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm1SbFptbHVaV1JjYmx4dVhIUmpiMjVtYVdjdVpHRjBZVk52ZFhKalpTNXpiM0owS0daMWJtTjBhVzl1S0dFc0lHSXBJSHRjYmx4MFhIUnBaaUFvWTI5dVptbG5Mbk52Y25RdVkzVnpkRzl0VTI5eWRDQWhQVDBnYm5Wc2JDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHTnZibVpwWnk1emIzSjBMbU4xYzNSdmJWTnZjblFvWVN3Z1lpd2dlMXh1WEhSY2RGeDBYSFJoZEhSeWFXSjFkR1U2SUdOdmJtWnBaeTV6YjNKMExtUmxabUYxYkhRc1hHNWNkRngwWEhSY2RHUnBjbVZqZEdsdmJqb2dKMlJ2ZDI0bkxGeHVYSFJjZEZ4MFhIUmtZWFJoVkhsd1pUb2daMlYwVTI5eWRGUjVjR1VvWTI5dVptbG5MQ0JqYjI1bWFXY3VjMjl5ZEM1a1pXWmhkV3gwS1N4Y2JseDBYSFJjZEZ4MFpXUnBkR1ZrVm1Gc2RXVnpPaUJqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpMRnh1WEhSY2RGeDBYSFIxYm1seGRXVlNiM2RMWlhrNklHTnZibVpwWnk1MWJtbHhkV1ZTYjNkTFpYbGNibHgwWEhSY2RIMHBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCa1lYUmhWWFJwYkM1a1pXWmhkV3gwUTI5dGNHRnlZWFJ2Y2loaExDQmlMQ0I3WEc1Y2RGeDBYSFJoZEhSeWFXSjFkR1U2SUdOdmJtWnBaeTV6YjNKMExtUmxabUYxYkhRc1hHNWNkRngwWEhSa2FYSmxZM1JwYjI0NklDZGtiM2R1Snl4Y2JseDBYSFJjZEdSaGRHRlVlWEJsT2lCblpYUlRiM0owVkhsd1pTaGpiMjVtYVdjc0lHTnZibVpwWnk1emIzSjBMbVJsWm1GMWJIUXBMRnh1WEhSY2RGeDBaV1JwZEdWa1ZtRnNkV1Z6T2lCamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6TEZ4dVhIUmNkRngwZFc1cGNYVmxVbTkzUzJWNU9pQmpiMjVtYVdjdWRXNXBjWFZsVW05M1MyVjVMRnh1WEhSY2RGeDBibUZ0WlRvZ1kyOXVabWxuTG14dlkyRnNaUzV1WVcxbFhHNWNkRngwZlNrN1hHNWNkSDBwTzF4dVhHNWNkSFJoWW14bFRXOWtkV3hsTG5Wd1pHRjBaVlJoWW14bEtHTnZibVpwWnlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGTnZjblJVZVhCbEtHTnZibVpwWnl3Z1lYUjBjbWxpZFhSbEtTQjdYRzVjZEhaaGNpQm9aV0ZrWlhKUFltb2dQU0JqYjI1bWFXZFZkR2xzTG1kbGRFaGxZV1JsY2s5aWFtVmpkQ2hqYjI1bWFXY3NJR0YwZEhKcFluVjBaU2s3WEc1Y2JseDBjbVYwZFhKdUlIUjVjR1Z2WmlCb1pXRmtaWEpQWW1vZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NnZkh3Z2RIbHdaVzltSUdobFlXUmxjazlpYWk1a1lYUmhWSGx3WlNBOVBTQW5kVzVrWldacGJtVmtKeUEvSUNkemRISnBibWNuSURvZ2FHVmhaR1Z5VDJKcUxtUmhkR0ZVZVhCbE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JseDBjMjl5ZEVKNVEyOXNkVzF1T2lCemIzSjBRbmxEYjJ4MWJXNHNYRzVjZEhOdmNuUTZJSE52Y25Rc1hHNWNkSEpsYzJWMFUyOXlkRG9nY21WelpYUlRiM0owWEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUhSaFlteGxWWFJwYkNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZkR0ZpYkdVbktTeGNibHgwWTI5dVptbG5WWFJwYkNBZ1BTQnlaWEYxYVhKbEtDY3VMaTkxZEdsc2N5OWpiMjVtYVdkMWNtRjBhVzl1Snlrc1hHNWNkR05sYkd4RmJHVnRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpNHZaV3hsYldWdWRITXZZMlZzYkNjcE8xeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVlVZV0pzWlNoamIyNW1hV2NwSUh0Y2JseDBkWEJrWVhSbFNHVmhaR1Z5S0dOdmJtWnBaeWs3WEc1Y2RIVndaR0YwWlVSaGRHRW9ZMjl1Wm1sbktUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsU0dWaFpHVnlLR052Ym1acFp5a2dlMXh1WEhSMllYSWdZMjlzYzNCaGJpQTlJREVzWEc1Y2RGeDBaR0YwWVVobFlXUmxjbEp2ZDB4cGMzUWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdVpHRjBZVWhsWVdSbGNsUmhZbXhsSUNzZ0p5QjBjaTRuSUNzZ1kyOXVabWxuTG1sdWJtVnlMbk5sYkdWamRHOXljeTVvWldGa1pYSlNiM2NwTEZ4dVhIUmNkR1pwZUdWa1NHVmhaR1Z5VW05M1RHbHpkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk0bklDc2dZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NW1hWGhsWkVobFlXUmxjbFJoWW14bElDc2dKeUIwY2k0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1b1pXRmtaWEpTYjNjcE8xeHVYRzVjZEM4dklFaGxZV1JsY2lCalpXeHNJSFZ3WkdGMFpWeHVYSFJrWVhSaFNHVmhaR1Z5VW05M1RHbHpkQzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSEp2ZHl3Z2NtOTNRMjkxYm5RcElIdGNibHgwWEhSeWIzY3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25kR1F1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11YUdWaFpHVnlRMlZzYkNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloalpXeHNMQ0JqWld4c1EyOTFiblFwSUh0Y2JseDBYSFJjZEhaaGNpQmpaV3hzVDJKcUlEMGdZMjl1Wm1sbkxtaGxZV1JsY25OYmNtOTNRMjkxYm5SZFcyTmxiR3hEYjNWdWRGMHNYRzVjZEZ4MFhIUmNkR2x6VEdGemRGSnZkeUE5SUdOdmJtWnBaeTVwYm01bGNpNXBibVJsZUU5bVEyVnNiRXRsZVVobFlXUmxjaUE5UFQwZ2NtOTNRMjkxYm5RN1hHNWNibHgwWEhSY2RHbG1JQ2hqYjJ4emNHRnVJRDRnTVNrZ2UxeHVYSFJjZEZ4MFhIUmpaV3hzTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0FuYm05dVpTYzdYRzVjZEZ4MFhIUmNkR052YkhOd1lXNHRMVHRjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkR05sYkd4RmJHVnRaVzUwTG5Wd1pHRjBaVVJoZEdGRGIyNTBZV2x1WlhJb1kyOXVabWxuTENCalpXeHNMQ0JqWld4c1JXeGxiV1Z1ZEM1amNtVmhkR1ZJWldGa1pYSkVZWFJoS0dOdmJtWnBaeXdnWTJWc2JDd2dZMlZzYkU5aWFpd2dhWE5NWVhOMFVtOTNLU2s3WEc1Y2JseDBYSFJjZEZ4MFkyVnNiQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKM1JoWW14bExXTmxiR3duTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScFppQW9kSGx3Wlc5bUlHTmxiR3hQWW1vdVkyOXNjM0JoYmlBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUmNkRngwWEhSalpXeHNMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25ZMjlzYzNCaGJpY3BPMXh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBZMlZzYkM1elpYUkJkSFJ5YVdKMWRHVW9KMk52YkhOd1lXNG5MQ0JqWld4c1QySnFMbU52YkhOd1lXNHBPMXh1WEc1Y2RGeDBYSFJjZEdOdmJITndZVzRnUFNCalpXeHNUMkpxTG1OdmJITndZVzQ3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFJqYjJ4emNHRnVJRDBnTVR0Y2JseDBmU2s3WEc1Y2JseDBMeThnUm1sNFpXUWdhR1ZoWkdWeUlHTmxiR3dnZFhCa1lYUmxYRzVjZEdacGVHVmtTR1ZoWkdWeVVtOTNUR2x6ZEM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hKdmR5d2djbTkzUTI5MWJuUXBJSHRjYmx4MFhIUnliM2N1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duZEdRdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdWFHVmhaR1Z5UTJWc2JDa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGpaV3hzTENCalpXeHNRMjkxYm5RcElIdGNibHgwWEhSY2RIWmhjaUJqWld4c1QySnFJRDBnWTI5dVptbG5MbVpwZUdWa1NHVmhaR1Z5YzF0eWIzZERiM1Z1ZEYxYlkyVnNiRU52ZFc1MFhTeGNibHgwWEhSY2RGeDBhWE5NWVhOMFVtOTNJRDBnWTI5dVptbG5MbWx1Ym1WeUxtbHVaR1Y0VDJaRFpXeHNTMlY1U0dWaFpHVnlJRDA5UFNCeWIzZERiM1Z1ZER0Y2JseHVYSFJjZEZ4MFkyVnNiRVZzWlcxbGJuUXVkWEJrWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJR05sYkd3c0lHTmxiR3hGYkdWdFpXNTBMbU55WldGMFpVaGxZV1JsY2tSaGRHRW9ZMjl1Wm1sbkxDQmpaV3hzTENCalpXeHNUMkpxTENCcGMweGhjM1JTYjNjcEtUdGNibHgwWEhSOUtUdGNibHh1WEhSY2RIVndaR0YwWlVacGVHVmtTR1ZwWjJoMEtHTnZibVpwWnl3Z1pHRjBZVWhsWVdSbGNsSnZkMHhwYzNRc0lISnZkeXdnY205M1EyOTFiblFwTzF4dVhIUjlLVHRjYmx4dVhIUXZMeUJHYVd4MFpYSWdjbTkzSUhWd1pHRjBaVnh1WEhScFppQW9ZMjl1Wm1sbkxtWnBiSFJsY2k1bGJtRmliR1ZrS1NCN1hHNWNkRngwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZJWldGa1pYSlVZV0pzWlNBcklDY2dkR1F1SnlBcklHTnZibVpwWnk1cGJtNWxjaTV6Wld4bFkzUnZjbk11Wm1sc2RHVnlRMlZzYkNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloalpXeHNMQ0JqWld4c1EyOTFiblFwSUh0Y2JseDBYSFJjZEhaaGNpQmpaV3hzVDJKcUlEMGdZMjl1Wm1sblZYUnBiQzVuWlhSTFpYbElaV0ZrWlhJb1kyOXVabWxuS1Z0alpXeHNRMjkxYm5SZExGeHVYSFJjZEZ4MFhIUm1hV3gwWlhKUFltb2dQU0JqYjI1bWFXY3VhVzV1WlhJdVptbHNkR1Z5YzF0alpXeHNUMkpxTG10bGVWMGdmSHdnZTMwc1hHNWNkRngwWEhSY2RHTjFjbkpsYm5SR2FXeDBaWEpCZEhSeUlEMGdZMlZzYkM1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFlYUjBjbWxpZFhSbEp5azdYRzVjYmx4MFhIUmNkR2xtSUNoalpXeHNUMkpxTG10bGVTQTlQVDBnWTNWeWNtVnVkRVpwYkhSbGNrRjBkSElwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSalpXeHNMbk5sZEVGMGRISnBZblYwWlNnblpHRjBZUzFoZEhSeWFXSjFkR1VuTENCalpXeHNUMkpxTG10bGVTazdYRzVjZEZ4MFhIUmpaV3hzTG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NW1hV3gwWlhKRWFYTmhZbXhsWkN3Z1kyVnNiRTlpYWk1bWFXeDBaWEpFYVhOaFlteGxaQ2s3WEc1Y2JseDBYSFJjZEdObGJHeEZiR1Z0Wlc1MExuVndaR0YwWlVSaGRHRkRiMjUwWVdsdVpYSW9ZMjl1Wm1sbkxDQmpaV3hzTENCalpXeHNSV3hsYldWdWRDNWpjbVZoZEdWR2FXeDBaWEpFWVhSaEtHTnZibVpwWnl3Z1kyVnNiQ3dnWTJWc2JFOWlhaXdnWm1sc2RHVnlUMkpxS1NrN1hHNWNkRngwZlNrN1hHNWNibHgwWEhSa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdUp5QXJJR052Ym1acFp5NXpaV3hsWTNSdmNuTXVabWw0WldSSVpXRmtaWEpVWVdKc1pTQXJJQ2NnZEdRdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVptbHNkR1Z5UTJWc2JDa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGpaV3hzTENCalpXeHNRMjkxYm5RcElIdGNibHgwWEhSY2RIWmhjaUJqWld4c1QySnFJRDBnWTI5dVptbG5MbVpwZUdWa1NHVmhaR1Z5YzF0amIyNW1hV2N1YVc1dVpYSXVhVzVrWlhoUFprTmxiR3hMWlhsSVpXRmtaWEpkVzJObGJHeERiM1Z1ZEYwc1hHNWNkRngwWEhSY2RHWnBiSFJsY2s5aWFpQTlJR052Ym1acFp5NXBibTVsY2k1bWFXeDBaWEp6VzJObGJHeFBZbW91YTJWNVhTQjhmQ0I3ZlN4Y2JseDBYSFJjZEZ4MFkzVnljbVZ1ZEVacGJIUmxja0YwZEhJZ1BTQmpaV3hzTG1kbGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxaGRIUnlhV0oxZEdVbktUdGNibHh1WEhSY2RGeDBhV1lnS0dObGJHeFBZbW91YTJWNUlEMDlQU0JqZFhKeVpXNTBSbWxzZEdWeVFYUjBjaWtnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdObGJHd3VjMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV0YwZEhKcFluVjBaU2NzSUdObGJHeFBZbW91YTJWNUtUdGNibHgwWEhSY2RHTmxiR3d1WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2hqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtWnBiSFJsY2tScGMyRmliR1ZrTENCalpXeHNUMkpxTG1acGJIUmxja1JwYzJGaWJHVmtLVHRjYmx4dVhIUmNkRngwWTJWc2JFVnNaVzFsYm5RdWRYQmtZWFJsUkdGMFlVTnZiblJoYVc1bGNpaGpiMjVtYVdjc0lHTmxiR3dzSUdObGJHeEZiR1Z0Wlc1MExtTnlaV0YwWlVacGJIUmxja1JoZEdFb1kyOXVabWxuTENCalpXeHNMQ0JqWld4c1QySnFMQ0JtYVd4MFpYSlBZbW9wS1R0Y2JseDBYSFI5S1R0Y2JseDBmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFjR1JoZEdWRVlYUmhLR052Ym1acFp5a2dlMXh1WEhSMllYSWdaR0YwWVZKdmQweHBjM1FnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdUp5QXJJR052Ym1acFp5NXpaV3hsWTNSdmNuTXVaR0YwWVZSaFlteGxJQ3NnSnlCMGNpNG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NWtZWFJoVW05M0tTeGNibHgwWEhSbWFYaGxaRkp2ZDB4cGMzUWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1SnlBcklHTnZibVpwWnk1elpXeGxZM1J2Y25NdVptbDRaV1JVWVdKc1pTQXJJQ2NnZEhJdUp5QXJJR052Ym1acFp5NXBibTVsY2k1elpXeGxZM1J2Y25NdVpHRjBZVkp2ZHlrN1hHNWNibHgwTHk4Z1EyVnNiQ0JrWVhSaElISnZkeUIxY0dSaGRHVmNibHgwWkdGMFlWSnZkMHhwYzNRdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloeWIzY3NJSEp2ZDA1MWJXSmxjaWtnZTF4dVhIUmNkSEp2ZHk1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkMFpDNG5JQ3NnWTI5dVptbG5MbWx1Ym1WeUxuTmxiR1ZqZEc5eWN5NWtZWFJoUTJWc2JDa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGpaV3hzTENCalpXeHNUblZ0WW1WeUtTQjdYRzVjZEZ4MFhIUjJZWElnWTJWc2JFUmhkR0VnUFNCMFlXSnNaVlYwYVd3dVoyVjBRMlZzYkVSaGRHRW9ZMjl1Wm1sbkxDQnliM2RPZFcxaVpYSXNJR05sYkd4T2RXMWlaWElwTzF4dVhHNWNkRngwWEhSalpXeHNSV3hsYldWdWRDNTFjR1JoZEdWRFpXeHNLR052Ym1acFp5d2dZMlZzYkN3Z1kyVnNiRVJoZEdFcE8xeHVYSFJjZEgwcE8xeHVYSFI5S1R0Y2JseHVYSFF2THlCR2FYaGxaQ0JqWld4c0lHUmhkR0VnY205M0lIVndaR0YwWlZ4dVhIUm1hWGhsWkZKdmQweHBjM1F1Wm05eVJXRmphQ2htZFc1amRHbHZiaWh5YjNjc0lISnZkMDUxYldKbGNpa2dlMXh1WEhSY2RISnZkeTV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2QwWkM0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1a1lYUmhRMlZzYkNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloalpXeHNMQ0JqWld4c1RuVnRZbVZ5S1NCN1hHNWNkRngwWEhSMllYSWdabWw0WldSRFpXeHNSR0YwWVNBOUlIUmhZbXhsVlhScGJDNW5aWFJHYVhobFpFTmxiR3hFWVhSaEtHTnZibVpwWnl3Z2NtOTNUblZ0WW1WeUxDQmpaV3hzVG5WdFltVnlLVHRjYmx4dVhIUmNkRngwWTJWc2JFVnNaVzFsYm5RdWRYQmtZWFJsUTJWc2JDaGpiMjVtYVdjc0lHTmxiR3dzSUdacGVHVmtRMlZzYkVSaGRHRXBPMXh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBkWEJrWVhSbFJtbDRaV1JJWldsbmFIUW9ZMjl1Wm1sbkxDQmtZWFJoVW05M1RHbHpkQ3dnY205M0xDQnliM2RPZFcxaVpYSXBPMXh1WEhSOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsUm1sNFpXUklaV2xuYUhRb1kyOXVabWxuTENCa1lYUmhVbTkzVEdsemRDd2dabWw0WldSU2IzY3NJSEp2ZDA1MWJXSmxjaWtnZTF4dVhIUnBaaUFvWTI5dVptbG5MbVpwZUdWa1NHVmhaR1Z5Y3k1c1pXNW5kR2dnUFQwOUlEQWdmSHdnWTI5dVptbG5MbVJwYldWdWMybHZibk11Ykc5amEwTmxiR3hJWldsbmFIUXBJSHRjYmx4MFhIUnlaWFIxY200N1hHNWNkSDFjYmx4dVhIUjJZWElnWkdGMFlWSnZkeUE5SUdSaGRHRlNiM2RNYVhOMExteGxibWQwYUNBOElISnZkMDUxYldKbGNpQS9JRzUxYkd3Z09pQmtZWFJoVW05M1RHbHpkRnR5YjNkT2RXMWlaWEpkTzF4dVhHNWNkR2xtSUNoa1lYUmhVbTkzSUQwOVBTQnVkV3hzS1NCN1hHNWNkRngwY21WMGRYSnVPeUF2THlCSmRDQnphRzkxYkdSdUozUWdZbVZjYmx4MGZWeHVYRzVjZEhaaGNpQnZjbWxuYVc1aGJFaGxhV2RvZENBOUlHTnZibVpwWnk1a2FXMWxibk5wYjI1ekxtTmxiR3hJWldsbmFIUWdLeUFuY0hnbk8xeHVYRzVjZEdsbUlDaGtZWFJoVW05M0xuTjBlV3hsTG1obGFXZG9kQ0FoUFQwZ2IzSnBaMmx1WVd4SVpXbG5hSFFwSUh0Y2JseDBYSFJrWVhSaFVtOTNMbk4wZVd4bExtaGxhV2RvZENBOUlHOXlhV2RwYm1Gc1NHVnBaMmgwTzF4dVhIUjlYRzVjYmx4MGFXWWdLR1pwZUdWa1VtOTNMbk4wZVd4bExtaGxhV2RvZENBaFBUMGdiM0pwWjJsdVlXeElaV2xuYUhRcElIdGNibHgwWEhSbWFYaGxaRkp2ZHk1emRIbHNaUzVvWldsbmFIUWdQU0J2Y21sbmFXNWhiRWhsYVdkb2REdGNibHgwZlZ4dVhHNWNkSFpoY2lCa1lYUmhTR1ZwWjJoMElEMGdaR0YwWVZKdmR5NWpiR2xsYm5SSVpXbG5hSFFzWEc1Y2RGeDBabWw0WldSSVpXbG5hSFFnUFNCbWFYaGxaRkp2ZHk1amJHbGxiblJJWldsbmFIUTdYRzVjYmx4MGFXWWdLR1JoZEdGSVpXbG5hSFFnUFQwOUlHWnBlR1ZrU0dWcFoyaDBLU0I3WEc1Y2RGeDBjbVYwZFhKdU95QXZMeUJPYnlCdVpXVmtJR1p2Y2lCaFpHcDFjM1J0Wlc1MFhHNWNkSDFjYmx4dVhIUnBaaUFvWkdGMFlVaGxhV2RvZENBK0lHWnBlR1ZrU0dWcFoyaDBLU0I3WEc1Y2RGeDBabWw0WldSU2IzY3VjM1I1YkdVdWFHVnBaMmgwSUQwZ1pHRjBZVWhsYVdkb2RDQXJJQ2R3ZUNjN1hHNWNkSDBnWld4elpTQjdYRzVjZEZ4MFpHRjBZVkp2ZHk1emRIbHNaUzVvWldsbmFIUWdQU0JtYVhobFpFaGxhV2RvZENBcklDZHdlQ2M3WEc1Y2RIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyTnliMnhzVkdGaWJHVnpLR052Ym1acFp5a2dlMXh1WEhSMllYSWdaR0YwWVVOdmJuUmhhVzVsY2lBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk0bklDc2dZMjl1Wm1sbkxuTmxiR1ZqZEc5eWN5NWtZWFJoUTI5dWRHRnBibVZ5S1N4Y2JseDBYSFJtYVhobFpFTnZiblJoYVc1bGNpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NG5JQ3NnWTI5dVptbG5Mbk5sYkdWamRHOXljeTVtYVhobFpFTnZiblJoYVc1bGNpa3NYRzVjZEZ4MFpHRjBZVWhsWVdSbGNrTnZiblJoYVc1bGNpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NG5JQ3NnWTI5dVptbG5Mbk5sYkdWamRHOXljeTVrWVhSaFNHVmhaR1Z5UTI5dWRHRnBibVZ5S1R0Y2JseHVYSFJwWmlBb1pHRjBZVU52Ym5SaGFXNWxjaUE5UFQwZ2JuVnNiQ2tnZTF4dVhIUmNkSEpsZEhWeWJqdGNibHgwZlZ4dVhHNWNkR2xtSUNobWFYaGxaRU52Ym5SaGFXNWxjaUFoUFQwZ2JuVnNiQ2tnZTF4dVhIUmNkR1pwZUdWa1EyOXVkR0ZwYm1WeUxuTmpjbTlzYkZSdmNDQTlJR1JoZEdGRGIyNTBZV2x1WlhJdWMyTnliMnhzVkc5d08xeHVYSFI5WEc1Y2JseDBhV1lnS0dSaGRHRklaV0ZrWlhKRGIyNTBZV2x1WlhJZ0lUMDlJRzUxYkd3cElIdGNibHgwWEhSa1lYUmhTR1ZoWkdWeVEyOXVkR0ZwYm1WeUxuTmpjbTlzYkV4bFpuUWdQU0JrWVhSaFEyOXVkR0ZwYm1WeUxuTmpjbTlzYkV4bFpuUTdYRzVjZEgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WelpYUkZaR2wwYVc1blEyVnNiQ2hqYjI1bWFXY3NJR1YyWlc1MFNHRnVaR3hsY25NcElIdGNibHgwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZVWVdKc1pTQXJJQ2NnZEdRdUp5QXJJR052Ym1acFp5NXpaV3hsWTNSdmNuTXVaV1JwZEdsdVowTmxiR3dwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWldScGRHbHVaME5sYkd3cElIdGNibHgwWEhSMllYSWdhVzV3ZFhRZ1BTQmxaR2wwYVc1blEyVnNiQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZHBibkIxZENjcE8xeHVYRzVjZEZ4MGFXNXdkWFF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbllteDFjaWNzSUdWMlpXNTBTR0Z1Wkd4bGNuTXViMjVKYm5CMWRFSnNkWEpGZG1WdWRFaGhibVJzWlhJcE8xeHVYSFJjZEdsdWNIVjBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjJ0bGVYVndKeXdnWlhabGJuUklZVzVrYkdWeWN5NXZia2x1Y0hWMFMyVjVWWEJGZG1WdWRFaGhibVJzWlhJcE8xeHVYRzVjZEZ4MFkyVnNiRVZzWlcxbGJuUXVkWEJrWVhSbFJHRjBZVU52Ym5SaGFXNWxjaWhqYjI1bWFXY3NJR1ZrYVhScGJtZERaV3hzTENCcGJuQjFkQzUyWVd4MVpTazdYRzVjYmx4MFhIUmxaR2wwYVc1blEyVnNiQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLR052Ym1acFp5NXpaV3hsWTNSdmNuTXVaV1JwZEdsdVowTmxiR3dwTzF4dVhIUjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ6WlhSRlpHbDBaV1JEWld4c2N5aGpiMjVtYVdjcElIdGNibHgwWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTGljZ0t5QmpiMjVtYVdjdWMyVnNaV04wYjNKekxtUmhkR0ZVWVdKc1pTQXJJQ2NnZEdRdUp5QXJJR052Ym1acFp5NXpaV3hsWTNSdmNuTXVaV1JwZEdsdVowTmxiR3dwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWldScGRHVmtRMlZzYkNrZ2UxeHVYSFJjZEdWa2FYUmxaRU5sYkd3dVkyeGhjM05NYVhOMExuSmxiVzkyWlNoamIyNW1hV2N1YzJWc1pXTjBiM0p6TG1Wa2FYUmxaRU5sYkd3cE8xeHVYSFI5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdWemRISnZlVlJoWW14bEtHTnZibVpwWnlrZ2UxeHVYSFJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHTnZibVpwWnk1elpXeGxZM1J2Y25NdWJXRnBia052Ym5SaGFXNWxjaWt1YVc1dVpYSklWRTFNSUQwZ0p5YzdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVYSFIxY0dSaGRHVlVZV0pzWlRvZ2RYQmtZWFJsVkdGaWJHVXNYRzVjZEhWd1pHRjBaVWhsWVdSbGNqb2dkWEJrWVhSbFNHVmhaR1Z5TEZ4dVhIUjFjR1JoZEdWRVlYUmhPaUIxY0dSaGRHVkVZWFJoTEZ4dVhIUnpZM0p2Ykd4VVlXSnNaWE02SUhOamNtOXNiRlJoWW14bGN5eGNibHgwY21WelpYUkZaR2wwYVc1blEyVnNiRG9nY21WelpYUkZaR2wwYVc1blEyVnNiQ3hjYmx4MGNtVnpaWFJGWkdsMFpXUkRaV3hzY3pvZ2NtVnpaWFJGWkdsMFpXUkRaV3hzY3l4Y2JseDBaR1Z6ZEhKdmVWUmhZbXhsT2lCa1pYTjBjbTk1VkdGaWJHVmNibjA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1bWRXNWpkR2x2YmlCemFHOTNLR052Ym1acFp5d2diM0IwYVc5dWN5a2dlMXh1WEhSemQybDBZMmdnS0c5d2RHbHZibk11ZEhsd1pTa2dlMXh1WEhSY2RHTmhjMlVnSjJsdVptOG5PbHh1WEhSY2RGeDBjMmh2ZDBsdVptOG9ZMjl1Wm1sbkxDQnZjSFJwYjI1ektUdGNibHgwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkR05oYzJVZ0ozZGhjbTRuT2x4dVhIUmNkRngwYzJodmQxZGhjbTRvWTI5dVptbG5MQ0J2Y0hScGIyNXpLVHRjYmx4MFhIUmNkR0p5WldGck8xeHVYSFJjZEdOaGMyVWdKMlZ5Y205eUp6cGNibHgwWEhSY2RITm9iM2RGY25KdmNpaGpiMjVtYVdjc0lHOXdkR2x2Ym5NcE8xeHVYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBaR1ZtWVhWc2REcGNibHgwWEhSY2RHTnZibVpwWnk1dGIyUjFiR1Z6TG5SdmIyeDBhWEF1YzJodmR5aHZjSFJwYjI1ektUdGNibHgwWEhSY2RHSnlaV0ZyTzF4dVhIUjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaHBaR1VvWTI5dVptbG5MQ0JsYkdWdFpXNTBLU0I3WEc1Y2RHTnZibVpwWnk1dGIyUjFiR1Z6TG5SdmIyeDBhWEF1YUdsa1pTaGxiR1Z0Wlc1MEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FHbGtaVUZzYkNoamIyNW1hV2NwSUh0Y2JseDBZMjl1Wm1sbkxtMXZaSFZzWlhNdWRHOXZiSFJwY0M1b2FXUmxRV3hzS0NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhOb2IzZEpibVp2S0dOdmJtWnBaeXdnYjNCMGFXOXVjeWtnZTF4dVhIUmpiMjVtYVdjdWJXOWtkV3hsY3k1MGIyOXNkR2x3TG5Ob2IzZEpibVp2S0c5d2RHbHZibk1wTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6YUc5M1YyRnliaWhqYjI1bWFXY3NJRzl3ZEdsdmJuTXBJSHRjYmx4MFkyOXVabWxuTG0xdlpIVnNaWE11ZEc5dmJIUnBjQzV6YUc5M1YyRnliaWh2Y0hScGIyNXpLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMmh2ZDBWeWNtOXlLR052Ym1acFp5d2diM0IwYVc5dWN5a2dlMXh1WEhSamIyNW1hV2N1Ylc5a2RXeGxjeTUwYjI5c2RHbHdMbk5vYjNkRmNuSnZjaWh2Y0hScGIyNXpLVHRjYm4xY2JseHVablZ1WTNScGIyNGdiMjVOYjNWelpVVnVkR1Z5UTJWc2JGZHBkR2hVYVhSc1pTaGpiMjVtYVdjc0lHVnNaVzFsYm5RcElIdGNibHgwZG1GeUlHTmxiR3hFWVhSaFEyOXVkR0ZwYm1WeUlEMGdaV3hsYldWdWRDQTlQVDBnYm5Wc2JDQS9JRzUxYkd3Z09pQmxiR1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk0bklDc2dZMjl1Wm1sbkxtbHVibVZ5TG5ObGJHVmpkRzl5Y3k1alpXeHNSR0YwWVVOdmJuUmhhVzVsY2lrN1hHNWNibHgwYVdZZ0tHTmxiR3hFWVhSaFEyOXVkR0ZwYm1WeUlEMDlQU0J1ZFd4c0lIeDhJQ0ZsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWhqYjI1bWFXY3VhVzV1WlhJdWMyVnNaV04wYjNKekxtOTJaWEptYkc5M1pXUkRaV3hzS1NrZ2UxeHVYSFJjZEhKbGRIVnlianRjYmx4MGZWeHVYRzVjZEhOb2IzZEpibVp2S0dOdmJtWnBaeXdnZTF4dVhIUmNkR1ZzWlcxbGJuUTZJR1ZzWlcxbGJuUXNYRzVjZEZ4MGRHVjRkRG9nWld4bGJXVnVkQzVuWlhSQmRIUnlhV0oxZEdVb0ozUnBkR3hsSnlsY2JseDBmU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJRzl1VFc5MWMyVk1aV0YyWlVObGJHeFhhWFJvVkdsMGJHVW9ZMjl1Wm1sbkxDQmxiR1Z0Wlc1MEtTQjdYRzVjZEdocFpHVW9ZMjl1Wm1sbkxDQmxiR1Z0Wlc1MEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNWNkSE5vYjNjNklITm9iM2NzWEc1Y2RHaHBaR1U2SUdocFpHVXNYRzVjZEdocFpHVkJiR3c2SUdocFpHVkJiR3dzWEc1Y2RITm9iM2RKYm1adk9pQnphRzkzU1c1bWJ5eGNibHgwYzJodmQxZGhjbTQ2SUhOb2IzZFhZWEp1TEZ4dVhIUnphRzkzUlhKeWIzSTZJSE5vYjNkRmNuSnZjaXhjYmx4MGIyNU5iM1Z6WlVWdWRHVnlRMlZzYkZkcGRHaFVhWFJzWlRvZ2IyNU5iM1Z6WlVWdWRHVnlRMlZzYkZkcGRHaFVhWFJzWlN4Y2JseDBiMjVOYjNWelpVeGxZWFpsUTJWc2JGZHBkR2hVYVhSc1pUb2diMjVOYjNWelpVeGxZWFpsUTJWc2JGZHBkR2hVYVhSc1pWeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQkRWVk5VVDAxZlZrRk1TVVJCVkU5U1gwVlNVazlTWDAxVFJ5QTlJQ2REZFhOMGIyMGdkbUZzYVdSaGRHOXlJR1Z5Y205eUp6dGNibHh1Wm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1VvWTI5dVptbG5MQ0JqWld4c1JHRjBZU2tnZTF4dVhIUnBaaUFvSVdOdmJtWnBaeTVsWkdsMExuWmhiR2xrWVhSbEtTQjdYRzVjZEZ4MGNtVjBkWEp1SUZ0ZE8xeHVYSFI5WEc1Y2JseDBkbUZ5SUhaaGJHbGtZWFJwYjI1U1pYTjFiSFFnUFNCYlhTeGNibHgwWEhSamRYTjBiMjFXWVd4cFpHRjBiM0pTWlhOMWJIUWdQU0JqWld4c1JHRjBZUzVqZFhOMGIyMVdZV3hwWkdGMGIzSWdQVDA5SUc1MWJHd2dQeUJ1ZFd4c0lEb2dZMlZzYkVSaGRHRXVZM1Z6ZEc5dFZtRnNhV1JoZEc5eUtHTmxiR3hFWVhSaEtUdGNibHh1WEhScFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamRYTjBiMjFXWVd4cFpHRjBiM0pTWlhOMWJIUXBLU0I3WEc1Y2RGeDBkbUZzYVdSaGRHbHZibEpsYzNWc2RDQTlJR04xYzNSdmJWWmhiR2xrWVhSdmNsSmxjM1ZzZER0Y2JseDBmU0JsYkhObElHbG1JQ2hqZFhOMGIyMVdZV3hwWkdGMGIzSlNaWE4xYkhRZ1BUMDlJR1poYkhObEtTQjdYRzVjZEZ4MGRtRnNhV1JoZEdsdmJsSmxjM1ZzZEM1d2RYTm9LRU5WVTFSUFRWOVdRVXhKUkVGVVQxSmZSVkpTVDFKZlRWTkhLVHRjYmx4MGZTQmxiSE5sSUdsbUlDaGpkWE4wYjIxV1lXeHBaR0YwYjNKU1pYTjFiSFFnSVQwOUlHNTFiR3dnSmlZZ1kzVnpkRzl0Vm1Gc2FXUmhkRzl5VW1WemRXeDBJQ0U5UFNCMGNuVmxLU0I3WEc1Y2RGeDBkbUZzYVdSaGRHbHZibEpsYzNWc2RDNXdkWE5vS0dOMWMzUnZiVlpoYkdsa1lYUnZjbEpsYzNWc2RDazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdkbUZzYVdSaGRHbHZibEpsYzNWc2RDNWpiMjVqWVhRb2RtRnNhV1JoZEdWUFltcGxZM1FvWTJWc2JFUmhkR0VwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZQWW1wbFkzUW9ZMlZzYkVSaGRHRXBJSHRjYmx4MGRtRnlJSEpsYzNWc2RDQTlJRnRkTEZ4dVhIUmNkSFpoYkdsa1lYUnZjazlpYW1WamRDQTlJR05sYkd4RVlYUmhMblpoYkdsa1lYUnZjazlpYW1WamREdGNibHh1WEhScFppQW9kSGx3Wlc5bUlIWmhiR2xrWVhSdmNrOWlhbVZqZENBOVBTQW5kVzVrWldacGJtVmtKeUI4ZkNCMllXeHBaR0YwYjNKUFltcGxZM1FnUFQwOUlHNTFiR3dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVYSFI5WEc1Y2JseDBUMkpxWldOMExtdGxlWE1vZG1Gc2FXUmhkRzl5VDJKcVpXTjBLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVYSFJjZEdsbUlDZ2hZMmhsWTJ0V1lXeHBaR0YwYVc5dVVuVnNaWE1vWTJWc2JFUmhkR0VzSUd0bGVTd2dkbUZzYVdSaGRHOXlUMkpxWldOMFcydGxlVjBwS1NCN1hHNWNkRngwWEhSMllYSWdaWEp5YjNJZ1BTQjdmVHRjYmx4dVhIUmNkRngwWlhKeWIzSmJhMlY1WFNBOUlIWmhiR2xrWVhSdmNrOWlhbVZqZEZ0clpYbGRPMXh1WEc1Y2RGeDBYSFJ5WlhOMWJIUXVjSFZ6YUNobGNuSnZjaWs3WEc1Y2RGeDBmVnh1WEhSOUtUdGNibHh1WEhSeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTFaaGJHbGtZWFJwYjI1U2RXeGxjeWhqWld4c1JHRjBZU3dnY25Wc1pTd2djbVZtWlhKbGJtTmxWbUZzZFdVcElIdGNibHgwYzNkcGRHTm9JQ2h5ZFd4bEtTQjdYRzVjZEZ4MFkyRnpaU0FuYldsdUp6cGNibHgwWEhSY2RISmxkSFZ5YmlCalpXeHNSR0YwWVM1blpYUldZV3gxWlNncElENDlJSEpsWm1WeVpXNWpaVlpoYkhWbE8xeHVYSFJjZEdOaGMyVWdKMjFoZUNjNlhHNWNkRngwWEhSeVpYUjFjbTRnWTJWc2JFUmhkR0V1WjJWMFZtRnNkV1VvS1NBOFBTQnlaV1psY21WdVkyVldZV3gxWlR0Y2JseDBYSFJrWldaaGRXeDBPbHh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlITm9iM2RGY25KdmNuTW9kbUZzYVdSaGRHbHZibEpsYzNWc2RDa2dlMXh1WEhSM2FXNWtiM2N1WTI5dWMyOXNaUzVzYjJjb1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc2FXUmhkR2x2YmxKbGMzVnNkQ2twTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmx4MGRtRnNhV1JoZEdVNklIWmhiR2xrWVhSbExGeHVYSFJ6YUc5M1JYSnliM0p6T2lCemFHOTNSWEp5YjNKelhHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tIUjVjR1Z2WmlCQmNuSmhlUzV3Y205MGIzUjVjR1V1Wm1sdVpDQTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFJCY25KaGVTNXdjbTkwYjNSNWNHVXVabWx1WkNBOUlHWjFibU4wYVc5dUtIQnlaV1JwWTJGMFpTa2dleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMV1Y0ZEdWdVpDMXVZWFJwZG1WY2JseDBYSFJwWmlBb2RHaHBjeUE5UFQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblFYSnlZWGt1Y0hKdmRHOTBlWEJsTG1acGJtUWdZMkZzYkdWa0lHOXVJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtKeWs3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0hSNWNHVnZaaUJ3Y21Wa2FXTmhkR1VnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmx4MFhIUmNkSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjNCeVpXUnBZMkYwWlNCdGRYTjBJR0psSUdFZ1puVnVZM1JwYjI0bktUdGNibHgwWEhSOVhHNWNibHgwWEhSMllYSWdiR2x6ZENBOUlFOWlhbVZqZENoMGFHbHpLVHRjYmx4MFhIUjJZWElnYkdWdVozUm9JRDBnYkdsemRDNXNaVzVuZEdnZ1BqNCtJREE3WEc1Y2RGeDBkbUZ5SUhSb2FYTkJjbWNnUFNCaGNtZDFiV1Z1ZEhOYk1WMDdYRzVjZEZ4MGRtRnlJSFpoYkhWbE8xeHVYRzVjZEZ4MFptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dVhIUmNkRngwZG1Gc2RXVWdQU0JzYVhOMFcybGRPMXh1WEhSY2RGeDBhV1lnS0hCeVpXUnBZMkYwWlM1allXeHNLSFJvYVhOQmNtY3NJSFpoYkhWbExDQnBMQ0JzYVhOMEtTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkbUZzZFdVN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm1SbFptbHVaV1JjYmx4MGZUdGNibjBpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1sbUlDZ2hSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXViV0YwWTJobGN5a2dlMXh1WEhSRmJHVnRaVzUwTG5CeWIzUnZkSGx3WlM1dFlYUmphR1Z6SUQxY2JseDBYSFJGYkdWdFpXNTBMbkJ5YjNSdmRIbHdaUzV0WVhSamFHVnpVMlZzWldOMGIzSWdmSHhjYmx4MFhIUkZiR1Z0Wlc1MExuQnliM1J2ZEhsd1pTNXRiM3BOWVhSamFHVnpVMlZzWldOMGIzSWdmSHhjYmx4MFhIUkZiR1Z0Wlc1MExuQnliM1J2ZEhsd1pTNXRjMDFoZEdOb1pYTlRaV3hsWTNSdmNpQjhmRnh1WEhSY2RFVnNaVzFsYm5RdWNISnZkRzkwZVhCbExtOU5ZWFJqYUdWelUyVnNaV04wYjNJZ2ZIeGNibHgwWEhSRmJHVnRaVzUwTG5CeWIzUnZkSGx3WlM1M1pXSnJhWFJOWVhSamFHVnpVMlZzWldOMGIzSWdmSHhjYmx4MFhIUm1kVzVqZEdsdmJpaHpLU0I3WEc1Y2RGeDBYSFIyWVhJZ2JXRjBZMmhsY3lBOUlDaDBhR2x6TG1SdlkzVnRaVzUwSUh4OElIUm9hWE11YjNkdVpYSkViMk4xYldWdWRDa3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaHpLU3hjYmx4MFhIUmNkRngwYVNBOUlHMWhkR05vWlhNdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSM2FHbHNaU0FvTFMxcElENDlJREFnSmlZZ2JXRjBZMmhsY3k1cGRHVnRLR2twSUNFOVBTQjBhR2x6S1NCN2ZTQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsWEc1Y2RGeDBYSFJ5WlhSMWNtNGdhU0ErSUMweE8xeHVYSFJjZEgwN1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzViSUVWc1pXMWxiblF1Y0hKdmRHOTBlWEJsTENCRGFHRnlZV04wWlhKRVlYUmhMbkJ5YjNSdmRIbHdaU3dnUkc5amRXMWxiblJVZVhCbExuQnliM1J2ZEhsd1pTQmRMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hWFJsYlNrZ2UxeHVYSFJwWmlBb2FYUmxiUzVvWVhOUGQyNVFjbTl3WlhKMGVTZ25jbVZ0YjNabEp5a3BJSHRjYmx4MFhIUnlaWFIxY200N1hHNWNkSDFjYmx4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR2wwWlcwc0lDZHlaVzF2ZG1VbkxDQjdYRzVjZEZ4MFkyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVYSFJjZEdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc1Y2RGeDBkM0pwZEdGaWJHVTZJSFJ5ZFdVc1hHNWNkRngwZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSEpsYlc5MlpTZ3BJSHRjYmx4MFhIUmNkR2xtSUNoMGFHbHpMbkJoY21WdWRFNXZaR1VnSVQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tIUm9hWE1wTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZTazdYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbG1JQ2doVG05a1pVeHBjM1F1Y0hKdmRHOTBlWEJsTG1admNrVmhZMmdwSUh0Y2JseDBUbTlrWlV4cGMzUXVjSEp2ZEc5MGVYQmxMbVp2Y2tWaFkyZ2dQU0JtZFc1amRHbHZiaWhqWVd4c1ltRmpheXdnWVhKbmRXMWxiblFwSUh0Y2JseDBYSFJoY21kMWJXVnVkQ0E5SUdGeVozVnRaVzUwSUh4OElIZHBibVJ2ZHp0Y2JseHVYSFJjZEdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVYSFJjZEZ4MFkyRnNiR0poWTJzdVkyRnNiQ2hoY21kMWJXVnVkQ3dnZEdocGMxdHBYU3dnYVN3Z2RHaHBjeWs3WEc1Y2RGeDBmVnh1WEhSOU8xeHVmU0lzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tIUjVjR1Z2WmlCUFltcGxZM1F1WVhOemFXZHVJQ0U5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwTHk4Z1RYVnpkQ0JpWlNCM2NtbDBZV0pzWlRvZ2RISjFaU3dnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dVhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVDJKcVpXTjBMQ0FuWVhOemFXZHVKeXdnZTF4dVhIUmNkSFpoYkhWbE9pQm1kVzVqZEdsdmJpQmhjM05wWjI0b2RHRnlaMlYwS1NCN0lDOHZJQzVzWlc1bmRHZ2diMllnWm5WdVkzUnBiMjRnYVhNZ01seHVYSFJjZEZ4MGFXWWdLSFJoY21kbGRDQTlQVDBnYm5Wc2JDa2dleUF2THlCVWVYQmxSWEp5YjNJZ2FXWWdkVzVrWldacGJtVmtJRzl5SUc1MWJHeGNibHgwWEhSY2RGeDBkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUTJGdWJtOTBJR052Ym5abGNuUWdkVzVrWldacGJtVmtJRzl5SUc1MWJHd2dkRzhnYjJKcVpXTjBKeWs3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhaaGNpQjBieUE5SUU5aWFtVmpkQ2gwWVhKblpYUXBPMXh1WEc1Y2RGeDBYSFJtYjNJZ0tIWmhjaUJwYm1SbGVDQTlJREU3SUdsdVpHVjRJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVc1a1pYZ3JLeWtnZTF4dVhIUmNkRngwWEhSMllYSWdibVY0ZEZOdmRYSmpaU0E5SUdGeVozVnRaVzUwYzF0cGJtUmxlRjA3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLRzVsZUhSVGIzVnlZMlVnSVQwOUlHNTFiR3dwSUhzZ0x5OGdVMnRwY0NCdmRtVnlJR2xtSUhWdVpHVm1hVzVsWkNCdmNpQnVkV3hzWEc1Y2RGeDBYSFJjZEZ4MFptOXlJQ2gyWVhJZ2JtVjRkRXRsZVNCcGJpQnVaWGgwVTI5MWNtTmxLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJCZG05cFpDQmlkV2R6SUhkb1pXNGdhR0Z6VDNkdVVISnZjR1Z5ZEhrZ2FYTWdjMmhoWkc5M1pXUmNibHgwWEhSY2RGeDBYSFJjZEdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29ibVY0ZEZOdmRYSmpaU3dnYm1WNGRFdGxlU2twSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZEc5YmJtVjRkRXRsZVYwZ1BTQnVaWGgwVTI5MWNtTmxXMjVsZUhSTFpYbGRPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJSFJ2TzF4dVhIUmNkSDBzWEc1Y2RGeDBkM0pwZEdGaWJHVTZJSFJ5ZFdVc1hHNWNkRngwWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc1Y2RIMHBPMXh1ZlNJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBSR1ZtWVhWc2RFTnZiblJoYVc1bGNraGxhV2RvZENoamIyNW1hV2NwSUh0Y2JseDBjbVYwZFhKdUlIZHBibVJ2ZHk1cGJtNWxja2hsYVdkb2RDQXRJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1kyOXVabWxuTG5ObGJHVmpkRzl5Y3k1dFlXbHVRMjl1ZEdGcGJtVnlLUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTNTBiM0FnTFZ4dVhIUmNkRngwS0dOdmJtWnBaeTVvWldGa1pYSnpMbXhsYm1kMGFDQXJJQ2hqYjI1bWFXY3VabWxzZEdWeUxtVnVZV0pzWldRZ1B5QXhJRG9nTUNrcElDb2dZMjl1Wm1sbkxtUnBiV1Z1YzJsdmJuTXVZMlZzYkVobGFXZG9kQ0F0SURVeU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkpibVJsZUU5bVEyVnNiRXRsZVVobFlXUmxjaWhqYjI1bWFXY3BJSHRjYmx4MGNtVjBkWEp1SUdOdmJtWnBaeTVvWldGa1pYSnpMbXhsYm1kMGFDQXRJREU3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZOdmNuUkVaV1poZFd4MEtHTnZibVpwWnlrZ2UxeHVYSFJ5WlhSMWNtNGdZMjl1Wm1sbkxuVnVhWEYxWlZKdmQwdGxlVHRjYm4xY2JseHVMeThnUm1seVpXWnZlQ0IxYzJsdVp5Qk5iM1Z6WlVWMlpXNTBMa1JQVFY5RVJVeFVRVjlNU1U1RklIeDhJRTF2ZFhObFJYWmxiblF1UkU5TlgwUkZURlJCWDFCQlIwVWdhVzV6ZEdWaFpDQnZaaUJsZUdGamRDQndhWGhsYkhNc0lIZG9aVzRnYldWaGMzVnlhVzVuSUhOamNtOXNiQ0JrWld4MFlTQjJZV3gxWlhNdVhHNHZMeUJVYUdseklHWjFibU4wYVc5dUlIZHBiR3dnWjJsMlpTQjBhR1VnWlhoaFkzUWdiR2x1WlNCb1pXbG5hSFFnWm05eUlIUm9aU0J3YVhobGJDQmpiMjUyWlhKemFXOXVYRzVtZFc1amRHbHZiaUJuWlhSVFkzSnZiR3hNYVc1bFNHVnBaMmgwS0NrZ2UxeHVYSFIyWVhJZ2FXWnlZVzFsSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYVdaeVlXMWxKeWs3WEc1Y2JseDBhV1p5WVcxbExuTnlZeUE5SUNjakp6dGNibHgwWkc5amRXMWxiblF1WW05a2VTNWhjSEJsYm1SRGFHbHNaQ2hwWm5KaGJXVXBPMXh1WEc1Y2RIWmhjaUJwZDJsdUlEMGdhV1p5WVcxbExtTnZiblJsYm5SWGFXNWtiM2NzWEc1Y2RGeDBhV1J2WXlBOUlHbDNhVzR1Wkc5amRXMWxiblE3WEc1Y2JseDBhV1J2WXk1dmNHVnVLQ2s3WEc1Y2RHbGtiMk11ZDNKcGRHVW9KendoUkU5RFZGbFFSU0JvZEcxc1BqeG9kRzFzUGp4b1pXRmtQand2YUdWaFpENDhZbTlrZVQ0OGMzQmhiajVoUEM5emNHRnVQand2WW05a2VUNDhMMmgwYld3K0p5azdYRzVjZEdsa2IyTXVZMnh2YzJVb0tUdGNibHh1WEhSMllYSWdjM0JoYmlBOUlHbGtiMk11WW05a2VTNW1hWEp6ZEVWc1pXMWxiblJEYUdsc1pDeGNibHgwWEhSeUlEMGdjM0JoYmk1dlptWnpaWFJJWldsbmFIUTdYRzVjYmx4MFpHOWpkVzFsYm5RdVltOWtlUzV5WlcxdmRtVkRhR2xzWkNocFpuSmhiV1VwTzF4dVhHNWNkSEpsZEhWeWJpQnlPMXh1ZlZ4dVhHNHZMeUJHYVhKbFptOTRJSFZ6YVc1bklFMXZkWE5sUlhabGJuUXVSRTlOWDBSRlRGUkJYMHhKVGtVZ2ZId2dUVzkxYzJWRmRtVnVkQzVFVDAxZlJFVk1WRUZmVUVGSFJTQnBibk4wWldGa0lHOW1JR1Y0WVdOMElIQnBlR1ZzY3l3Z2QyaGxiaUJ0WldGemRYSnBibWNnYzJOeWIyeHNJR1JsYkhSaElIWmhiSFZsY3k1Y2JpOHZJRlJvYVhNZ1puVnVZM1JwYjI0Z2QybHNiQ0JuYVhabElIUm9aU0JsZUdGamRDQndZV2RsSUdobGFXZG9kQ0JtYjNJZ2RHaGxJSEJwZUdWc0lHTnZiblpsY25OcGIyNWNibVoxYm1OMGFXOXVJR2RsZEZOamNtOXNiRkJoWjJWSVpXbG5hSFFvS1NCN1hHNWNkSEpsZEhWeWJpQjNhVzVrYjNjdVpHOWpkVzFsYm5RdVltOWtlUzVqYkdsbGJuUklaV2xuYUhRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFTmxiR3hHZFd4c1YybGtkR2dvWTI5dVptbG5LU0I3WEc1Y2RISmxkSFZ5YmlCamIyNW1hV2N1WkdsdFpXNXphVzl1Y3k1alpXeHNVR0ZrWkdsdVowaHZjbWw2YjI1MFlXd2dLaUF5SUNzZ1kyOXVabWxuTG1ScGJXVnVjMmx2Ym5NdVkyVnNiRmRwWkhSb0lDc2dZMjl1Wm1sbkxtUnBiV1Z1YzJsdmJuTXVZMlZzYkVKdmNtUmxjbGRwWkhSb08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkxaWGxJWldGa1pYSW9ZMjl1Wm1sbktTQjdYRzVjZEhKbGRIVnliaUJqYjI1bWFXY3VhR1ZoWkdWeWMxdGpiMjVtYVdjdWFXNXVaWEl1YVc1a1pYaFBaa05sYkd4TFpYbElaV0ZrWlhKZE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkdhWGhsWkV0bGVVaGxZV1JsY2loamIyNW1hV2NwSUh0Y2JseDBjbVYwZFhKdUlHTnZibVpwWnk1bWFYaGxaRWhsWVdSbGNuTmJZMjl1Wm1sbkxtbHVibVZ5TG1sdVpHVjRUMlpEWld4c1MyVjVTR1ZoWkdWeVhUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBTR1ZoWkdWeVQySnFaV04wS0dOdmJtWnBaeXdnWVhSMGNtbGlkWFJsS1NCN1hHNWNkSEpsZEhWeWJpQm5aWFJMWlhsSVpXRmtaWElvWTI5dVptbG5LUzVtYVc1a0tHWjFibU4wYVc5dUtHTnZiSFZ0YmlrZ2UxeHVYSFJjZEhKbGRIVnliaUJqYjJ4MWJXNHVhMlY1SUQwOVBTQmhkSFJ5YVdKMWRHVTdYRzVjZEgwcElIeDhJR2RsZEVacGVHVmtTMlY1U0dWaFpHVnlLR052Ym1acFp5a3VabWx1WkNobWRXNWpkR2x2YmloamIyeDFiVzRwSUh0Y2JseDBYSFJ5WlhSMWNtNGdZMjlzZFcxdUxtdGxlU0E5UFQwZ1lYUjBjbWxpZFhSbE8xeHVYSFI5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYm1sc0tDa2dlMXh1WEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN2ZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2QzSmhjSEJsY2lobUtTQjdYRzVjZEhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUdZN0lIMDdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVYSFJuWlhSRVpXWmhkV3gwUTI5dWRHRnBibVZ5U0dWcFoyaDBPaUJuWlhSRVpXWmhkV3gwUTI5dWRHRnBibVZ5U0dWcFoyaDBMRnh1WEhSblpYUkpibVJsZUU5bVEyVnNiRXRsZVVobFlXUmxjam9nWjJWMFNXNWtaWGhQWmtObGJHeExaWGxJWldGa1pYSXNYRzVjZEdkbGRGTnZjblJFWldaaGRXeDBPaUJuWlhSVGIzSjBSR1ZtWVhWc2RDeGNibHgwWjJWMFUyTnliMnhzVEdsdVpVaGxhV2RvZERvZ1oyVjBVMk55YjJ4c1RHbHVaVWhsYVdkb2RDeGNibHgwWjJWMFUyTnliMnhzVUdGblpVaGxhV2RvZERvZ1oyVjBVMk55YjJ4c1VHRm5aVWhsYVdkb2RDeGNibHgwWjJWMFEyVnNiRVoxYkd4WGFXUjBhRG9nWjJWMFEyVnNiRVoxYkd4WGFXUjBhQ3hjYmx4MFoyVjBTMlY1U0dWaFpHVnlPaUJuWlhSTFpYbElaV0ZrWlhJc1hHNWNkR2RsZEVacGVHVmtTMlY1U0dWaFpHVnlPaUJuWlhSR2FYaGxaRXRsZVVobFlXUmxjaXhjYmx4MFoyVjBTR1ZoWkdWeVQySnFaV04wT2lCblpYUklaV0ZrWlhKUFltcGxZM1FzWEc1Y2RHNXBiRG9nYm1sc0xGeHVYSFIzY21Gd2NHVnlPaUIzY21Gd2NHVnlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRVpKVEZSRlVsOVVXVkJGVXlBOUlGc2dKMlZ4ZFdGc2N5Y3NJQ2RsY1hWaGJITkRZWE5sU1c1elpXNXphWFJwZG1VbkxDQW5iR2xyWlNjc0lDZHNhV3RsUTJGelpVbHVjMlZ1YzJsMGFYWmxKeXdnSjJkeVpXRjBaWEpVYUdGdUp5d2dKMmR5WldGMFpYSlBja1Z4ZFdGc0p5eGNibHgwSjJ4bGMzTlVhR0Z1Snl3Z0oyeGxjM05QY2tWeGRXRnNKeXdnSjJKbGRIZGxaVzRuTENBblltVjBkMlZsYmtsdVkyeDFjMmwyWlNjc0lDZGpiMjUwWVdsdWN5Y2dYVHRjYmx4dVpuVnVZM1JwYjI0Z1pHVm1ZWFZzZEVOdmJYQmhjbUYwYjNJb1lTd2dZaXdnYjNCMGFXOXVjeWtnZTF4dVhIUjJZWElnWVhSMGNrRWdQU0JuWlhSTlpYSm5aV1JXWVd4MVpTaGhMQ0J2Y0hScGIyNXpMbUYwZEhKcFluVjBaU3dnYjNCMGFXOXVjeTVsWkdsMFpXUldZV3gxWlhNc0lHOXdkR2x2Ym5NdWRXNXBjWFZsVW05M1MyVjVLU3hjYmx4MFhIUmhkSFJ5UWlBOUlHZGxkRTFsY21kbFpGWmhiSFZsS0dJc0lHOXdkR2x2Ym5NdVlYUjBjbWxpZFhSbExDQnZjSFJwYjI1ekxtVmthWFJsWkZaaGJIVmxjeXdnYjNCMGFXOXVjeTUxYm1seGRXVlNiM2RMWlhrcExGeHVYSFJjZEdselJHOTNiaUE5SUc5d2RHbHZibk11WkdseVpXTjBhVzl1SUQwOVBTQW5aRzkzYmljN1hHNWNibHgwYVdZZ0tHOXdkR2x2Ym5NdVpHRjBZVlI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc1Y2RGeDBkbUZ5SUdOdmJYQmhjbVZTWlhOMWJIUWdQU0F3TzF4dVhHNWNkRngwYVdZZ0tIUjVjR1Z2WmlCaGRIUnlRU0E5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhSY2RGeDBZMjl0Y0dGeVpWSmxjM1ZzZENBOUlDMHhPMXh1WEhSY2RIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHRjBkSEpDSUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RGeDBYSFJqYjIxd1lYSmxVbVZ6ZFd4MElEMGdNVHRjYmx4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFlYUjBja0VnS3owZ0p5YzdYRzVjZEZ4MFhIUmhkSFJ5UWlBclBTQW5KenRjYmx4dVhIUmNkRngwWTI5dGNHRnlaVkpsYzNWc2RDQTlJR0YwZEhKQkxteHZZMkZzWlVOdmJYQmhjbVVvWVhSMGNrSXNJRzl3ZEdsdmJuTXViRzlqWVd4bEtUdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnYVhORWIzZHVJSHg4SUdOdmJYQmhjbVZTWlhOMWJIUWdQVDA5SURBZ1B5QmpiMjF3WVhKbFVtVnpkV3gwSURvZ1kyOXRjR0Z5WlZKbGMzVnNkQ0FxSUMweE8xeHVYSFI5SUdWc2MyVWdhV1lnS0c5d2RHbHZibk11WkdGMFlWUjVjR1VnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzVjZEZ4MFlYUjBja0VnUFNCd1lYSnpaVVpzYjJGMEtHRjBkSEpCS1R0Y2JseDBYSFJoZEhSeVFpQTlJSEJoY25ObFJteHZZWFFvWVhSMGNrSXBPMXh1WEc1Y2RGeDBhV1lnS0dselRtRk9LR0YwZEhKQktTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHbHpSRzkzYmlBL0lDMHhJRG9nTVR0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb2FYTk9ZVTRvWVhSMGNrSXBLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdhWE5FYjNkdUlEOGdNU0E2SUMweE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RHbG1JQ2gwZVhCbGIyWWdZWFIwY2tFZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RIbHdaVzltSUdGMGRISkNJQ0U5SUNkMWJtUmxabWx1WldRbklIeDhJR0YwZEhKQklEd2dZWFIwY2tJcElIdGNibHgwWEhSeVpYUjFjbTRnYVhORWIzZHVJRDhnTFRFZ09pQXhPMXh1WEhSOVhHNWNibHgwYVdZZ0tIUjVjR1Z2WmlCaGRIUnlRU0FoUFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUIwZVhCbGIyWWdZWFIwY2tJZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NnZkh3Z1lYUjBja0VnUGlCaGRIUnlRaWtnZTF4dVhIUmNkSEpsZEhWeWJpQnBjMFJ2ZDI0Z1B5QXhJRG9nTFRFN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z01EdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHNkR1Z5UkdGMFlTaHZjSFJwYjI1ektTQjdYRzVjZEdsbUlDaEdTVXhVUlZKZlZGbFFSVk11YVc1a1pYaFBaaWh2Y0hScGIyNXpMbVpwYkhSbGNsUjVjR1VwSUQwOVBTQXRNU2tnZTF4dVhIUmNkSGRwYm1SdmR5NWpiMjV6YjJ4bExtVnljbTl5S0NkT2IzUWdZU0IyWVd4cFpDQm1hV3gwWlhJZ2RIbHdaU0VnS0NjZ0t5QnZjSFJwYjI1ekxtWnBiSFJsY2xSNWNHVWdLeUFuS1NjcE8xeHVYRzVjZEZ4MGNtVjBkWEp1SUc5d2RHbHZibk11WkdGMFlWTnZkWEpqWlR0Y2JseDBmVnh1WEc1Y2RITjNhWFJqYUNBb2IzQjBhVzl1Y3k1bWFXeDBaWEpVZVhCbEtTQjdYRzVjZEZ4MFkyRnpaU0FuWlhGMVlXeHpKenBjYmx4MFhIUmNkSEpsZEhWeWJpQmxjWFZoYkhOR2FXeDBaWElvYjNCMGFXOXVjeWs3WEc1Y2RGeDBZMkZ6WlNBblpYRjFZV3h6UTJGelpVbHVjMlZ1YzJsMGFYWmxKenBjYmx4MFhIUmNkSEpsZEhWeWJpQmxjWFZoYkhORFlYTmxTVzV6Wlc1emFYUnBkbVZHYVd4MFpYSW9iM0IwYVc5dWN5azdYRzVjZEZ4MFkyRnpaU0FuYkdsclpTYzZYRzVjZEZ4MFhIUnlaWFIxY200Z2JHbHJaVVpwYkhSbGNpaHZjSFJwYjI1ektUdGNibHgwWEhSallYTmxJQ2RzYVd0bFEyRnpaVWx1YzJWdWMybDBhWFpsSnpwY2JseDBYSFJjZEhKbGRIVnliaUJzYVd0bFEyRnpaVWx1YzJWdWMybDBhWFpsUm1sc2RHVnlLRzl3ZEdsdmJuTXBPMXh1WEhSY2RHTmhjMlVnSjJkeVpXRjBaWEpVYUdGdUp6cGNibHgwWEhSY2RISmxkSFZ5YmlCbmNtVmhkR1Z5VkdoaGJrWnBiSFJsY2lodmNIUnBiMjV6S1R0Y2JseDBYSFJqWVhObElDZG5jbVZoZEdWeVQzSkZjWFZoYkNjNlhHNWNkRngwWEhSeVpYUjFjbTRnWjNKbFlYUmxjazl5UlhGMVlXeEdhV3gwWlhJb2IzQjBhVzl1Y3lrN1hHNWNkRngwWTJGelpTQW5iR1Z6YzFSb1lXNG5PbHh1WEhSY2RGeDBjbVYwZFhKdUlHeGxjM05VYUdGdVJtbHNkR1Z5S0c5d2RHbHZibk1wTzF4dVhIUmNkR05oYzJVZ0oyeGxjM05QY2tWeGRXRnNKenBjYmx4MFhIUmNkSEpsZEhWeWJpQnNaWE56VDNKRmNYVmhiRVpwYkhSbGNpaHZjSFJwYjI1ektUdGNibHgwWEhSallYTmxJQ2RpWlhSM1pXVnVKenBjYmx4MFhIUmNkSEpsZEhWeWJpQmlaWFIzWldWdVJtbHNkR1Z5S0c5d2RHbHZibk1wTzF4dVhIUmNkR05oYzJVZ0oySmxkSGRsWlc1SmJtTnNkWE5wZG1Vbk9seHVYSFJjZEZ4MGNtVjBkWEp1SUdKbGRIZGxaVzVKYm1Oc2RYTnBkbVZHYVd4MFpYSW9iM0IwYVc5dWN5azdYRzVjZEZ4MFkyRnpaU0FuWTI5dWRHRnBibk1uT2x4dVhIUmNkRngwY21WMGRYSnVJR052Ym5SaGFXNXpSbWxzZEdWeUtHOXdkR2x2Ym5NcE8xeHVYSFJjZEdSbFptRjFiSFE2WEc1Y2RGeDBYSFJ5WlhSMWNtNGdiM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxPMXh1WEhSOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWeGRXRnNjMFpwYkhSbGNpaHZjSFJwYjI1ektTQjdYRzVjZEhKbGRIVnliaUJ2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVYSFJjZEhKbGRIVnliaUJuWlhSTlpYSm5aV1JXWVd4MVpTaHZZbW9zSUc5d2RHbHZibk11WVhSMGNtbGlkWFJsTENCdmNIUnBiMjV6TG1Wa2FYUmxaRlpoYkhWbGN5d2diM0IwYVc5dWN5NTFibWx4ZFdWU2IzZExaWGtwSUQwOVBTQnZjSFJwYjI1ekxuWmhiSFZsVDI1bE8xeHVYSFI5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWlhGMVlXeHpRMkZ6WlVsdWMyVnVjMmwwYVhabFJtbHNkR1Z5S0c5d2RHbHZibk1wSUh0Y2JseDBjbVYwZFhKdUlHOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNW1hV3gwWlhJb1puVnVZM1JwYjI0b2IySnFLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHZGxkRTFsY21kbFpGWmhiSFZsS0c5aWFpd2diM0IwYVc5dWN5NWhkSFJ5YVdKMWRHVXNJRzl3ZEdsdmJuTXVaV1JwZEdWa1ZtRnNkV1Z6TENCdmNIUnBiMjV6TG5WdWFYRjFaVkp2ZDB0bGVTa3VkRzlWY0hCbGNrTmhjMlVvS1NBOVBUMGdiM0IwYVc5dWN5NTJZV3gxWlU5dVpTNTBiMVZ3Y0dWeVEyRnpaU2dwTzF4dVhIUjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdiR2xyWlVacGJIUmxjaWh2Y0hScGIyNXpLU0I3WEc1Y2RISmxkSFZ5YmlCdmNIUnBiMjV6TG1SaGRHRlRiM1Z5WTJVdVptbHNkR1Z5S0daMWJtTjBhVzl1S0c5aWFpa2dlMXh1WEhSY2RISmxkSFZ5YmlCblpYUk5aWEpuWldSV1lXeDFaU2h2WW1vc0lHOXdkR2x2Ym5NdVlYUjBjbWxpZFhSbExDQnZjSFJwYjI1ekxtVmthWFJsWkZaaGJIVmxjeXdnYjNCMGFXOXVjeTUxYm1seGRXVlNiM2RMWlhrcExtbHVaR1Y0VDJZb2IzQjBhVzl1Y3k1MllXeDFaVTl1WlNrZ0lUMDlJQzB4TzF4dVhIUjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdiR2xyWlVOaGMyVkpibk5sYm5OcGRHbDJaVVpwYkhSbGNpaHZjSFJwYjI1ektTQjdYRzVjZEhKbGRIVnliaUJ2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVYSFJjZEhKbGRIVnliaUJuWlhSTlpYSm5aV1JXWVd4MVpTaHZZbW9zSUc5d2RHbHZibk11WVhSMGNtbGlkWFJsTENCdmNIUnBiMjV6TG1Wa2FYUmxaRlpoYkhWbGN5d2diM0IwYVc5dWN5NTFibWx4ZFdWU2IzZExaWGtwTG5SdlZYQndaWEpEWVhObEtDa3VhVzVrWlhoUFppaHZjSFJwYjI1ekxuWmhiSFZsVDI1bExuUnZWWEJ3WlhKRFlYTmxLQ2twSUNFOVBTQXRNVHRjYmx4MGZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZHlaV0YwWlhKVWFHRnVSbWxzZEdWeUtHOXdkR2x2Ym5NcElIdGNibHgwY21WMGRYSnVJRzl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzVtYVd4MFpYSW9ablZ1WTNScGIyNG9iMkpxS1NCN1hHNWNkRngwY21WMGRYSnVJR2RsZEUxbGNtZGxaRlpoYkhWbEtHOWlhaXdnYjNCMGFXOXVjeTVoZEhSeWFXSjFkR1VzSUc5d2RHbHZibk11WldScGRHVmtWbUZzZFdWekxDQnZjSFJwYjI1ekxuVnVhWEYxWlZKdmQwdGxlU2tnUGlCdmNIUnBiMjV6TG5aaGJIVmxUMjVsTzF4dVhIUjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdaM0psWVhSbGNrOXlSWEYxWVd4R2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4dVhIUnlaWFIxY200Z2IzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtWnBiSFJsY2lobWRXNWpkR2x2Ymlodlltb3BJSHRjYmx4MFhIUnlaWFIxY200Z1oyVjBUV1Z5WjJWa1ZtRnNkV1VvYjJKcUxDQnZjSFJwYjI1ekxtRjBkSEpwWW5WMFpTd2diM0IwYVc5dWN5NWxaR2wwWldSV1lXeDFaWE1zSUc5d2RHbHZibk11ZFc1cGNYVmxVbTkzUzJWNUtTQStQU0J2Y0hScGIyNXpMblpoYkhWbFQyNWxPMXh1WEhSOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JHVnpjMVJvWVc1R2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4dVhIUnlaWFIxY200Z2IzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtWnBiSFJsY2lobWRXNWpkR2x2Ymlodlltb3BJSHRjYmx4MFhIUnlaWFIxY200Z1oyVjBUV1Z5WjJWa1ZtRnNkV1VvYjJKcUxDQnZjSFJwYjI1ekxtRjBkSEpwWW5WMFpTd2diM0IwYVc5dWN5NWxaR2wwWldSV1lXeDFaWE1zSUc5d2RHbHZibk11ZFc1cGNYVmxVbTkzUzJWNUtTQThJRzl3ZEdsdmJuTXVkbUZzZFdWUGJtVTdYRzVjZEgwcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCc1pYTnpUM0pGY1hWaGJFWnBiSFJsY2lodmNIUnBiMjV6S1NCN1hHNWNkSEpsZEhWeWJpQnZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVabWxzZEdWeUtHWjFibU4wYVc5dUtHOWlhaWtnZTF4dVhIUmNkSEpsZEhWeWJpQm5aWFJOWlhKblpXUldZV3gxWlNodlltb3NJRzl3ZEdsdmJuTXVZWFIwY21saWRYUmxMQ0J2Y0hScGIyNXpMbVZrYVhSbFpGWmhiSFZsY3l3Z2IzQjBhVzl1Y3k1MWJtbHhkV1ZTYjNkTFpYa3BJRHc5SUc5d2RHbHZibk11ZG1Gc2RXVlBibVU3WEc1Y2RIMHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmlaWFIzWldWdVJtbHNkR1Z5S0c5d2RHbHZibk1wSUh0Y2JseDBjbVYwZFhKdUlHOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNW1hV3gwWlhJb1puVnVZM1JwYjI0b2IySnFLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHZGxkRTFsY21kbFpGWmhiSFZsS0c5aWFpd2diM0IwYVc5dWN5NWhkSFJ5YVdKMWRHVXNJRzl3ZEdsdmJuTXVaV1JwZEdWa1ZtRnNkV1Z6TENCdmNIUnBiMjV6TG5WdWFYRjFaVkp2ZDB0bGVTa2dQaUJ2Y0hScGIyNXpMblpoYkhWbFQyNWxJQ1ltSUc5aWFsdHZjSFJwYjI1ekxtRjBkSEpwWW5WMFpWMGdQQ0J2Y0hScGIyNXpMblpoYkhWbFZIZHZPMXh1WEhSOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1ltVjBkMlZsYmtsdVkyeDFjMmwyWlVacGJIUmxjaWh2Y0hScGIyNXpLU0I3WEc1Y2RISmxkSFZ5YmlCdmNIUnBiMjV6TG1SaGRHRlRiM1Z5WTJVdVptbHNkR1Z5S0daMWJtTjBhVzl1S0c5aWFpa2dlMXh1WEhSY2RISmxkSFZ5YmlCblpYUk5aWEpuWldSV1lXeDFaU2h2WW1vc0lHOXdkR2x2Ym5NdVlYUjBjbWxpZFhSbExDQnZjSFJwYjI1ekxtVmthWFJsWkZaaGJIVmxjeXdnYjNCMGFXOXVjeTUxYm1seGRXVlNiM2RMWlhrcElENDlJRzl3ZEdsdmJuTXVkbUZzZFdWUGJtVWdKaVlnYjJKcVcyOXdkR2x2Ym5NdVlYUjBjbWxpZFhSbFhTQThQU0J2Y0hScGIyNXpMblpoYkhWbFZIZHZPMXh1WEhSOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyOXVkR0ZwYm5OR2FXeDBaWElvYjNCMGFXOXVjeWtnZTF4dVhIUnlaWFIxY200Z2IzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtWnBiSFJsY2lobWRXNWpkR2x2Ymlodlltb3BJSHRjYmx4MFhIUnlaWFIxY200Z2IzQjBhVzl1Y3k1MllXeDFaVTl1WlM1cGJtUmxlRTltS0dkbGRFMWxjbWRsWkZaaGJIVmxLRzlpYWl3Z2IzQjBhVzl1Y3k1aGRIUnlhV0oxZEdVc0lHOXdkR2x2Ym5NdVpXUnBkR1ZrVm1Gc2RXVnpMQ0J2Y0hScGIyNXpMblZ1YVhGMVpWSnZkMHRsZVNrcElDRTlQU0F0TVR0Y2JseDBmU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZaaGJIVmxRbmxVZVhCbEtIWmhiSFZsTENCa1lYUmhWSGx3WlNrZ2UxeHVYSFJwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZEZ4MGNtVjBkWEp1SUhaaGJIVmxPMXh1WEhSOVhHNWNibHgwYzNkcGRHTm9JQ2hrWVhSaFZIbHdaU2tnZTF4dVhIUmNkR05oYzJVZ0ozTjBjbWx1WnljNlhHNWNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVXVkRzlUZEhKcGJtY29LVHRjYmx4MFhIUmpZWE5sSUNkdWRXMWlaWEluT2x4dVhIUmNkRngwY21WMGRYSnVJSEJoY25ObFJteHZZWFFvZG1Gc2RXVXBPMXh1WEhSY2RHUmxabUYxYkhRNlhHNWNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVTdYRzVjZEgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFRXVnlaMlZrVm1Gc2RXVW9jbTkzTENCaGRIUnlhV0oxZEdVc0lHVmthWFJsWkZaaGJIVmxjeXdnZFc1cGNYVmxVbTkzUzJWNUtTQjdYRzVjZEhaaGNpQmxaR2wwWldSU2IzY2dQU0JsWkdsMFpXUldZV3gxWlhOYmNtOTNXM1Z1YVhGMVpWSnZkMHRsZVYxZE8xeHVYRzVjZEhKbGRIVnliaUIwZVhCbGIyWWdaV1JwZEdWa1VtOTNJRDA5SUNkMWJtUmxabWx1WldRbklIeDhJSFI1Y0dWdlppQmxaR2wwWldSU2IzZGJZWFIwY21saWRYUmxYU0E5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JSEp2ZDF0aGRIUnlhV0oxZEdWZElEb2daV1JwZEdWa1VtOTNXMkYwZEhKcFluVjBaVjA3WEc1OVhHNWNibVoxYm1OMGFXOXVJR05zYjI1bFQySnFaV04wS0c5aWFpa2dlMXh1WEhSeVpYUjFjbTRnU2xOUFRpNXdZWEp6WlNoS1UwOU9Mbk4wY21sdVoybG1lU2h2WW1vcEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNWNkR1JsWm1GMWJIUkRiMjF3WVhKaGRHOXlPaUJrWldaaGRXeDBRMjl0Y0dGeVlYUnZjaXhjYmx4MFptbHNkR1Z5UkdGMFlUb2dabWxzZEdWeVJHRjBZU3hjYmx4MFoyVjBWbUZzZFdWQ2VWUjVjR1U2SUdkbGRGWmhiSFZsUW5sVWVYQmxMRnh1WEhSamJHOXVaVTlpYW1WamREb2dZMnh2Ym1WUFltcGxZM1JjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNW1kVzVqZEdsdmJpQnBibVJsZUU5bVJXeGxiV1Z1ZENobGJHVnRaVzUwS1NCN1hHNWNkSFpoY2lCamIyeHNaV04wYVc5dUlEMGdaV3hsYldWdWRDNXdZWEpsYm5ST2IyUmxMbU5vYVd4a1RtOWtaWE03WEc1Y2JseDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JqYjJ4c1pXTjBhVzl1TG14bGJtZDBhRHNnYVNzcktTQjdYRzVjZEZ4MGFXWWdLR052Ykd4bFkzUnBiMjViYVYwZ1BUMDlJR1ZzWlcxbGJuUXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnBPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQXRNVHRjYm4xY2JseHVablZ1WTNScGIyNGdabWx1WkZCaGNtVnVkRTV2WkdVb1kyaHBiR1FzSUhObGJHVmpkRzl5S1NCN1hHNWNkR2xtSUNoamFHbHNaQzV3WVhKbGJuUk9iMlJsSUQwOVBTQnVkV3hzS1NCN1hHNWNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkSDBnWld4elpTQnBaaUFvWTJocGJHUXVjR0Z5Wlc1MFRtOWtaUzV0WVhSamFHVnpLSE5sYkdWamRHOXlLU2tnZTF4dVhIUmNkSEpsZEhWeWJpQmphR2xzWkM1d1lYSmxiblJPYjJSbE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlHWnBibVJRWVhKbGJuUk9iMlJsS0dOb2FXeGtMbkJoY21WdWRFNXZaR1VzSUhObGJHVmpkRzl5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFVtOTNUblZ0WW1WeUtHTnZibVpwWnl3Z1kyVnNiRTV2WkdVcElIdGNibHgwY21WMGRYSnVJR2x1WkdWNFQyWkZiR1Z0Wlc1MEtHTmxiR3hPYjJSbExuQmhjbVZ1ZEU1dlpHVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJEYjJ4MWJXNU9kVzFpWlhJb1kyOXVabWxuTENCalpXeHNUbTlrWlNrZ2UxeHVYSFJ5WlhSMWNtNGdhVzVrWlhoUFprVnNaVzFsYm5Rb1kyVnNiRTV2WkdVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwVnNiR2x3YzJselFXTjBhWFpsS0dWc1pXMWxiblFwSUh0Y2JseDBjbVYwZFhKdUlHVnNaVzFsYm5RdWIyWm1jMlYwVjJsa2RHZ2dQQ0JsYkdWdFpXNTBMbk5qY205c2JGZHBaSFJvTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzA5MlpYSm1iRzkzYmlobGJHVnRaVzUwS1NCN1hHNWNkSEpsZEhWeWJpQmxiR1Z0Wlc1MExuTmpjbTlzYkVobGFXZG9kQ0ErSUdWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoMElIeDhJR1ZzWlcxbGJuUXVjMk55YjJ4c1YybGtkR2dnUGlCbGJHVnRaVzUwTG1Oc2FXVnVkRmRwWkhSb08xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JseDBhVzVrWlhoUFprVnNaVzFsYm5RNklHbHVaR1Y0VDJaRmJHVnRaVzUwTEZ4dVhIUm1hVzVrVUdGeVpXNTBUbTlrWlRvZ1ptbHVaRkJoY21WdWRFNXZaR1VzWEc1Y2RHZGxkRkp2ZDA1MWJXSmxjam9nWjJWMFVtOTNUblZ0WW1WeUxGeHVYSFJuWlhSRGIyeDFiVzVPZFcxaVpYSTZJR2RsZEVOdmJIVnRiazUxYldKbGNpeGNibHgwYVhORmJHeHBjSE5wYzBGamRHbDJaVG9nYVhORmJHeHBjSE5wYzBGamRHbDJaU3hjYmx4MGFYTlBkbVZ5Wm14dmQyNDZJR2x6VDNabGNtWnNiM2R1WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUV0RldWOURUMFJGVXlBOUlIdGNibHgwUlU1VVJWSTZJREV6TEZ4dVhIUkZVME5CVUVVNklESTNYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQm5aWFJMWlhsRGIyUmxLR1YyWlc1MEtTQjdYRzVjZEhKbGRIVnliaUJsZG1WdWRDNXJaWGxEYjJSbElIeDhJR1YyWlc1MExuZG9hV05vTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmx4MFoyVjBTMlY1UTI5a1pUb2daMlYwUzJWNVEyOWtaU3hjYmx4MFMwVlpYME5QUkVWVE9pQkxSVmxmUTA5RVJWTmNibjA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdRMlZzYkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dUwyMXZaR1ZzY3k5a1lYUmhMMk5sYkd3bktTeGNibHgwWTI5dVptbG5WWFJwYkNBOUlISmxjWFZwY21Vb0p5NHVMM1YwYVd4ekwyTnZibVpwWjNWeVlYUnBiMjRuS1R0Y2JseHVablZ1WTNScGIyNGdaMlYwUTJWc2JFUmhkR0VvWTI5dVptbG5MQ0J5YjNkT2RXMWlaWElzSUdOdmJIVnRiazUxYldKbGNpa2dlMXh1WEhSMllYSWdZMlZzYkVSaGRHRWdQU0J1ZFd4c0xGeHVYSFJjZEdobFlXUmxjazlpYWlBOUlHTnZibVpwWjFWMGFXd3VaMlYwUzJWNVNHVmhaR1Z5S0dOdmJtWnBaeWxiWTI5c2RXMXVUblZ0WW1WeVhTeGNibHgwWEhSMWJtbHhkV1ZTYjNkTFpYa2dQU0J1ZFd4c08xeHVYRzVjZEM4dklFbG1JSFJvWlNCcGJtUmxlQ0JwY3lCb2FXZG9aWElnZEdoaGJpQjBhR1VnWVhaaGFXeGhZbXhsSUhKdmQzTWdiblZ0WW1WeVhHNWNkR2xtSUNoeWIzZE9kVzFpWlhJZ1BqMGdZMjl1Wm1sbkxtUmhkR0ZUYjNWeVkyVXViR1Z1WjNSb0tTQjdYRzVjZEZ4MFkyVnNiRVJoZEdFZ1BTQnVaWGNnUTJWc2JDaDdYRzVjZEZ4MFhIUnJaWGs2SUdobFlXUmxjazlpYWk1clpYa3NYRzVjZEZ4MFhIUjJZV3gxWlRvZ0p5Y3NYRzVjZEZ4MFhIUmtZWFJoVkhsd1pUb2dhR1ZoWkdWeVQySnFMbVJoZEdGVWVYQmxYRzVjZEZ4MGZTazdYRzVjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBkVzVwY1hWbFVtOTNTMlY1SUQwZ1kyOXVabWxuTG1SaGRHRlRiM1Z5WTJWYmNtOTNUblZ0WW1WeVhWdGpiMjVtYVdjdWRXNXBjWFZsVW05M1MyVjVYVHRjYmx4MFhIUmpaV3hzUkdGMFlTQTlJRzVsZHlCRFpXeHNLSHRjYmx4MFhIUmNkR3RsZVRvZ2FHVmhaR1Z5VDJKcUxtdGxlU3hjYmx4MFhIUmNkSFpoYkhWbE9pQmpiMjVtYVdjdVpHRjBZVk52ZFhKalpWdHliM2RPZFcxaVpYSmRXMmhsWVdSbGNrOWlhaTVyWlhsZExGeHVYSFJjZEZ4MFpHRjBZVlI1Y0dVNklHaGxZV1JsY2s5aWFpNWtZWFJoVkhsd1pTeGNibHgwWEhSY2RISnZkMDUxYldKbGNqb2djbTkzVG5WdFltVnlMRnh1WEhSY2RGeDBZMjlzZFcxdVRuVnRZbVZ5T2lCamIyeDFiVzVPZFcxaVpYSXNYRzVjZEZ4MFhIUjJZV3hwWkdGMGIzSlBZbXBsWTNRNklHaGxZV1JsY2s5aWFpNTJZV3hwWkdGMGIzSlBZbXBsWTNRc1hHNWNkRngwWEhSamRYTjBiMjFXWVd4cFpHRjBiM0k2SUdobFlXUmxjazlpYWk1amRYTjBiMjFXWVd4cFpHRjBiM0pjYmx4MFhIUjlLVHRjYmx4dVhIUmNkR2xtSUNoMGVYQmxiMllnWTI5dVptbG5MbWx1Ym1WeUxtVmthWFJsWkZaaGJIVmxjMXQxYm1seGRXVlNiM2RMWlhsZElDRTlJQ2QxYm1SbFptbHVaV1FuSUNZbVhHNWNkRngwWEhSMGVYQmxiMllnWTI5dVptbG5MbWx1Ym1WeUxtVmthWFJsWkZaaGJIVmxjMXQxYm1seGRXVlNiM2RMWlhsZFcyaGxZV1JsY2s5aWFpNXJaWGxkSUNFOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2JseDBYSFJjZEdObGJHeEVZWFJoTG1Oc1lYTnpJRDBnWTI5dVptbG5Mbk5sYkdWamRHOXljeTVsWkdsMFpXUkRaV3hzTzF4dVhIUmNkRngwWTJWc2JFUmhkR0V1ZFhCa1lYUmxWbUZzZFdVb1kyOXVabWxuTG1sdWJtVnlMbVZrYVhSbFpGWmhiSFZsYzF0MWJtbHhkV1ZTYjNkTFpYbGRXMmhsWVdSbGNrOWlhaTVyWlhsZEtUdGNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z1kyVnNiRVJoZEdFN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFWnBlR1ZrUTJWc2JFUmhkR0VvWTI5dVptbG5MQ0J5YjNkT2RXMWlaWElzSUdOdmJIVnRiazUxYldKbGNpa2dlMXh1WEhSMllYSWdZMlZzYkVSaGRHRWdQU0J1ZFd4c0xGeHVYSFJjZEdobFlXUmxjazlpYWlBOUlHTnZibVpwWjFWMGFXd3VaMlYwUm1sNFpXUkxaWGxJWldGa1pYSW9ZMjl1Wm1sbktWdGpiMngxYlc1T2RXMWlaWEpkTzF4dVhHNWNkQzh2SUVsbUlIUm9aU0JwYm1SbGVDQnBjeUJvYVdkb1pYSWdkR2hoYmlCMGFHVWdZWFpoYVd4aFlteGxJSEp2ZDNNZ2JuVnRZbVZ5WEc1Y2RHbG1JQ2h5YjNkT2RXMWlaWElnUGowZ1kyOXVabWxuTG1SaGRHRlRiM1Z5WTJVdWJHVnVaM1JvS1NCN1hHNWNkRngwWTJWc2JFUmhkR0VnUFNCdVpYY2dRMlZzYkNoN1hHNWNkRngwWEhSclpYazZJR2hsWVdSbGNrOWlhaTVyWlhrc1hHNWNkRngwWEhSMllXeDFaVG9nSnljc1hHNWNkRngwWEhSa1lYUmhWSGx3WlRvZ2FHVmhaR1Z5VDJKcUxtUmhkR0ZVZVhCbFhHNWNkRngwZlNrN1hHNWNkSDBnWld4elpTQjdYRzVjZEZ4MFkyVnNiRVJoZEdFZ1BTQnVaWGNnUTJWc2JDaDdYRzVjZEZ4MFhIUnJaWGs2SUdobFlXUmxjazlpYWk1clpYa3NYRzVjZEZ4MFhIUjJZV3gxWlRvZ1kyOXVabWxuTG1SaGRHRlRiM1Z5WTJWYmNtOTNUblZ0WW1WeVhWdG9aV0ZrWlhKUFltb3VhMlY1WFN4Y2JseDBYSFJjZEdSaGRHRlVlWEJsT2lCb1pXRmtaWEpQWW1vdVpHRjBZVlI1Y0dVc1hHNWNkRngwWEhSeWIzZE9kVzFpWlhJNklISnZkMDUxYldKbGNpeGNibHgwWEhSY2RHTnZiSFZ0Yms1MWJXSmxjam9nWTI5c2RXMXVUblZ0WW1WeUxGeHVYSFJjZEZ4MGRtRnNhV1JoZEc5eVQySnFaV04wT2lCb1pXRmtaWEpQWW1vdWRtRnNhV1JoZEc5eVQySnFaV04wTEZ4dVhIUmNkRngwWTNWemRHOXRWbUZzYVdSaGRHOXlPaUJvWldGa1pYSlBZbW91WTNWemRHOXRWbUZzYVdSaGRHOXlYRzVjZEZ4MGZTazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdZMlZzYkVSaGRHRTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWxjbWRsUldScGRHVmtWbUZzZFdWelNXNVNiM2NvWTI5dVptbG5MQ0J5YjNjcElIdGNibHgwZG1GeUlHMWxjbWRsWkZKdmQwUmhkR0VnUFNCN2ZTeGNibHgwWEhSMWJtbHhkV1ZTYjNkTFpYa2dQU0J5YjNkYlkyOXVabWxuTG5WdWFYRjFaVkp2ZDB0bGVWMDdYRzVjYmx4MGFXWWdLSFI1Y0dWdlppQmpiMjVtYVdjdWFXNXVaWEl1WldScGRHVmtWbUZzZFdWelczVnVhWEYxWlZKdmQwdGxlVjBnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MFhIUnlaWFIxY200Z2NtOTNPMXh1WEhSOVhHNWNibHgwVDJKcVpXTjBMbXRsZVhNb2NtOTNLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVYSFJjZEcxbGNtZGxaRkp2ZDBSaGRHRmJhMlY1WFNBOUlHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhOYmRXNXBjWFZsVW05M1MyVjVYVnRyWlhsZElIeDhJSEp2ZDF0clpYbGRPMXh1WEhSOUtUdGNibHh1WEhSeVpYUjFjbTRnYldWeVoyVmtVbTkzUkdGMFlUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXVnlaMlZGWkdsMFpXUldZV3gxWlhOSmJrUmhkR0ZUYjNWeVkyVW9ZMjl1Wm1sbkxDQmtjeWtnZTF4dVhIUjJZWElnYldWeVoyVmtSSE1nUFNCYlhUdGNibHh1WEhSa2N5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtISnZkeWtnZTF4dVhIUmNkRzFsY21kbFpFUnpMbkIxYzJnb2JXVnlaMlZGWkdsMFpXUldZV3gxWlhOSmJsSnZkeWhqYjI1bWFXY3NJSEp2ZHlrcE8xeHVYSFI5S1R0Y2JseHVYSFJ5WlhSMWNtNGdiV1Z5WjJWa1JITTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxjR0Z5WVhSbFZtRnNkV1Z6U1c1RVlYUmhVMjkxY21ObEtHTnZibVpwWnl3Z2JXVnlaMlZrUkhNcElIdGNibHgwZG1GeUlITmxjR0Z5WVhSbFpFUnpJRDBnVzEwN1hHNWNibHgwYldWeVoyVmtSSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWh0WlhKblpXUlNiM2NwSUh0Y2JseDBYSFIyWVhJZ2IzSnBaMmx1WVd4U2IzY2dQU0JqYjI1bWFXY3VhVzV1WlhJdWIzSnBaMmx1WVd4RVlYUmhVMjkxY21ObExtWnBibVFvWm5WdVkzUnBiMjRvY205M0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2NtOTNXMk52Ym1acFp5NTFibWx4ZFdWU2IzZExaWGxkSUQwOVBTQnRaWEpuWldSU2IzZGJZMjl1Wm1sbkxuVnVhWEYxWlZKdmQwdGxlVjA3WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFJwWmlBb2RIbHdaVzltSUc5eWFXZHBibUZzVW05M0lDRTlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkRngwWEhSelpYQmhjbUYwWldSRWN5NXdkWE5vS0c5eWFXZHBibUZzVW05M0tUdGNibHgwWEhSOVhHNWNkSDBwTzF4dVhHNWNkSEpsZEhWeWJpQnpaWEJoY21GMFpXUkVjenRjYm4xY2JseHVablZ1WTNScGIyNGdjM1J2Y21WVmNHUmhkR1ZrUTJWc2JGWmhiSFZsS0dOdmJtWnBaeXdnWTJWc2JFUmhkR0VwSUh0Y2JseDBkbUZ5SUhWdWFYRjFaVkp2ZDB0bGVTQTlJR052Ym1acFp5NWtZWFJoVTI5MWNtTmxXMk5sYkd4RVlYUmhMbkp2ZDA1MWJXSmxjbDFiWTI5dVptbG5MblZ1YVhGMVpWSnZkMHRsZVYwN1hHNWNibHgwYVdZZ0tIUjVjR1Z2WmlCamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6VzNWdWFYRjFaVkp2ZDB0bGVWMGdQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwWEhSamIyNW1hV2N1YVc1dVpYSXVaV1JwZEdWa1ZtRnNkV1Z6VzNWdWFYRjFaVkp2ZDB0bGVWMGdQU0I3ZlR0Y2JseDBmVnh1WEc1Y2RHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhOYmRXNXBjWFZsVW05M1MyVjVYVnRqWld4c1JHRjBZUzVyWlhsZElEMGdZMlZzYkVSaGRHRXVaV1JwZEdWa1ZtRnNkV1U3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJsY25OcGMzUlNiM2RXWVd4MVpYTW9ZMjl1Wm1sbkxDQnliM2NwSUh0Y2JseDBkbUZ5SUhWdWFYRjFaVkp2ZDB0bGVTQTlJSEp2ZDF0amIyNW1hV2N1ZFc1cGNYVmxVbTkzUzJWNVhUdGNibHh1WEhScFppQW9kSGx3Wlc5bUlHTnZibVpwWnk1cGJtNWxjaTVsWkdsMFpXUldZV3gxWlhOYmRXNXBjWFZsVW05M1MyVjVYU0FoUFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhSY2RFOWlhbVZqZEM1clpYbHpLR052Ym1acFp5NXBibTVsY2k1bFpHbDBaV1JXWVd4MVpYTmJkVzVwY1hWbFVtOTNTMlY1WFNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloclpYa3BJSHRjYmx4MFhIUmNkSEp2ZDF0clpYbGRJRDBnWTI5dVptbG5MbWx1Ym1WeUxtVmthWFJsWkZaaGJIVmxjMXQxYm1seGRXVlNiM2RMWlhsZFcydGxlVjA3WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFJqYjI1bWFXY3VhVzV1WlhJdVpXUnBkR1ZrVm1Gc2RXVnpXM1Z1YVhGMVpWSnZkMHRsZVYwZ1BTQjdmVHRjYmx4MGZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCd1pYSnphWE4wUW1GMFkyaFdZV3gxWlhNb1kyOXVabWxuS1NCN1hHNWNkR052Ym1acFp5NWtZWFJoVTI5MWNtTmxMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9jbTkzS1NCN1hHNWNkRngwY0dWeWMybHpkRkp2ZDFaaGJIVmxjeWhqYjI1bWFXY3NJSEp2ZHlrN1hHNWNkSDBwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmx4MFoyVjBRMlZzYkVSaGRHRTZJR2RsZEVObGJHeEVZWFJoTEZ4dVhIUm5aWFJHYVhobFpFTmxiR3hFWVhSaE9pQm5aWFJHYVhobFpFTmxiR3hFWVhSaExGeHVYSFJ0WlhKblpVVmthWFJsWkZaaGJIVmxjMGx1VW05M09pQnRaWEpuWlVWa2FYUmxaRlpoYkhWbGMwbHVVbTkzTEZ4dVhIUnRaWEpuWlVWa2FYUmxaRlpoYkhWbGMwbHVSR0YwWVZOdmRYSmpaVG9nYldWeVoyVkZaR2wwWldSV1lXeDFaWE5KYmtSaGRHRlRiM1Z5WTJVc1hHNWNkSE5sY0dGeVlYUmxWbUZzZFdWelNXNUVZWFJoVTI5MWNtTmxPaUJ6WlhCaGNtRjBaVlpoYkhWbGMwbHVSR0YwWVZOdmRYSmpaU3hjYmx4MGMzUnZjbVZWY0dSaGRHVmtRMlZzYkZaaGJIVmxPaUJ6ZEc5eVpWVndaR0YwWldSRFpXeHNWbUZzZFdVc1hHNWNkSEJsY25OcGMzUlNiM2RXWVd4MVpYTTZJSEJsY25OcGMzUlNiM2RXWVd4MVpYTXNYRzVjZEhCbGNuTnBjM1JDWVhSamFGWmhiSFZsY3pvZ2NHVnljMmx6ZEVKaGRHTm9WbUZzZFdWelhHNTlPeUlzSWlGbWRXNWpkR2x2YmloMExHVXBlMXdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdSbFptbHVaU1ltWkdWbWFXNWxMbUZ0WkQ5a1pXWnBibVVvVzEwc1pTazZYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1Y0Y0c5eWRITS9iVzlrZFd4bExtVjRjRzl5ZEhNOVpTZ3BPblF1UTJ4aGMzTTlaU2dwZlNoMGFHbHpMR1oxYm1OMGFXOXVLQ2w3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdkQ2dwZTMxMllYSWdaVDFjSW1OdmJuTjBjblZqZEc5eVhDSXNiejFjSW1WNGRHVnVaRndpTzNKbGRIVnliaUIwVzI5ZFBXWjFibU4wYVc5dUtIUXBlMloxYm1OMGFXOXVJRzRvS1h0cFcyVmRMbUZ3Y0d4NUtIUm9hWE1zWVhKbmRXMWxiblJ6S1gxMllYSWdhVDFQWW1wbFkzUXVZM0psWVhSbEtIUm9hWE11Y0hKdmRHOTBlWEJsS1R0eVpYUjFjbTRnZEM1allXeHNLR2tzZEdocGN5NXdjbTkwYjNSNWNHVXBMRzR1Y0hKdmRHOTBlWEJsUFdrc2JsdHZYVDEwYUdselcyOWRMRzU5TEhSOUtUc2lYWDA9In0=
