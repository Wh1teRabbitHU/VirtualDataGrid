"use strict";var virtualDG,colspans=[1,2,4,8,16];function getDiffBetweenTwoTimes(e,t){return(t-e)/1e3}function generateHeaders(e,t){for(var n=[],r=0;r<t;r++){n.push([]);for(var a=colspans[t-r-1],o=1;o<=e/a;o++)n[r].push({key:"column_"+o,text:o+". column",dataType:"text",colspan:a})}return n}function generateFixedHeaders(e,t){for(var n=[],r=0;r<t;r++){n.push([]);for(var a=colspans[t-r-1],o=1;o<=e/a;o++)n[r].push({key:"fixed_column_"+o,text:o+". fixed column",dataType:"text",colspan:a});0===n[r].length&&0!==e&&n[r].push({})}return n}function generateData(e,t,n){var r,a,o,u=[],i=e.length-1;for(r=1;r<=n;r++){for(o={column_1:r},a=1;a<=e[i].length;a++)o[e[i][a-1].key]=r*(a+1)+". cell";for(a=1;a<=t[i].length;a++)o[t[i][a-1].key]=r*(a+1)+". cell";u.push(o)}return u}function generateDataGrid(){var e=getOptionsFromInputs();virtualDG=new window.VirtualDataGrid;var t=new Date;virtualDG.generateTable(e),console.log("Generation successfully finished! Elapsed time: "+getDiffBetweenTwoTimes(t,new Date)+"s")}function setupOptionContainer(){var e=window.innerHeight-document.querySelector(".root-container").getBoundingClientRect().top-18;document.querySelector(".generator-container").style.maxHeight=e+"px",document.querySelector(".generator-container").style.height=e+"px"}function setupOptions(){void 0===virtualDG&&(virtualDG=new window.VirtualDataGrid);var e=document.querySelectorAll("[name]");null!==e&&e.forEach(function(e){var t=e.getAttribute("type");"radio"!==t&&"checkbox"!==t&&(e.value="")}),Object.keys(virtualDG.DEFAULT_OPTIONS).forEach(function(e){fillInputsWithOptions(e,virtualDG.DEFAULT_OPTIONS[e])})}function fillInputsWithOptions(e,t){null!==t&&"object"==typeof t&&Object.keys(t).forEach(function(n){fillInputsWithOptions(e+"-"+n,t[n])});var n=document.querySelector("[name="+e+"]");if(null!==n&&"function"!=typeof t&&null!==t){var r=n.getAttribute("type");if("true"===n.getAttribute("data-no-default"))return;"radio"===r||"checkbox"===r?document.querySelectorAll("[name="+e+"]").forEach(function(e){e.checked=e.value===t+""}):n.value="object"==typeof t?JSON.stringify(t,null,2):t}}function getOptionsFromInputs(){var e={},t={};return document.querySelectorAll("[name]").forEach(function(t){var n=t.getAttribute("type"),r=t.classList.contains("function"),a=t.classList.contains("json");if("radio"!==n&&"checkbox"!==n||t.matches(":checked")){var o=t.value;""!==o&&("true"===o?o=!0:"false"===o&&(o=!1),r&&(o=evalFunctionValues(t)),a&&(o=JSON.parse(t.value)),"number"===n&&(o=parseInt(t.value,10)),e[t.getAttribute("name")]=o)}}),Object.keys(e).forEach(function(n){for(var r=n.split("-"),a=null,o=0;o<r.length;o++){var u=r[o];null===a?r.length-1===o?t[u]=e[n]:(void 0===t[u]&&(t[u]={}),a=t[u]):r.length-1===o?a[u]=e[n]:(void 0===a[u]&&(a[u]={}),a=a[u])}}),t}function evalFunctionValues(e){var t=e.getAttribute("data-attributes").split(",");return Function(t,e.value)}var isEventDelayed=!1;function resizeEventHandler(){isEventDelayed||(isEventDelayed=!0,window.setTimeout(function(){isEventDelayed=!1,setupOptionContainer()},200))}function initPage(){setupOptionContainer(),setupOptions(),getOptionsFromInputs()}window.addEventListener("load",function(){var e=document.querySelector("#generate-table"),t=document.querySelector("#test-options"),n=document.querySelector("#reset-to-default"),r=document.querySelector("#generate-data");initPage(),window.addEventListener("resize",resizeEventHandler),null!==e&&e.addEventListener("click",function(){var e=document.querySelector(".main-container");null!==e&&(e.innerHTML=""),generateDataGrid()}),null!==t&&t.addEventListener("click",function(){window.console.log(getOptionsFromInputs())}),null!==n&&n.addEventListener("click",setupOptions),null!==r&&r.addEventListener("click",function(){var e=document.querySelector("[name=headers]"),t=document.querySelector("[name=fixedHeaders]"),n=document.querySelector("[name=dataSource]"),r=document.querySelector("#data-generator-header-size"),a=document.querySelector("#data-generator-fixed-header-size"),o=document.querySelector("#data-generator-headers-row-size"),u=document.querySelector("#data-generator-data-size");if(null!==e&&null!==t&&null!==n&&null!==r&&null!==a&&null!==o&&null!==u){var i=parseInt(r.value,10),l=parseInt(a.value,10),c=parseInt(o.value,10),s=parseInt(u.value,10),d=generateHeaders(i,c),f=generateFixedHeaders(l,c),v=generateData(d,f,s);e.value=JSON.stringify(d,null,2),t.value=JSON.stringify(f,null,2),n.value=JSON.stringify(v,null,2)}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
